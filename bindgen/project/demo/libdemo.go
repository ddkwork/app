// Code generated by bindgen. DO NOT EDIT.
package libdemo

import (
	"unsafe"

	"github.com/ddkwork/app/bindgen/bindlib"
)

const GengoLibraryName = "libdemo"

var GengoLibrary = bindlib.NewLibrary(GengoLibraryName)

type Cr3Type struct {
	Anon10_5
}
type Anon10_5 struct {
	Raw [1]int64
}
type Anon14_9 struct {
	Pcid            Uint64
	PageFrameNumber Uint64
	Reserved1       Uint64
	Reserved_2      Uint64
	PcidInvalidate  Uint64
}
type (
	_Int128T           = any
	_Uint128T          = any
	__NSConstantString = any
	SizeT              = uint64
	_BuiltinMsVaList   = *byte
	_BuiltinVaList     = *byte
	Uint64             = uint64
	Pcr3Type           = *Cr3Type
)

var __imp_hello bindlib.PreloadProc

// Gengo init function.
func init() {
	__imp_hello = GengoLibrary.ImportNow("hello")
	bindlib.Validate((*Cr3Type)(nil), 8, 8)
	bindlib.Validate((*Anon10_5)(nil), 8, 8)
	bindlib.Validate((*Anon14_9)(nil), 8, 8, "Pcid", 0, "PageFrameNumber", 1, "Reserved1", 6, "Reserved_2", 7, "PcidInvalidate", 7)
}
func Hello() { bindlib.CCall0(__imp_hello.Addr()) }
func (s Anon10_5) Flags() Uint64 {
	return bindlib.ReadBitcast[Uint64](unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0))
}

func (s *Anon10_5) SetFlags(v Uint64) {
	bindlib.WriteBitcast(unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0), v)
}

func (s Anon10_5) Fields() Anon14_9 {
	return bindlib.ReadBitcast[Anon14_9](unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0))
}

func (s *Anon10_5) SetFields(v Anon14_9) {
	bindlib.WriteBitcast(unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0), v)
}

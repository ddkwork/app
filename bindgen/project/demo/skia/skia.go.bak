// Code generated by gengo. DO NOT EDIT.
package libdemo

import (
	"unsafe"
	"github.com/can1357/gengo/gengort"
)

const GengoLibraryName = "zydis"

var GengoLibrary = gengort.NewLibrary(GengoLibraryName)

type  int32

const (
	PATH_ADD_MODE_APPEND = 0
	PATH_ADD_MODE_EXTEND = 1
)

type  int32

const (
	PATH_ARC_SIZE_SMALL = 0
	PATH_ARC_SIZE_LARGE = 1
)

type  int32

const (
	PATH_DIRECTION_CW  = 0
	PATH_DIRECTION_CCW = 1
)

type  int32

const (
	PATH_FILLTYPE_WINDING         = 0
	PATH_FILLTYPE_EVENODD         = 1
	PATH_FILLTYPE_INVERSE_WINDING = 2
	PATH_FILLTYPE_INVERSE_EVENODD = 3
)

type  int32

const (
	PATH_EFFECT_1D_STYLE_TRANSLATE = 0
	PATH_EFFECT_1D_STYLE_ROTATE    = 1
	PATH_EFFECT_1D_STYLE_MORPH     = 2
	PATH_EFFECT_1D_STYLE_LAST      = 2
)

type  int32

const (
	PATH_EFFECT_TRIM_MODE_NORMAL   = 0
	PATH_EFFECT_TRIM_MODE_INVERTED = 1
)

type  int32

const (
	PATH_OP_DIFFERENCE         = 0
	PATH_OP_INTERSECT          = 1
	PATH_OP_UNION              = 2
	PATH_OP_XOR                = 3
	PATH_OP_REVERSE_DIFFERENCE = 4
)

type  int32

const (
	PIXEL_GEOMETRY_UNKNOWN = 0
	PIXEL_GEOMETRY_RGB_H   = 1
	PIXEL_GEOMETRY_BGR_H   = 2
	PIXEL_GEOMETRY_RGB_V   = 3
	PIXEL_GEOMETRY_BGR_V   = 4
)

type  int32

const (
	GR_SURFACE_ORIGIN_TOP_LEFT    = 0
	GR_SURFACE_ORIGIN_BOTTOM_LEFT = 1
)

type  int32

const (
	BLEND_MODE_CLEAR          = 0
	BLEND_MODE_SRC            = 1
	BLEND_MODE_DST            = 2
	BLEND_MODE_SRCOVER        = 3
	BLEND_MODE_DSTOVER        = 4
	BLEND_MODE_SRCIN          = 5
	BLEND_MODE_DSTIN          = 6
	BLEND_MODE_SRCOUT         = 7
	BLEND_MODE_DSTOUT         = 8
	BLEND_MODE_SRCATOP        = 9
	BLEND_MODE_DSTATOP        = 10
	BLEND_MODE_XOR            = 11
	BLEND_MODE_PLUS           = 12
	BLEND_MODE_MODULATE       = 13
	BLEND_MODE_SCREEN         = 14
	BLEND_MODE_OVERLAY        = 15
	BLEND_MODE_DARKEN         = 16
	BLEND_MODE_LIGHTEN        = 17
	BLEND_MODE_COLORDODGE     = 18
	BLEND_MODE_COLORBURN      = 19
	BLEND_MODE_HARDLIGHT      = 20
	BLEND_MODE_SOFTLIGHT      = 21
	BLEND_MODE_DIFFERENCE     = 22
	BLEND_MODE_EXCLUSION      = 23
	BLEND_MODE_MULTIPLY       = 24
	BLEND_MODE_HUE            = 25
	BLEND_MODE_SATURATION     = 26
	BLEND_MODE_COLOR          = 27
	BLEND_MODE_LUMINOSITY     = 28
	BLEND_MODE_LAST_COEFF     = 14
	BLEND_MODE_LAST_SEPARABLE = 24
	BLEND_MODE_LAST           = 28
)

type  int32

const (
	BLUR_STYLE_NORMAL = 0
	BLUR_STYLE_SOLID  = 1
	BLUR_STYLE_OUTER  = 2
	BLUR_STYLE_INNER  = 3
	BLUR_STYLE_LAST   = 3
)

type  int32

const (
	CLIP_OP_DIFFERENCE = 0
	CLIP_OP_INTERSECT  = 1
	CLIP_OP_LAST       = 1
)

type  int32

const (
	HIGH_CONTRAST_CONFIG_INVERT_STYLE_NO_INVERT         = 0
	HIGH_CONTRAST_CONFIG_INVERT_STYLE_INVERT_BRIGHTNESS = 1
	HIGH_CONTRAST_CONFIG_INVERT_STYLE_INVERT_LIGHTNESS  = 2
	HIGH_CONTRAST_CONFIG_INVERT_STYLE_LAST              = 2
)

type  int32

const (
	COLOR_CHANNEL_RED   = 0
	COLOR_CHANNEL_GREEN = 1
	COLOR_CHANNEL_BLUE  = 2
	COLOR_CHANNEL_ALPHA = 3
	COLOR_CHANNEL_LAST  = 3
)

type  int32

const (
	PAINT_STYLE_FILL            = 0
	PAINT_STYLE_STROKE          = 1
	PAINT_STYLE_STROKE_AND_FILL = 2
)

type  int32

const (
	STROKE_CAP_BUTT    = 0
	STROKE_CAP_ROUND   = 1
	STROKE_CAP_SQUARE  = 2
	STROKE_CAP_LAST    = 2
	STROKE_CAP_DEFAULT = 0
)

type  int32

const (
	STROKE_JOIN_MITER   = 0
	STROKE_JOIN_ROUND   = 1
	STROKE_JOIN_BEVEL   = 2
	STROKE_JOIN_LAST    = 2
	STROKE_JOIN_DEFAULT = 0
)

type  int32

const (
	COLOR_TYPE_UNKNOWN            = 0
	COLOR_TYPE_ALPHA_8            = 1
	COLOR_TYPE_RGB_565            = 2
	COLOR_TYPE_ARGB_4444          = 3
	COLOR_TYPE_RGBA_8888          = 4
	COLOR_TYPE_RGB_888X           = 5
	COLOR_TYPE_BGRA_8888          = 6
	COLOR_TYPE_RGBA_1010102       = 7
	COLOR_TYPE_BGRA_1010102       = 8
	COLOR_TYPE_RGB_101010X        = 9
	COLOR_TYPE_BGR_101010X        = 10
	COLOR_TYPE_BGR_101010X_XR     = 11
	COLOR_TYPE_BGRA_10101010_XR   = 12
	C_OLOR__TYPE__RGBA_10X6       = 13
	COLOR_TYPE_GRAY_8             = 14
	COLOR_TYPE_RGBA_F16_NORM      = 15
	COLOR_TYPE_RGBA_F16           = 16
	COLOR_TYPE_RGBA_F32           = 17
	COLOR_TYPE_R8G8_UNORM         = 18
	COLOR_TYPE_A16_FLOAT          = 19
	COLOR_TYPE_R16G16_FLOAT       = 20
	COLOR_TYPE_A16_UNORM          = 21
	COLOR_TYPE_R16G16_UNORM       = 22
	COLOR_TYPE_R16G16B16A16_UNORM = 23
	COLOR_TYPE_SRGBA_8888         = 24
	COLOR_TYPE_R8_UNORM           = 25
	COLOR_TYPE_LAST               = 25
	COLOR_TYPE_N32                = 4
)

type  int32

const (
	ALPHA_TYPE_UNKNOWN  = 0
	ALPHA_TYPE_OPAQUE   = 1
	ALPHA_TYPE_PREMUL   = 2
	ALPHA_TYPE_UNPREMUL = 3
	ALPHA_TYPE_LAST     = 3
)

type  int32

const (
	IMAGE_CACHING_HINT_ALLOW    = 0
	IMAGE_CACHING_HINT_DISALLOW = 1
)

type  int32

const (
	FILTER_MODE_NEAREST = 0
	FILTER_MODE_LINEAR  = 1
	FILTER_MODE_LAST    = 1
)

type  int32

const (
	MIPMAP_MODE_NONE    = 0
	MIPMAP_MODE_NEAREST = 1
	MIPMAP_MODE_LINEAR  = 2
	MIPMAP_MODE_LAST    = 2
)

type  int32

const (
	FONT_HINTING_NONE   = 0
	FONT_HINTING_SLIGHT = 1
	FONT_HINTING_NORMAL = 2
	FONT_HINTING_FULL   = 3
)

type  int32

const (
	TEXT_ENCODING_UTF8     = 0
	TEXT_ENCODING_UTF16    = 1
	TEXT_ENCODING_UTF32    = 2
	TEXT_ENCODING_GLYPH_ID = 3
)

type  int32

const (
	FONT_STYLE_WEIGHT_INVISIBLE   = 0
	FONT_STYLE_WEIGHT_THIN        = 100
	FONT_STYLE_WEIGHT_EXTRA_LIGHT = 200
	FONT_STYLE_WEIGHT_LIGHT       = 300
	FONT_STYLE_WEIGHT_NORMAL      = 400
	FONT_STYLE_WEIGHT_MEDIUM      = 500
	FONT_STYLE_WEIGHT_SEMI_BOLD   = 600
	FONT_STYLE_WEIGHT_BOLD        = 700
	FONT_STYLE_WEIGHT_EXTRA_BOLD  = 800
	FONT_STYLE_WEIGHT_BLACK       = 900
	FONT_STYLE_WEIGHT_EXTRA_BLACK = 1000
)

type  int32

const (
	FONT_STYLE_WIDTH_ULTRA_CONDENSED = 1
	FONT_STYLE_WIDTH_EXTRA_CONDENSED = 2
	FONT_STYLE_WIDTH_CONDENSED       = 3
	FONT_STYLE_WIDTH_SEMI_CONDENSED  = 4
	FONT_STYLE_WIDTH_NORMAL          = 5
	FONT_STYLE_WIDTH_SEMI_EXPANDED   = 6
	FONT_STYLE_WIDTH_EXPANDED        = 7
	FONT_STYLE_WIDTH_EXTRA_EXPANDED  = 8
	FONT_STYLE_WIDTH_ULTRA_EXPANDED  = 9
)

type  int32

const (
	FONT_STYLE_SLANT_UPRIGHT = 0
	FONT_STYLE_SLANT_ITALIC  = 1
	FONT_STYLE_SLANT_OBLIQUE = 2
)

type  int32

const (
	FONT_METRICS_FLAG_UNDERLINE_THICKNESS_IS_VALID = 1
	FONT_METRICS_FLAG_UNDERLINE_POSITION_IS_VALID  = 2
	FONT_METRICS_FLAG_STRIKEOUT_THICKNESS_IS_VALID = 4
	FONT_METRICS_FLAG_STRIKEOUT_POSITION_IS_VALID  = 8
	FONT_METRICS_FLAG_BOUNDS_INVALID               = 16
)

type  int32

const (
	POINT_MODE_POINTS  = 0
	POINT_MODE_LINES   = 1
	POINT_MODE_POLYGON = 2
)

type  int32

const (
	SRC_RECT_CONSTRAINT_STRICT = 0
	SRC_RECT_CONSTRAINT_FAST   = 1
)

type  int32

const (
	TILE_MODE_CLAMP = 0
	TILE_REPEAT     = 1
	TILE_MIRROR     = 2
	TILE_DECAL      = 3
	TILE_LAST       = 3
)

type _CrtLocaleDataPublic struct {
	_LocalePctype     *uint16
	_LocaleMbCurMax   int32
	_LocaleLcCodepage uint32
}
type _CrtLocalePointers struct {
	Locinfo unsafe.Pointer
	Mbcinfo unsafe.Pointer
}
type MbstateT struct {
	_Wchar uint64
	_Byte  uint16
	_State uint16
}
type Anon40_9 struct {
	Yphs     *uint16
	Pos      *float32
	Utf8text *byte
	Clusters *uint32
}
type Anon53_9 struct {
	X int32
	Y int32
}
type Anon58_9 struct {
	X float32
	Y float32
}
type Anon65_9 struct {
	X float32
	Y float32
	Z float32
}
type Anon73_9 struct {
	W int32
	H int32
}
type Anon80_9 struct {
	Left   int32
	Top    int32
	Right  int32
	Bottom int32
}
type Anon87_9 struct {
	Left   float32
	Top    float32
	Right  float32
	Bottom float32
}
type Anon96_9 struct {
	scaleX float32
	skewX  float32
	transX float32
	skewY  float32
	scaleY float32
	transY float32
	Persp0 float32
	Persp1 float32
	Persp2 float32
}
type Anon193_9 struct {
	fFBOID     uint32
	fFormat    uint32
	fProtected bool
}
type Anon275_9 struct {
	Grayscale   bool
	invertStyle HighContrastConfigInvertStyleT
	Contrast    float32
}
type Anon375_9 struct {
	colorSpace *ColorSpaceT
	colorType  ColorTypeT
	alphaType  AlphaTypeT
	Width      int32
	Height     int32
}
type Anon406_9 struct {
	B float32
	C float32
}
type Anon424_9 struct {
	maxAniso int32
	useCubic bool
	Cubic    CubicResamplerT
	Filter   FilterModeT
	Mipmap   MipmapModeT
}
type Anon503_9 struct {
	Flags              uint32
	Top                float32
	Ascent             float32
	Descent            float32
	Bottom             float32
	Leading            float32
	avgCharWidth       float32
	maxCharWidth       float32
	xMin               float32
	xMax               float32
	xHeight            float32
	capHeight          float32
	underlineThickness float32
	underlinePosition  float32
	strikeoutThickness float32
	strikeoutPosition  float32
}
type Anon555_9 struct {
	timeZoneMinutes int16
	Year            uint16
	Month           uint8
	dayOfWeek       uint8
	Day             uint8
	Hour            uint8
	Minute          uint8
	Second          uint8
}
type Anon574_9 struct {
	Title           *byte
	Author          *byte
	Subject         *byte
	Keywords        *byte
	Creator         *byte
	Producer        *byte
	Creation        DateTimeT
	Modified        DateTimeT
	rasterDPI       float32
	Unused          float32
	encodingQuality int32
}
type _Int128T = any
type _Uint128T = any
type __NSConstantString = any
type SizeT = uint64
type _BuiltinMsVaList = *byte
type _BuiltinVaList = *byte
type UintptrT = uint64
type VaList = *byte
type SizeT = uint64
type PtrdiffT = int64
type IntptrT = int64
type _VcrtBool = bool
type WcharT = uint16
type Int8T = int8
type Int16T = int16
type Int32T = int32
type Int64T = int64
type Uint8T = uint8
type Uint16T = uint16
type Uint32T = uint32
type Uint64T = uint64
type IntLeast8T = int8
type IntLeast16T = int16
type IntLeast32T = int32
type IntLeast64T = int64
type UintLeast8T = uint8
type UintLeast16T = uint16
type UintLeast32T = uint32
type UintLeast64T = uint64
type IntFast8T = int8
type IntFast16T = int32
type IntFast32T = int32
type IntFast64T = int64
type UintFast8T = uint8
type UintFast16T = uint32
type UintFast32T = uint32
type UintFast64T = uint64
type IntmaxT = int64
type UintmaxT = uint64
type _CrtBool = bool
type ErrnoT = int32
type WintT = uint16
type WctypeT = uint16
type _Time32T = int64
type TimeT = int64
type _LocaleT = *_CrtLocalePointers
type RsizeT = uint
type StringT = any
type TextBlobT = any
type TextBlobBuilderT = any
type TextBlobBuilderRunBufferT = any
type DataT = any
type IpointT = any
type PointT = any
type Point3T = any
type IsizeT = any
type IrectT = any
type RectT = any
type MatrixT = any
type PathAddModeT = any
type PathArcSizeT = any
type PathT = any
type PathDirectionT = any
type PathFillTypeT = any
type PathEffect1dStyleT = any
type PathEffectTrimModeT = any
type PathEffectT = any
type PathOpT = any
type OpBuilderT = any
type PixelGeometryT = any
type SurfacePropsT = any
type SurfaceT = any
type GrSurfaceOriginT = any
type GrGlFramebufferinfoT = any
type GrDirectContextT = any
type GrGlinterfaceT = any
type GrBackendrendertargetT = any
type BlendModeT = any
type BlurStyleT = any
type ClipOpT = any
type HighContrastConfigInvertStyleT = any
type HighContrastConfigT = any
type ColorChannelT = any
type ColorT = uint32
type ColorSpaceT = any
type PaintStyleT = any
type StrokeCapT = any
type StrokeJoinT = any
type PaintT = any
type ColorTypeT = any
type AlphaTypeT = any
type ImageInfoT = any
type ImageCachingHintT = any
type ImageT = any
type ImageFilterT = any
type MaskFilterT = any
type ColorFilterT = any
type CubicResamplerT = any
type FilterModeT = any
type MipmapModeT = any
type SamplingOptionsT = any
type TypefaceT = any
type FontHintingT = any
type TextEncodingT = any
type FontMgrT = any
type FontStyleSetT = any
type FontStyleWeightT = any
type FontStyleWidthT = any
type FontStyleSlantT = any
type FontStyleT = any
type FontMetricsFlagsT = any
type FontMetricsT = any
type FontT = any
type PointModeT = any
type SrcRectConstraintT = any
type CanvasT = any
type TileModeT = any
type ShaderT = any
type DateTimeT = any
type WstreamT = any
type FileWstreamT = any
type DynamicMemoryWstreamT = any
type MetadataT = any
type DocumentT = any

var __imp___va_start gengort.PreloadProc

//  Gengo init function.
func init() {
	__imp___va_start = GengoLibrary.ImportNow("__va_start")
	__imp___va_start = GengoLibrary.ImportNow("__va_start")
	__imp___security_init_cookie = GengoLibrary.ImportNow("__security_init_cookie")
	__imp___security_check_cookie = GengoLibrary.ImportNow("__security_check_cookie")
	__imp___report_gsfailure = GengoLibrary.ImportNow("__report_gsfailure")
	__imp__invalid_parameter_noinfo = GengoLibrary.ImportNow("_invalid_parameter_noinfo")
	__imp__invalid_parameter_noinfo_noreturn = GengoLibrary.ImportNow("_invalid_parameter_noinfo_noreturn")
	__imp__invoke_watson = GengoLibrary.ImportNow("_invoke_watson")
	__imp__errno = GengoLibrary.ImportNow("_errno")
	__imp__set_errno = GengoLibrary.ImportNow("_set_errno")
	__imp__get_errno = GengoLibrary.ImportNow("_get_errno")
	__imp___threadid = GengoLibrary.ImportNow("__threadid")
	__imp___threadhandle = GengoLibrary.ImportNow("__threadhandle")
	__imp_gr_backendrendertarget_new_gl = GengoLibrary.ImportNow("gr_backendrendertarget_new_gl")
	__imp_gr_backendrendertarget_delete = GengoLibrary.ImportNow("gr_backendrendertarget_delete")
	__imp_gr_direct_context_make_gl = GengoLibrary.ImportNow("gr_direct_context_make_gl")
	__imp_gr_direct_context_abandon_context = GengoLibrary.ImportNow("gr_direct_context_abandon_context")
	__imp_gr_direct_context_delete = GengoLibrary.ImportNow("gr_direct_context_delete")
	__imp_gr_direct_context_flush_and_submit = GengoLibrary.ImportNow("gr_direct_context_flush_and_submit")
	__imp_gr_direct_context_release_resources_and_abandon_context = GengoLibrary.ImportNow("gr_direct_context_release_resources_and_abandon_context")
	__imp_gr_direct_context_reset = GengoLibrary.ImportNow("gr_direct_context_reset")
	__imp_gr_direct_context_reset_gl_texture_bindings = GengoLibrary.ImportNow("gr_direct_context_reset_gl_texture_bindings")
	__imp_gr_direct_context_unref = GengoLibrary.ImportNow("gr_direct_context_unref")
	__imp_gr_glinterface_create_native_interface = GengoLibrary.ImportNow("gr_glinterface_create_native_interface")
	__imp_gr_glinterface_unref = GengoLibrary.ImportNow("gr_glinterface_unref")
	__imp_sk_canvas_get_surface = GengoLibrary.ImportNow("sk_canvas_get_surface")
	__imp_sk_canvas_clear = GengoLibrary.ImportNow("sk_canvas_clear")
	__imp_sk_canvas_clip_path_with_operation = GengoLibrary.ImportNow("sk_canvas_clip_path_with_operation")
	__imp_sk_canvas_clip_rect_with_operation = GengoLibrary.ImportNow("sk_canvas_clip_rect_with_operation")
	__imp_sk_canvas_concat = GengoLibrary.ImportNow("sk_canvas_concat")
	__imp_sk_canvas_draw_arc = GengoLibrary.ImportNow("sk_canvas_draw_arc")
	__imp_sk_canvas_draw_circle = GengoLibrary.ImportNow("sk_canvas_draw_circle")
	__imp_sk_canvas_draw_color = GengoLibrary.ImportNow("sk_canvas_draw_color")
	__imp_sk_canvas_draw_image_nine = GengoLibrary.ImportNow("sk_canvas_draw_image_nine")
	__imp_sk_canvas_draw_image_rect = GengoLibrary.ImportNow("sk_canvas_draw_image_rect")
	__imp_sk_canvas_draw_line = GengoLibrary.ImportNow("sk_canvas_draw_line")
	__imp_sk_canvas_draw_oval = GengoLibrary.ImportNow("sk_canvas_draw_oval")
	__imp_sk_canvas_draw_paint = GengoLibrary.ImportNow("sk_canvas_draw_paint")
	__imp_sk_canvas_draw_path = GengoLibrary.ImportNow("sk_canvas_draw_path")
	__imp_sk_canvas_draw_point = GengoLibrary.ImportNow("sk_canvas_draw_point")
	__imp_sk_canvas_draw_points = GengoLibrary.ImportNow("sk_canvas_draw_points")
	__imp_sk_canvas_draw_rect = GengoLibrary.ImportNow("sk_canvas_draw_rect")
	__imp_sk_canvas_draw_round_rect = GengoLibrary.ImportNow("sk_canvas_draw_round_rect")
	__imp_sk_canvas_draw_simple_text = GengoLibrary.ImportNow("sk_canvas_draw_simple_text")
	__imp_sk_canvas_draw_text_blob = GengoLibrary.ImportNow("sk_canvas_draw_text_blob")
	__imp_sk_canvas_get_local_clip_bounds = GengoLibrary.ImportNow("sk_canvas_get_local_clip_bounds")
	__imp_sk_canvas_get_save_count = GengoLibrary.ImportNow("sk_canvas_get_save_count")
	__imp_sk_canvas_get_total_matrix = GengoLibrary.ImportNow("sk_canvas_get_total_matrix")
	__imp_sk_canvas_is_clip_empty = GengoLibrary.ImportNow("sk_canvas_is_clip_empty")
	__imp_sk_canvas_is_clip_rect = GengoLibrary.ImportNow("sk_canvas_is_clip_rect")
	__imp_sk_canvas_quick_reject_path = GengoLibrary.ImportNow("sk_canvas_quick_reject_path")
	__imp_sk_canvas_quick_reject_rect = GengoLibrary.ImportNow("sk_canvas_quick_reject_rect")
	__imp_sk_canvas_reset_matrix = GengoLibrary.ImportNow("sk_canvas_reset_matrix")
	__imp_sk_canvas_restore = GengoLibrary.ImportNow("sk_canvas_restore")
	__imp_sk_canvas_restore_to_count = GengoLibrary.ImportNow("sk_canvas_restore_to_count")
	__imp_sk_canvas_rotate_radians = GengoLibrary.ImportNow("sk_canvas_rotate_radians")
	__imp_sk_canvas_save = GengoLibrary.ImportNow("sk_canvas_save")
	__imp_sk_canvas_save_layer = GengoLibrary.ImportNow("sk_canvas_save_layer")
	__imp_sk_canvas_save_layer_alpha = GengoLibrary.ImportNow("sk_canvas_save_layer_alpha")
	__imp_sk_canvas_scale = GengoLibrary.ImportNow("sk_canvas_scale")
	__imp_sk_canvas_set_matrix = GengoLibrary.ImportNow("sk_canvas_set_matrix")
	__imp_sk_canvas_skew = GengoLibrary.ImportNow("sk_canvas_skew")
	__imp_sk_canvas_translate = GengoLibrary.ImportNow("sk_canvas_translate")
	__imp_sk_colorfilter_new_color_matrix = GengoLibrary.ImportNow("sk_colorfilter_new_color_matrix")
	__imp_sk_colorfilter_new_compose = GengoLibrary.ImportNow("sk_colorfilter_new_compose")
	__imp_sk_colorfilter_new_high_contrast = GengoLibrary.ImportNow("sk_colorfilter_new_high_contrast")
	__imp_sk_colorfilter_new_lighting = GengoLibrary.ImportNow("sk_colorfilter_new_lighting")
	__imp_sk_colorfilter_new_luma_color = GengoLibrary.ImportNow("sk_colorfilter_new_luma_color")
	__imp_sk_colorfilter_new_mode = GengoLibrary.ImportNow("sk_colorfilter_new_mode")
	__imp_sk_colorfilter_unref = GengoLibrary.ImportNow("sk_colorfilter_unref")
	__imp_sk_colorspace_new_srgb = GengoLibrary.ImportNow("sk_colorspace_new_srgb")
	__imp_sk_data_get_data = GengoLibrary.ImportNow("sk_data_get_data")
	__imp_sk_data_get_size = GengoLibrary.ImportNow("sk_data_get_size")
	__imp_sk_data_new_with_copy = GengoLibrary.ImportNow("sk_data_new_with_copy")
	__imp_sk_data_unref = GengoLibrary.ImportNow("sk_data_unref")
	__imp_sk_encode_jpeg = GengoLibrary.ImportNow("sk_encode_jpeg")
	__imp_sk_encode_png = GengoLibrary.ImportNow("sk_encode_png")
	__imp_sk_encode_webp = GengoLibrary.ImportNow("sk_encode_webp")
	__imp_sk_font_delete = GengoLibrary.ImportNow("sk_font_delete")
	__imp_sk_font_get_metrics = GengoLibrary.ImportNow("sk_font_get_metrics")
	__imp_sk_font_get_xpos = GengoLibrary.ImportNow("sk_font_get_xpos")
	__imp_sk_font_measure_text = GengoLibrary.ImportNow("sk_font_measure_text")
	__imp_sk_font_new_with_values = GengoLibrary.ImportNow("sk_font_new_with_values")
	__imp_sk_font_set_force_auto_hinting = GengoLibrary.ImportNow("sk_font_set_force_auto_hinting")
	__imp_sk_font_set_hinting = GengoLibrary.ImportNow("sk_font_set_hinting")
	__imp_sk_font_set_subpixel = GengoLibrary.ImportNow("sk_font_set_subpixel")
	__imp_sk_font_text_to_glyphs = GengoLibrary.ImportNow("sk_font_text_to_glyphs")
	__imp_sk_font_unichar_to_glyph = GengoLibrary.ImportNow("sk_font_unichar_to_glyph")
	__imp_sk_font_unichars_to_glyphs = GengoLibrary.ImportNow("sk_font_unichars_to_glyphs")
	__imp_sk_font_glyph_widths = GengoLibrary.ImportNow("sk_font_glyph_widths")
	__imp_sk_fontmgr_count_families = GengoLibrary.ImportNow("sk_fontmgr_count_families")
	__imp_sk_fontmgr_create_from_data = GengoLibrary.ImportNow("sk_fontmgr_create_from_data")
	__imp_sk_fontmgr_get_family_name = GengoLibrary.ImportNow("sk_fontmgr_get_family_name")
	__imp_sk_fontmgr_match_family = GengoLibrary.ImportNow("sk_fontmgr_match_family")
	__imp_sk_fontmgr_match_family_style = GengoLibrary.ImportNow("sk_fontmgr_match_family_style")
	__imp_sk_fontmgr_match_family_style_character = GengoLibrary.ImportNow("sk_fontmgr_match_family_style_character")
	__imp_sk_fontmgr_ref_default = GengoLibrary.ImportNow("sk_fontmgr_ref_default")
	__imp_sk_fontstyleset_create_typeface = GengoLibrary.ImportNow("sk_fontstyleset_create_typeface")
	__imp_sk_fontstyleset_get_count = GengoLibrary.ImportNow("sk_fontstyleset_get_count")
	__imp_sk_fontstyleset_get_style = GengoLibrary.ImportNow("sk_fontstyleset_get_style")
	__imp_sk_fontstyleset_match_style = GengoLibrary.ImportNow("sk_fontstyleset_match_style")
	__imp_sk_fontstyleset_unref = GengoLibrary.ImportNow("sk_fontstyleset_unref")
	__imp_sk_fontstyle_delete = GengoLibrary.ImportNow("sk_fontstyle_delete")
	__imp_sk_fontstyle_get_slant = GengoLibrary.ImportNow("sk_fontstyle_get_slant")
	__imp_sk_fontstyle_get_weight = GengoLibrary.ImportNow("sk_fontstyle_get_weight")
	__imp_sk_fontstyle_get_width = GengoLibrary.ImportNow("sk_fontstyle_get_width")
	__imp_sk_fontstyle_new = GengoLibrary.ImportNow("sk_fontstyle_new")
	__imp_sk_image_get_alpha_type = GengoLibrary.ImportNow("sk_image_get_alpha_type")
	__imp_sk_image_get_color_type = GengoLibrary.ImportNow("sk_image_get_color_type")
	__imp_sk_image_get_colorspace = GengoLibrary.ImportNow("sk_image_get_colorspace")
	__imp_sk_image_get_height = GengoLibrary.ImportNow("sk_image_get_height")
	__imp_sk_image_get_width = GengoLibrary.ImportNow("sk_image_get_width")
	__imp_sk_image_make_non_texture_image = GengoLibrary.ImportNow("sk_image_make_non_texture_image")
	__imp_sk_image_make_shader = GengoLibrary.ImportNow("sk_image_make_shader")
	__imp_sk_image_new_from_encoded = GengoLibrary.ImportNow("sk_image_new_from_encoded")
	__imp_sk_image_new_raster_data = GengoLibrary.ImportNow("sk_image_new_raster_data")
	__imp_sk_image_read_pixels = GengoLibrary.ImportNow("sk_image_read_pixels")
	__imp_sk_image_unref = GengoLibrary.ImportNow("sk_image_unref")
	__imp_sk_image_texture_from_image = GengoLibrary.ImportNow("sk_image_texture_from_image")
	__imp_sk_imagefilter_new_arithmetic = GengoLibrary.ImportNow("sk_imagefilter_new_arithmetic")
	__imp_sk_imagefilter_new_blur = GengoLibrary.ImportNow("sk_imagefilter_new_blur")
	__imp_sk_imagefilter_new_color_filter = GengoLibrary.ImportNow("sk_imagefilter_new_color_filter")
	__imp_sk_imagefilter_new_compose = GengoLibrary.ImportNow("sk_imagefilter_new_compose")
	__imp_sk_imagefilter_new_dilate = GengoLibrary.ImportNow("sk_imagefilter_new_dilate")
	__imp_sk_imagefilter_new_displacement_map_effect = GengoLibrary.ImportNow("sk_imagefilter_new_displacement_map_effect")
	__imp_sk_imagefilter_new_distant_lit_diffuse = GengoLibrary.ImportNow("sk_imagefilter_new_distant_lit_diffuse")
	__imp_sk_imagefilter_new_distant_lit_specular = GengoLibrary.ImportNow("sk_imagefilter_new_distant_lit_specular")
	__imp_sk_imagefilter_new_drop_shadow = GengoLibrary.ImportNow("sk_imagefilter_new_drop_shadow")
	__imp_sk_imagefilter_new_drop_shadow_only = GengoLibrary.ImportNow("sk_imagefilter_new_drop_shadow_only")
	__imp_sk_imagefilter_new_erode = GengoLibrary.ImportNow("sk_imagefilter_new_erode")
	__imp_sk_imagefilter_new_image_source = GengoLibrary.ImportNow("sk_imagefilter_new_image_source")
	__imp_sk_imagefilter_new_image_source_default = GengoLibrary.ImportNow("sk_imagefilter_new_image_source_default")
	__imp_sk_imagefilter_new_magnifier = GengoLibrary.ImportNow("sk_imagefilter_new_magnifier")
	__imp_sk_imagefilter_new_matrix_convolution = GengoLibrary.ImportNow("sk_imagefilter_new_matrix_convolution")
	__imp_sk_imagefilter_new_matrix_transform = GengoLibrary.ImportNow("sk_imagefilter_new_matrix_transform")
	__imp_sk_imagefilter_new_merge = GengoLibrary.ImportNow("sk_imagefilter_new_merge")
	__imp_sk_imagefilter_new_offset = GengoLibrary.ImportNow("sk_imagefilter_new_offset")
	__imp_sk_imagefilter_new_point_lit_diffuse = GengoLibrary.ImportNow("sk_imagefilter_new_point_lit_diffuse")
	__imp_sk_imagefilter_new_point_lit_specular = GengoLibrary.ImportNow("sk_imagefilter_new_point_lit_specular")
	__imp_sk_imagefilter_new_spot_lit_diffuse = GengoLibrary.ImportNow("sk_imagefilter_new_spot_lit_diffuse")
	__imp_sk_imagefilter_new_spot_lit_specular = GengoLibrary.ImportNow("sk_imagefilter_new_spot_lit_specular")
	__imp_sk_imagefilter_new_tile = GengoLibrary.ImportNow("sk_imagefilter_new_tile")
	__imp_sk_imagefilter_unref = GengoLibrary.ImportNow("sk_imagefilter_unref")
	__imp_sk_maskfilter_new_blur_with_flags = GengoLibrary.ImportNow("sk_maskfilter_new_blur_with_flags")
	__imp_sk_maskfilter_new_clip = GengoLibrary.ImportNow("sk_maskfilter_new_clip")
	__imp_sk_maskfilter_new_gamma = GengoLibrary.ImportNow("sk_maskfilter_new_gamma")
	__imp_sk_maskfilter_new_shader = GengoLibrary.ImportNow("sk_maskfilter_new_shader")
	__imp_sk_maskfilter_new_table = GengoLibrary.ImportNow("sk_maskfilter_new_table")
	__imp_sk_maskfilter_unref = GengoLibrary.ImportNow("sk_maskfilter_unref")
	__imp_sk_paint_equivalent = GengoLibrary.ImportNow("sk_paint_equivalent")
	__imp_sk_paint_clone = GengoLibrary.ImportNow("sk_paint_clone")
	__imp_sk_paint_delete = GengoLibrary.ImportNow("sk_paint_delete")
	__imp_sk_paint_get_blend_mode_or = GengoLibrary.ImportNow("sk_paint_get_blend_mode_or")
	__imp_sk_paint_get_color = GengoLibrary.ImportNow("sk_paint_get_color")
	__imp_sk_paint_get_colorfilter = GengoLibrary.ImportNow("sk_paint_get_colorfilter")
	__imp_sk_paint_get_fill_path = GengoLibrary.ImportNow("sk_paint_get_fill_path")
	__imp_sk_paint_get_imagefilter = GengoLibrary.ImportNow("sk_paint_get_imagefilter")
	__imp_sk_paint_get_maskfilter = GengoLibrary.ImportNow("sk_paint_get_maskfilter")
	__imp_sk_paint_get_path_effect = GengoLibrary.ImportNow("sk_paint_get_path_effect")
	__imp_sk_paint_get_shader = GengoLibrary.ImportNow("sk_paint_get_shader")
	__imp_sk_paint_get_stroke_cap = GengoLibrary.ImportNow("sk_paint_get_stroke_cap")
	__imp_sk_paint_get_stroke_join = GengoLibrary.ImportNow("sk_paint_get_stroke_join")
	__imp_sk_paint_get_stroke_miter = GengoLibrary.ImportNow("sk_paint_get_stroke_miter")
	__imp_sk_paint_get_stroke_width = GengoLibrary.ImportNow("sk_paint_get_stroke_width")
	__imp_sk_paint_get_style = GengoLibrary.ImportNow("sk_paint_get_style")
	__imp_sk_paint_is_antialias = GengoLibrary.ImportNow("sk_paint_is_antialias")
	__imp_sk_paint_is_dither = GengoLibrary.ImportNow("sk_paint_is_dither")
	__imp_sk_paint_new = GengoLibrary.ImportNow("sk_paint_new")
	__imp_sk_paint_reset = GengoLibrary.ImportNow("sk_paint_reset")
	__imp_sk_paint_set_antialias = GengoLibrary.ImportNow("sk_paint_set_antialias")
	__imp_sk_paint_set_blend_mode = GengoLibrary.ImportNow("sk_paint_set_blend_mode")
	__imp_sk_paint_set_color = GengoLibrary.ImportNow("sk_paint_set_color")
	__imp_sk_paint_set_colorfilter = GengoLibrary.ImportNow("sk_paint_set_colorfilter")
	__imp_sk_paint_set_dither = GengoLibrary.ImportNow("sk_paint_set_dither")
	__imp_sk_paint_set_imagefilter = GengoLibrary.ImportNow("sk_paint_set_imagefilter")
	__imp_sk_paint_set_maskfilter = GengoLibrary.ImportNow("sk_paint_set_maskfilter")
	__imp_sk_paint_set_path_effect = GengoLibrary.ImportNow("sk_paint_set_path_effect")
	__imp_sk_paint_set_shader = GengoLibrary.ImportNow("sk_paint_set_shader")
	__imp_sk_paint_set_stroke_cap = GengoLibrary.ImportNow("sk_paint_set_stroke_cap")
	__imp_sk_paint_set_stroke_join = GengoLibrary.ImportNow("sk_paint_set_stroke_join")
	__imp_sk_paint_set_stroke_miter = GengoLibrary.ImportNow("sk_paint_set_stroke_miter")
	__imp_sk_paint_set_stroke_width = GengoLibrary.ImportNow("sk_paint_set_stroke_width")
	__imp_sk_paint_set_style = GengoLibrary.ImportNow("sk_paint_set_style")
	__imp_sk_path_add_circle = GengoLibrary.ImportNow("sk_path_add_circle")
	__imp_sk_path_add_oval = GengoLibrary.ImportNow("sk_path_add_oval")
	__imp_sk_path_add_path = GengoLibrary.ImportNow("sk_path_add_path")
	__imp_sk_path_add_path_matrix = GengoLibrary.ImportNow("sk_path_add_path_matrix")
	__imp_sk_path_add_path_offset = GengoLibrary.ImportNow("sk_path_add_path_offset")
	__imp_sk_path_add_path_reverse = GengoLibrary.ImportNow("sk_path_add_path_reverse")
	__imp_sk_path_add_poly = GengoLibrary.ImportNow("sk_path_add_poly")
	__imp_sk_path_add_rect = GengoLibrary.ImportNow("sk_path_add_rect")
	__imp_sk_path_add_rounded_rect = GengoLibrary.ImportNow("sk_path_add_rounded_rect")
	__imp_sk_path_arc_to = GengoLibrary.ImportNow("sk_path_arc_to")
	__imp_sk_path_arc_to_with_oval = GengoLibrary.ImportNow("sk_path_arc_to_with_oval")
	__imp_sk_path_arc_to_with_points = GengoLibrary.ImportNow("sk_path_arc_to_with_points")
	__imp_sk_path_clone = GengoLibrary.ImportNow("sk_path_clone")
	__imp_sk_path_close = GengoLibrary.ImportNow("sk_path_close")
	__imp_sk_path_compute_tight_bounds = GengoLibrary.ImportNow("sk_path_compute_tight_bounds")
	__imp_sk_path_conic_to = GengoLibrary.ImportNow("sk_path_conic_to")
	__imp_sk_path_contains = GengoLibrary.ImportNow("sk_path_contains")
	__imp_sk_path_count_points = GengoLibrary.ImportNow("sk_path_count_points")
	__imp_sk_path_cubic_to = GengoLibrary.ImportNow("sk_path_cubic_to")
	__imp_sk_path_delete = GengoLibrary.ImportNow("sk_path_delete")
	__imp_sk_path_get_bounds = GengoLibrary.ImportNow("sk_path_get_bounds")
	__imp_sk_path_get_points = GengoLibrary.ImportNow("sk_path_get_points")
	__imp_sk_path_get_filltype = GengoLibrary.ImportNow("sk_path_get_filltype")
	__imp_sk_path_get_last_point = GengoLibrary.ImportNow("sk_path_get_last_point")
	__imp_sk_path_line_to = GengoLibrary.ImportNow("sk_path_line_to")
	__imp_sk_path_move_to = GengoLibrary.ImportNow("sk_path_move_to")
	__imp_sk_path_new = GengoLibrary.ImportNow("sk_path_new")
	__imp_sk_path_parse_svg_string = GengoLibrary.ImportNow("sk_path_parse_svg_string")
	__imp_sk_path_quad_to = GengoLibrary.ImportNow("sk_path_quad_to")
	__imp_sk_path_rarc_to = GengoLibrary.ImportNow("sk_path_rarc_to")
	__imp_sk_path_rconic_to = GengoLibrary.ImportNow("sk_path_rconic_to")
	__imp_sk_path_rcubic_to = GengoLibrary.ImportNow("sk_path_rcubic_to")
	__imp_sk_path_reset = GengoLibrary.ImportNow("sk_path_reset")
	__imp_sk_path_rewind = GengoLibrary.ImportNow("sk_path_rewind")
	__imp_sk_path_rline_to = GengoLibrary.ImportNow("sk_path_rline_to")
	__imp_sk_path_rmove_to = GengoLibrary.ImportNow("sk_path_rmove_to")
	__imp_sk_path_set_filltype = GengoLibrary.ImportNow("sk_path_set_filltype")
	__imp_sk_path_to_svg_string = GengoLibrary.ImportNow("sk_path_to_svg_string")
	__imp_sk_path_transform = GengoLibrary.ImportNow("sk_path_transform")
	__imp_sk_path_transform_to_dest = GengoLibrary.ImportNow("sk_path_transform_to_dest")
	__imp_sk_path_effect_create_1d_path = GengoLibrary.ImportNow("sk_path_effect_create_1d_path")
	__imp_sk_path_effect_create_2d_line = GengoLibrary.ImportNow("sk_path_effect_create_2d_line")
	__imp_sk_path_effect_create_2d_path = GengoLibrary.ImportNow("sk_path_effect_create_2d_path")
	__imp_sk_path_effect_create_compose = GengoLibrary.ImportNow("sk_path_effect_create_compose")
	__imp_sk_path_effect_create_corner = GengoLibrary.ImportNow("sk_path_effect_create_corner")
	__imp_sk_path_effect_create_dash = GengoLibrary.ImportNow("sk_path_effect_create_dash")
	__imp_sk_path_effect_create_discrete = GengoLibrary.ImportNow("sk_path_effect_create_discrete")
	__imp_sk_path_effect_create_sum = GengoLibrary.ImportNow("sk_path_effect_create_sum")
	__imp_sk_path_effect_create_trim = GengoLibrary.ImportNow("sk_path_effect_create_trim")
	__imp_sk_path_effect_unref = GengoLibrary.ImportNow("sk_path_effect_unref")
	__imp_sk_path_op = GengoLibrary.ImportNow("sk_path_op")
	__imp_sk_path_simplify = GengoLibrary.ImportNow("sk_path_simplify")
	__imp_sk_opbuilder_add = GengoLibrary.ImportNow("sk_opbuilder_add")
	__imp_sk_opbuilder_destroy = GengoLibrary.ImportNow("sk_opbuilder_destroy")
	__imp_sk_opbuilder_new = GengoLibrary.ImportNow("sk_opbuilder_new")
	__imp_sk_opbuilder_resolve = GengoLibrary.ImportNow("sk_opbuilder_resolve")
	__imp_sk_shader_new_blend = GengoLibrary.ImportNow("sk_shader_new_blend")
	__imp_sk_shader_new_color = GengoLibrary.ImportNow("sk_shader_new_color")
	__imp_sk_shader_new_linear_gradient = GengoLibrary.ImportNow("sk_shader_new_linear_gradient")
	__imp_sk_shader_new_perlin_noise_fractal_noise = GengoLibrary.ImportNow("sk_shader_new_perlin_noise_fractal_noise")
	__imp_sk_shader_new_perlin_noise_turbulence = GengoLibrary.ImportNow("sk_shader_new_perlin_noise_turbulence")
	__imp_sk_shader_new_radial_gradient = GengoLibrary.ImportNow("sk_shader_new_radial_gradient")
	__imp_sk_shader_new_sweep_gradient = GengoLibrary.ImportNow("sk_shader_new_sweep_gradient")
	__imp_sk_shader_new_two_point_conical_gradient = GengoLibrary.ImportNow("sk_shader_new_two_point_conical_gradient")
	__imp_sk_shader_unref = GengoLibrary.ImportNow("sk_shader_unref")
	__imp_sk_shader_with_color_filter = GengoLibrary.ImportNow("sk_shader_with_color_filter")
	__imp_sk_shader_with_local_matrix = GengoLibrary.ImportNow("sk_shader_with_local_matrix")
	__imp_sk_string_new = GengoLibrary.ImportNow("sk_string_new")
	__imp_sk_string_new_empty = GengoLibrary.ImportNow("sk_string_new_empty")
	__imp_sk_string_delete = GengoLibrary.ImportNow("sk_string_delete")
	__imp_sk_string_get_c_str = GengoLibrary.ImportNow("sk_string_get_c_str")
	__imp_sk_string_get_size = GengoLibrary.ImportNow("sk_string_get_size")
	__imp_sk_surface_make_raster_direct = GengoLibrary.ImportNow("sk_surface_make_raster_direct")
	__imp_sk_surface_make_raster_n32_premul = GengoLibrary.ImportNow("sk_surface_make_raster_n32_premul")
	__imp_sk_surface_make_surface = GengoLibrary.ImportNow("sk_surface_make_surface")
	__imp_sk_surface_make_image_snapshot = GengoLibrary.ImportNow("sk_surface_make_image_snapshot")
	__imp_sk_surface_get_canvas = GengoLibrary.ImportNow("sk_surface_get_canvas")
	__imp_sk_surface_new_backend_render_target = GengoLibrary.ImportNow("sk_surface_new_backend_render_target")
	__imp_sk_surface_unref = GengoLibrary.ImportNow("sk_surface_unref")
	__imp_sk_surfaceprops_new = GengoLibrary.ImportNow("sk_surfaceprops_new")
	__imp_sk_surfaceprops_delete = GengoLibrary.ImportNow("sk_surfaceprops_delete")
	__imp_sk_textblob_builder_alloc_run = GengoLibrary.ImportNow("sk_textblob_builder_alloc_run")
	__imp_sk_textblob_builder_alloc_run_pos = GengoLibrary.ImportNow("sk_textblob_builder_alloc_run_pos")
	__imp_sk_textblob_builder_alloc_run_pos_h = GengoLibrary.ImportNow("sk_textblob_builder_alloc_run_pos_h")
	__imp_sk_textblob_builder_delete = GengoLibrary.ImportNow("sk_textblob_builder_delete")
	__imp_sk_textblob_builder_make = GengoLibrary.ImportNow("sk_textblob_builder_make")
	__imp_sk_textblob_builder_new = GengoLibrary.ImportNow("sk_textblob_builder_new")
	__imp_sk_textblob_get_bounds = GengoLibrary.ImportNow("sk_textblob_get_bounds")
	__imp_sk_textblob_get_intercepts = GengoLibrary.ImportNow("sk_textblob_get_intercepts")
	__imp_sk_textblob_make_from_text = GengoLibrary.ImportNow("sk_textblob_make_from_text")
	__imp_sk_textblob_unref = GengoLibrary.ImportNow("sk_textblob_unref")
	__imp_sk_typeface_get_family_name = GengoLibrary.ImportNow("sk_typeface_get_family_name")
	__imp_sk_typeface_get_fontstyle = GengoLibrary.ImportNow("sk_typeface_get_fontstyle")
	__imp_sk_typeface_get_units_per_em = GengoLibrary.ImportNow("sk_typeface_get_units_per_em")
	__imp_sk_typeface_is_fixed_pitch = GengoLibrary.ImportNow("sk_typeface_is_fixed_pitch")
	__imp_sk_typeface_unref = GengoLibrary.ImportNow("sk_typeface_unref")
	__imp_sk_dynamic_memory_wstream_new = GengoLibrary.ImportNow("sk_dynamic_memory_wstream_new")
	__imp_sk_dynamic_memory_wstream_as_wstream = GengoLibrary.ImportNow("sk_dynamic_memory_wstream_as_wstream")
	__imp_sk_dynamic_memory_wstream_write = GengoLibrary.ImportNow("sk_dynamic_memory_wstream_write")
	__imp_sk_dynamic_memory_wstream_bytes_written = GengoLibrary.ImportNow("sk_dynamic_memory_wstream_bytes_written")
	__imp_sk_dynamic_memory_wstream_read = GengoLibrary.ImportNow("sk_dynamic_memory_wstream_read")
	__imp_sk_dynamic_memory_wstream_delete = GengoLibrary.ImportNow("sk_dynamic_memory_wstream_delete")
	__imp_sk_file_wstream_new = GengoLibrary.ImportNow("sk_file_wstream_new")
	__imp_sk_file_wstream_as_wstream = GengoLibrary.ImportNow("sk_file_wstream_as_wstream")
	__imp_sk_file_wstream_write = GengoLibrary.ImportNow("sk_file_wstream_write")
	__imp_sk_file_wstream_bytes_written = GengoLibrary.ImportNow("sk_file_wstream_bytes_written")
	__imp_sk_file_wstream_flush = GengoLibrary.ImportNow("sk_file_wstream_flush")
	__imp_sk_file_wstream_delete = GengoLibrary.ImportNow("sk_file_wstream_delete")
	__imp_sk_document_begin_page = GengoLibrary.ImportNow("sk_document_begin_page")
	__imp_sk_document_end_page = GengoLibrary.ImportNow("sk_document_end_page")
	__imp_sk_document_close = GengoLibrary.ImportNow("sk_document_close")
	__imp_sk_document_abort = GengoLibrary.ImportNow("sk_document_abort")
	__imp_sk_document_make_pdf = GengoLibrary.ImportNow("sk_document_make_pdf")
	__imp_register_image_codecs = GengoLibrary.ImportNow("register_image_codecs")
	gengort.Validate((*_CrtLocaleDataPublic)(nil), 0x10, 0x8, "_LocalePctype", 0x0, "_LocaleMbCurMax", 0x8, "_LocaleLcCodepage", 0xc)
	gengort.Validate((*_CrtLocalePointers)(nil), 0x10, 0x8, "Locinfo", 0x0, "Mbcinfo", 0x8)
	gengort.Validate((*MbstateT)(nil), 0x8, 0x4, "_Wchar", 0x0, "_Byte", 0x4, "_State", 0x6)
	gengort.Validate((*Anon40_9)(nil), 0x20, 0x8, "Yphs", 0x0, "Pos", 0x8, "Utf8text", 0x10, "Clusters", 0x18)
	gengort.Validate((*Anon53_9)(nil), 0x8, 0x4, "X", 0x0, "Y", 0x4)
	gengort.Validate((*Anon58_9)(nil), 0x8, 0x4, "X", 0x0, "Y", 0x4)
	gengort.Validate((*Anon65_9)(nil), 0xc, 0x4, "X", 0x0, "Y", 0x4, "Z", 0x8)
	gengort.Validate((*Anon73_9)(nil), 0x8, 0x4, "W", 0x0, "H", 0x4)
	gengort.Validate((*Anon80_9)(nil), 0x10, 0x4, "Left", 0x0, "Top", 0x4, "Right", 0x8, "Bottom", 0xc)
	gengort.Validate((*Anon87_9)(nil), 0x10, 0x4, "Left", 0x0, "Top", 0x4, "Right", 0x8, "Bottom", 0xc)
	gengort.Validate((*Anon96_9)(nil), 0x24, 0x4, "scaleX", 0x0, "skewX", 0x4, "transX", 0x8, "skewY", 0xc, "scaleY", 0x10, "transY", 0x14, "Persp0", 0x18, "Persp1", 0x1c, "Persp2", 0x20)
	gengort.Validate((*Anon193_9)(nil), 0xc, 0x4, "fFBOID", 0x0, "fFormat", 0x4, "fProtected", 0x8)
	gengort.Validate((*Anon275_9)(nil), 0xc, 0x4, "Grayscale", 0x0, "invertStyle", 0x4, "Contrast", 0x8)
	gengort.Validate((*Anon375_9)(nil), 0x18, 0x8, "colorSpace", 0x0, "colorType", 0x8, "alphaType", 0xc, "Width", 0x10, "Height", 0x14)
	gengort.Validate((*Anon406_9)(nil), 0x8, 0x4, "B", 0x0, "C", 0x4)
	gengort.Validate((*Anon424_9)(nil), 0x18, 0x4, "maxAniso", 0x0, "useCubic", 0x4, "Cubic", 0x8, "Filter", 0x10, "Mipmap", 0x14)
	gengort.Validate((*Anon503_9)(nil), 0x40, 0x4, "Flags", 0x0, "Top", 0x4, "Ascent", 0x8, "Descent", 0xc, "Bottom", 0x10, "Leading", 0x14, "avgCharWidth", 0x18, "maxCharWidth", 0x1c, "xMin", 0x20, "xMax", 0x24, "xHeight", 0x28, "capHeight", 0x2c, "underlineThickness", 0x30, "underlinePosition", 0x34, "strikeoutThickness", 0x38, "strikeoutPosition", 0x3c)
	gengort.Validate((*Anon555_9)(nil), 0xa, 0x2, "timeZoneMinutes", 0x0, "Year", 0x2, "Month", 0x4, "dayOfWeek", 0x5, "Day", 0x6, "Hour", 0x7, "Minute", 0x8, "Second", 0x9)
	gengort.Validate((*Anon574_9)(nil), 0x50, 0x8, "Title", 0x0, "Author", 0x8, "Subject", 0x10, "Keywords", 0x18, "Creator", 0x20, "Producer", 0x28, "Creation", 0x30, "Modified", 0x3a, "rasterDPI", 0x44, "Unused", 0x48, "encodingQuality", 0x4c)
}
func _VaStart( **byte) { gengort.CCall1(__imp___va_start.Addr(), gengort.MarshallSyscall()) }

var __imp___va_start gengort.PreloadProc

func _VaStart( *VaList) { gengort.CCall1(__imp___va_start.Addr(), gengort.MarshallSyscall()) }

var __imp___security_init_cookie gengort.PreloadProc

func _SecurityInitCookie() { gengort.CCall0(__imp___security_init_cookie.Addr()) }

var __imp___security_check_cookie gengort.PreloadProc

func _SecurityCheckCookie(_StackCookie uintptr) {
	gengort.CCall1(__imp___security_check_cookie.Addr(), gengort.MarshallSyscall(_StackCookie))
}

var __imp___report_gsfailure gengort.PreloadProc

func _ReportGsfailure(_StackCookie uintptr) {
	gengort.CCall1(__imp___report_gsfailure.Addr(), gengort.MarshallSyscall(_StackCookie))
}

var __imp__invalid_parameter_noinfo gengort.PreloadProc

func _InvalidParameterNoinfo() { gengort.CCall0(__imp__invalid_parameter_noinfo.Addr()) }

var __imp__invalid_parameter_noinfo_noreturn gengort.PreloadProc

func _InvalidParameterNoinfoNoreturn() {
	gengort.CCall0(__imp__invalid_parameter_noinfo_noreturn.Addr())
}

var __imp__invoke_watson gengort.PreloadProc

func _InvokeWatson(_Expression *WcharT, _FunctionName *WcharT, _FileName *WcharT, _LineNo uint32, _Reserved uintptr) {
	gengort.CCall5(__imp__invoke_watson.Addr(), gengort.MarshallSyscall(_Expression), gengort.MarshallSyscall(_FunctionName), gengort.MarshallSyscall(_FileName), gengort.MarshallSyscall(_LineNo), gengort.MarshallSyscall(_Reserved))
}

var __imp__errno gengort.PreloadProc

func _Errno() *int32 {
	__res := gengort.CCall0(__imp__errno.Addr())
	return gengort.UnmarshallSyscall[*int32](__res)
}

var __imp__set_errno gengort.PreloadProc

func _SetErrno(_Value int32) ErrnoT {
	__res := gengort.CCall1(__imp__set_errno.Addr(), gengort.MarshallSyscall(_Value))
	return gengort.UnmarshallSyscall[ErrnoT](__res)
}

var __imp__get_errno gengort.PreloadProc

func _GetErrno(_Value *int32) ErrnoT {
	__res := gengort.CCall1(__imp__get_errno.Addr(), gengort.MarshallSyscall(_Value))
	return gengort.UnmarshallSyscall[ErrnoT](__res)
}

var __imp___threadid gengort.PreloadProc

func _Threadid() uint64 {
	__res := gengort.CCall0(__imp___threadid.Addr())
	return gengort.UnmarshallSyscall[uint64](__res)
}

var __imp___threadhandle gengort.PreloadProc

func _Threadhandle() uintptr {
	__res := gengort.CCall0(__imp___threadhandle.Addr())
	return gengort.UnmarshallSyscall[uintptr](__res)
}

var __imp_gr_backendrendertarget_new_gl gengort.PreloadProc

func GrBackendrendertargetNewGl(width int32, height int32, samples int32, stencils int32, glInfo *GrGlFramebufferinfoT) *GrBackendrendertargetT {
	__res := gengort.CCall5(__imp_gr_backendrendertarget_new_gl.Addr(), gengort.MarshallSyscall(width), gengort.MarshallSyscall(height), gengort.MarshallSyscall(samples), gengort.MarshallSyscall(stencils), gengort.MarshallSyscall(glInfo))
	return gengort.UnmarshallSyscall[*GrBackendrendertargetT](__res)
}

var __imp_gr_backendrendertarget_delete gengort.PreloadProc

func GrBackendrendertargetDelete(rendertarget *GrBackendrendertargetT) {
	gengort.CCall1(__imp_gr_backendrendertarget_delete.Addr(), gengort.MarshallSyscall(rendertarget))
}

var __imp_gr_direct_context_make_gl gengort.PreloadProc

func GrDirectContextMakeGl(glInterface *GrGlinterfaceT) *GrDirectContextT {
	__res := gengort.CCall1(__imp_gr_direct_context_make_gl.Addr(), gengort.MarshallSyscall(glInterface))
	return gengort.UnmarshallSyscall[*GrDirectContextT](__res)
}

var __imp_gr_direct_context_abandon_context gengort.PreloadProc

func GrDirectContextAbandonContext(context *GrDirectContextT) {
	gengort.CCall1(__imp_gr_direct_context_abandon_context.Addr(), gengort.MarshallSyscall(context))
}

var __imp_gr_direct_context_delete gengort.PreloadProc

func GrDirectContextDelete(context *GrDirectContextT) {
	gengort.CCall1(__imp_gr_direct_context_delete.Addr(), gengort.MarshallSyscall(context))
}

var __imp_gr_direct_context_flush_and_submit gengort.PreloadProc

func GrDirectContextFlushAndSubmit(context *GrDirectContextT, syncCPU bool) {
	gengort.CCall2(__imp_gr_direct_context_flush_and_submit.Addr(), gengort.MarshallSyscall(context), gengort.MarshallSyscall(syncCPU))
}

var __imp_gr_direct_context_release_resources_and_abandon_context gengort.PreloadProc

func GrDirectContextReleaseResourcesAndAbandonContext(context *GrDirectContextT) {
	gengort.CCall1(__imp_gr_direct_context_release_resources_and_abandon_context.Addr(), gengort.MarshallSyscall(context))
}

var __imp_gr_direct_context_reset gengort.PreloadProc

func GrDirectContextReset(context *GrDirectContextT) {
	gengort.CCall1(__imp_gr_direct_context_reset.Addr(), gengort.MarshallSyscall(context))
}

var __imp_gr_direct_context_reset_gl_texture_bindings gengort.PreloadProc

func GrDirectContextResetGlTextureBindings(context *GrDirectContextT) {
	gengort.CCall1(__imp_gr_direct_context_reset_gl_texture_bindings.Addr(), gengort.MarshallSyscall(context))
}

var __imp_gr_direct_context_unref gengort.PreloadProc

func GrDirectContextUnref(context *GrDirectContextT) {
	gengort.CCall1(__imp_gr_direct_context_unref.Addr(), gengort.MarshallSyscall(context))
}

var __imp_gr_glinterface_create_native_interface gengort.PreloadProc

func GrGlinterfaceCreateNativeInterface() *GrGlinterfaceT {
	__res := gengort.CCall0(__imp_gr_glinterface_create_native_interface.Addr())
	return gengort.UnmarshallSyscall[*GrGlinterfaceT](__res)
}

var __imp_gr_glinterface_unref gengort.PreloadProc

func GrGlinterfaceUnref(intf *GrGlinterfaceT) {
	gengort.CCall1(__imp_gr_glinterface_unref.Addr(), gengort.MarshallSyscall(intf))
}

var __imp_sk_canvas_get_surface gengort.PreloadProc

func CanvasGetSurface(canvas *CanvasT) *SurfaceT {
	__res := gengort.CCall1(__imp_sk_canvas_get_surface.Addr(), gengort.MarshallSyscall(canvas))
	return gengort.UnmarshallSyscall[*SurfaceT](__res)
}

var __imp_sk_canvas_clear gengort.PreloadProc

func CanvasClear(canvas *CanvasT, color ColorT) {
	gengort.CCall2(__imp_sk_canvas_clear.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(color))
}

var __imp_sk_canvas_clip_path_with_operation gengort.PreloadProc

func CanvasClipPathWithOperation(t *CanvasT, crect *PathT, op ClipOpT, doAA bool) {
	gengort.CCall4(__imp_sk_canvas_clip_path_with_operation.Addr(), gengort.MarshallSyscall(t), gengort.MarshallSyscall(crect), gengort.MarshallSyscall(op), gengort.MarshallSyscall(doAA))
}

var __imp_sk_canvas_clip_rect_with_operation gengort.PreloadProc

func CanvasClipRectWithOperation(t *CanvasT, crect *RectT, op ClipOpT, doAA bool) {
	gengort.CCall4(__imp_sk_canvas_clip_rect_with_operation.Addr(), gengort.MarshallSyscall(t), gengort.MarshallSyscall(crect), gengort.MarshallSyscall(op), gengort.MarshallSyscall(doAA))
}

var __imp_sk_canvas_concat gengort.PreloadProc

func CanvasConcat(canvas *CanvasT, matrix *MatrixT) {
	gengort.CCall2(__imp_sk_canvas_concat.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(matrix))
}

var __imp_sk_canvas_draw_arc gengort.PreloadProc

func CanvasDrawArc(canvas *CanvasT, oval *RectT, startAngle float32, sweepAngle float32, useCenter bool, paint *PaintT) {
	gengort.CCall6(__imp_sk_canvas_draw_arc.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(oval), gengort.MarshallSyscall(startAngle), gengort.MarshallSyscall(sweepAngle), gengort.MarshallSyscall(useCenter), gengort.MarshallSyscall(paint))
}

var __imp_sk_canvas_draw_circle gengort.PreloadProc

func CanvasDrawCircle(canvas *CanvasT, cx float32, cy float32, rad float32, cpaint *PaintT) {
	gengort.CCall5(__imp_sk_canvas_draw_circle.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(cx), gengort.MarshallSyscall(cy), gengort.MarshallSyscall(rad), gengort.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_color gengort.PreloadProc

func CanvasDrawColor(canvas *CanvasT, color ColorT, mode BlendModeT) {
	gengort.CCall3(__imp_sk_canvas_draw_color.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(color), gengort.MarshallSyscall(mode))
}

var __imp_sk_canvas_draw_image_nine gengort.PreloadProc

func CanvasDrawImageNine(t *CanvasT, image *ImageT, center *IrectT, dst *RectT, filter FilterModeT, paint *PaintT) {
	gengort.CCall6(__imp_sk_canvas_draw_image_nine.Addr(), gengort.MarshallSyscall(t), gengort.MarshallSyscall(image), gengort.MarshallSyscall(center), gengort.MarshallSyscall(dst), gengort.MarshallSyscall(filter), gengort.MarshallSyscall(paint))
}

var __imp_sk_canvas_draw_image_rect gengort.PreloadProc

func CanvasDrawImageRect(canvas *CanvasT, cimage *ImageT, csrcR *RectT, cdstR *RectT, samplingOptions *SamplingOptionsT, cpaint *PaintT, constraint SrcRectConstraintT) {
	gengort.CCall7(__imp_sk_canvas_draw_image_rect.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(cimage), gengort.MarshallSyscall(csrcR), gengort.MarshallSyscall(cdstR), gengort.MarshallSyscall(samplingOptions), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(constraint))
}

var __imp_sk_canvas_draw_line gengort.PreloadProc

func CanvasDrawLine(canvas *CanvasT, x0 float32, y0 float32, x1 float32, y1 float32, cpaint *PaintT) {
	gengort.CCall6(__imp_sk_canvas_draw_line.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(x0), gengort.MarshallSyscall(y0), gengort.MarshallSyscall(x1), gengort.MarshallSyscall(y1), gengort.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_oval gengort.PreloadProc

func CanvasDrawOval(canvas *CanvasT, crect *RectT, cpaint *PaintT) {
	gengort.CCall3(__imp_sk_canvas_draw_oval.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(crect), gengort.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_paint gengort.PreloadProc

func CanvasDrawPaint(canvas *CanvasT, cpaint *PaintT) {
	gengort.CCall2(__imp_sk_canvas_draw_paint.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_path gengort.PreloadProc

func CanvasDrawPath(canvas *CanvasT, cpath *PathT, cpaint *PaintT) {
	gengort.CCall3(__imp_sk_canvas_draw_path.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_point gengort.PreloadProc

func CanvasDrawPoint(canvas *CanvasT, x float32, y float32, cpaint *PaintT) {
	gengort.CCall4(__imp_sk_canvas_draw_point.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(x), gengort.MarshallSyscall(y), gengort.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_points gengort.PreloadProc

func CanvasDrawPoints(canvas *CanvasT, pointMode PointModeT, count uint, points *PointT, cpaint *PaintT) {
	gengort.CCall5(__imp_sk_canvas_draw_points.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(pointMode), gengort.MarshallSyscall(count), gengort.MarshallSyscall(points), gengort.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_rect gengort.PreloadProc

func CanvasDrawRect(canvas *CanvasT, crect *RectT, cpaint *PaintT) {
	gengort.CCall3(__imp_sk_canvas_draw_rect.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(crect), gengort.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_round_rect gengort.PreloadProc

func CanvasDrawRoundRect(canvas *CanvasT, crect *RectT, rx float32, ry float32, cpaint *PaintT) {
	gengort.CCall5(__imp_sk_canvas_draw_round_rect.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(crect), gengort.MarshallSyscall(rx), gengort.MarshallSyscall(ry), gengort.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_simple_text gengort.PreloadProc

func CanvasDrawSimpleText(canvas *CanvasT, text unsafe.Pointer, byte_length uint, encoding TextEncodingT, x float32, y float32, cfont *FontT, cpaint *PaintT) {
	gengort.CCall8(__imp_sk_canvas_draw_simple_text.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(text), gengort.MarshallSyscall(byte_length), gengort.MarshallSyscall(encoding), gengort.MarshallSyscall(x), gengort.MarshallSyscall(y), gengort.MarshallSyscall(cfont), gengort.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_text_blob gengort.PreloadProc

func CanvasDrawTextBlob(canvas *CanvasT, text *TextBlobT, x float32, y float32, paint *PaintT) {
	gengort.CCall5(__imp_sk_canvas_draw_text_blob.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(text), gengort.MarshallSyscall(x), gengort.MarshallSyscall(y), gengort.MarshallSyscall(paint))
}

var __imp_sk_canvas_get_local_clip_bounds gengort.PreloadProc

func CanvasGetLocalClipBounds(canvas *CanvasT, cbounds *RectT) bool {
	__res := gengort.CCall2(__imp_sk_canvas_get_local_clip_bounds.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(cbounds))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_canvas_get_save_count gengort.PreloadProc

func CanvasGetSaveCount(canvas *CanvasT) int32 {
	__res := gengort.CCall1(__imp_sk_canvas_get_save_count.Addr(), gengort.MarshallSyscall(canvas))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_canvas_get_total_matrix gengort.PreloadProc

func CanvasGetTotalMatrix(canvas *CanvasT, matrix *MatrixT) {
	gengort.CCall2(__imp_sk_canvas_get_total_matrix.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(matrix))
}

var __imp_sk_canvas_is_clip_empty gengort.PreloadProc

func CanvasIsClipEmpty(canvas *CanvasT) bool {
	__res := gengort.CCall1(__imp_sk_canvas_is_clip_empty.Addr(), gengort.MarshallSyscall(canvas))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_canvas_is_clip_rect gengort.PreloadProc

func CanvasIsClipRect(canvas *CanvasT) bool {
	__res := gengort.CCall1(__imp_sk_canvas_is_clip_rect.Addr(), gengort.MarshallSyscall(canvas))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_canvas_quick_reject_path gengort.PreloadProc

func CanvasQuickRejectPath(canvas *CanvasT, path *PathT) bool {
	__res := gengort.CCall2(__imp_sk_canvas_quick_reject_path.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(path))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_canvas_quick_reject_rect gengort.PreloadProc

func CanvasQuickRejectRect(canvas *CanvasT, rect *RectT) bool {
	__res := gengort.CCall2(__imp_sk_canvas_quick_reject_rect.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(rect))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_canvas_reset_matrix gengort.PreloadProc

func CanvasResetMatrix(canvas *CanvasT) {
	gengort.CCall1(__imp_sk_canvas_reset_matrix.Addr(), gengort.MarshallSyscall(canvas))
}

var __imp_sk_canvas_restore gengort.PreloadProc

func CanvasRestore(canvas *CanvasT) {
	gengort.CCall1(__imp_sk_canvas_restore.Addr(), gengort.MarshallSyscall(canvas))
}

var __imp_sk_canvas_restore_to_count gengort.PreloadProc

func CanvasRestoreToCount(canvas *CanvasT, saveCount int32) {
	gengort.CCall2(__imp_sk_canvas_restore_to_count.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(saveCount))
}

var __imp_sk_canvas_rotate_radians gengort.PreloadProc

func CanvasRotateRadians(canvas *CanvasT, radians float32) {
	gengort.CCall2(__imp_sk_canvas_rotate_radians.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(radians))
}

var __imp_sk_canvas_save gengort.PreloadProc

func CanvasSave(canvas *CanvasT) int32 {
	__res := gengort.CCall1(__imp_sk_canvas_save.Addr(), gengort.MarshallSyscall(canvas))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_canvas_save_layer gengort.PreloadProc

func CanvasSaveLayer(canvas *CanvasT, crect *RectT, cpaint *PaintT) int32 {
	__res := gengort.CCall3(__imp_sk_canvas_save_layer.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(crect), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_canvas_save_layer_alpha gengort.PreloadProc

func CanvasSaveLayerAlpha(canvas *CanvasT, crect *RectT, alpha uint8) int32 {
	__res := gengort.CCall3(__imp_sk_canvas_save_layer_alpha.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(crect), gengort.MarshallSyscall(alpha))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_canvas_scale gengort.PreloadProc

func CanvasScale(canvas *CanvasT, sx float32, sy float32) {
	gengort.CCall3(__imp_sk_canvas_scale.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(sx), gengort.MarshallSyscall(sy))
}

var __imp_sk_canvas_set_matrix gengort.PreloadProc

func CanvasSetMatrix(canvas *CanvasT, matrix *MatrixT) {
	gengort.CCall2(__imp_sk_canvas_set_matrix.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(matrix))
}

var __imp_sk_canvas_skew gengort.PreloadProc

func CanvasSkew(canvas *CanvasT, sx float32, sy float32) {
	gengort.CCall3(__imp_sk_canvas_skew.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(sx), gengort.MarshallSyscall(sy))
}

var __imp_sk_canvas_translate gengort.PreloadProc

func CanvasTranslate(canvas *CanvasT, dx float32, dy float32) {
	gengort.CCall3(__imp_sk_canvas_translate.Addr(), gengort.MarshallSyscall(canvas), gengort.MarshallSyscall(dx), gengort.MarshallSyscall(dy))
}

var __imp_sk_colorfilter_new_color_matrix gengort.PreloadProc

func ColorfilterNewColorMatrix(array *float32) *ColorFilterT {
	__res := gengort.CCall1(__imp_sk_colorfilter_new_color_matrix.Addr(), gengort.MarshallSyscall(array))
	return gengort.UnmarshallSyscall[*ColorFilterT](__res)
}

var __imp_sk_colorfilter_new_compose gengort.PreloadProc

func ColorfilterNewCompose(outer *ColorFilterT, inner *ColorFilterT) *ColorFilterT {
	__res := gengort.CCall2(__imp_sk_colorfilter_new_compose.Addr(), gengort.MarshallSyscall(outer), gengort.MarshallSyscall(inner))
	return gengort.UnmarshallSyscall[*ColorFilterT](__res)
}

var __imp_sk_colorfilter_new_high_contrast gengort.PreloadProc

func ColorfilterNewHighContrast(config *HighContrastConfigT) *ColorFilterT {
	__res := gengort.CCall1(__imp_sk_colorfilter_new_high_contrast.Addr(), gengort.MarshallSyscall(config))
	return gengort.UnmarshallSyscall[*ColorFilterT](__res)
}

var __imp_sk_colorfilter_new_lighting gengort.PreloadProc

func ColorfilterNewLighting(mul ColorT, add ColorT) *ColorFilterT {
	__res := gengort.CCall2(__imp_sk_colorfilter_new_lighting.Addr(), gengort.MarshallSyscall(mul), gengort.MarshallSyscall(add))
	return gengort.UnmarshallSyscall[*ColorFilterT](__res)
}

var __imp_sk_colorfilter_new_luma_color gengort.PreloadProc

func ColorfilterNewLumaColor() *ColorFilterT {
	__res := gengort.CCall0(__imp_sk_colorfilter_new_luma_color.Addr())
	return gengort.UnmarshallSyscall[*ColorFilterT](__res)
}

var __imp_sk_colorfilter_new_mode gengort.PreloadProc

func ColorfilterNewMode(c ColorT, mode BlendModeT) *ColorFilterT {
	__res := gengort.CCall2(__imp_sk_colorfilter_new_mode.Addr(), gengort.MarshallSyscall(c), gengort.MarshallSyscall(mode))
	return gengort.UnmarshallSyscall[*ColorFilterT](__res)
}

var __imp_sk_colorfilter_unref gengort.PreloadProc

func ColorfilterUnref(filter *ColorFilterT) {
	gengort.CCall1(__imp_sk_colorfilter_unref.Addr(), gengort.MarshallSyscall(filter))
}

var __imp_sk_colorspace_new_srgb gengort.PreloadProc

func ColorspaceNewSrgb() *ColorSpaceT {
	__res := gengort.CCall0(__imp_sk_colorspace_new_srgb.Addr())
	return gengort.UnmarshallSyscall[*ColorSpaceT](__res)
}

var __imp_sk_data_get_data gengort.PreloadProc

func DataGetData(data *DataT) unsafe.Pointer {
	__res := gengort.CCall1(__imp_sk_data_get_data.Addr(), gengort.MarshallSyscall(data))
	return gengort.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_data_get_size gengort.PreloadProc

func DataGetSize(data *DataT) uint {
	__res := gengort.CCall1(__imp_sk_data_get_size.Addr(), gengort.MarshallSyscall(data))
	return gengort.UnmarshallSyscall[uint](__res)
}

var __imp_sk_data_new_with_copy gengort.PreloadProc

func DataNewWithCopy(src unsafe.Pointer, length uint) *DataT {
	__res := gengort.CCall2(__imp_sk_data_new_with_copy.Addr(), gengort.MarshallSyscall(src), gengort.MarshallSyscall(length))
	return gengort.UnmarshallSyscall[*DataT](__res)
}

var __imp_sk_data_unref gengort.PreloadProc

func DataUnref(data *DataT) {
	gengort.CCall1(__imp_sk_data_unref.Addr(), gengort.MarshallSyscall(data))
}

var __imp_sk_encode_jpeg gengort.PreloadProc

func EncodeJpeg(ctx *GrDirectContextT, img *ImageT, quality int32) *DataT {
	__res := gengort.CCall3(__imp_sk_encode_jpeg.Addr(), gengort.MarshallSyscall(ctx), gengort.MarshallSyscall(img), gengort.MarshallSyscall(quality))
	return gengort.UnmarshallSyscall[*DataT](__res)
}

var __imp_sk_encode_png gengort.PreloadProc

func EncodePng(ctx *GrDirectContextT, img *ImageT, compressionLevel int32) *DataT {
	__res := gengort.CCall3(__imp_sk_encode_png.Addr(), gengort.MarshallSyscall(ctx), gengort.MarshallSyscall(img), gengort.MarshallSyscall(compressionLevel))
	return gengort.UnmarshallSyscall[*DataT](__res)
}

var __imp_sk_encode_webp gengort.PreloadProc

func EncodeWebp(ctx *GrDirectContextT, img *ImageT, quality float32, lossy bool) *DataT {
	__res := gengort.CCall4(__imp_sk_encode_webp.Addr(), gengort.MarshallSyscall(ctx), gengort.MarshallSyscall(img), gengort.MarshallSyscall(quality), gengort.MarshallSyscall(lossy))
	return gengort.UnmarshallSyscall[*DataT](__res)
}

var __imp_sk_font_delete gengort.PreloadProc

func FontDelete(font *FontT) {
	gengort.CCall1(__imp_sk_font_delete.Addr(), gengort.MarshallSyscall(font))
}

var __imp_sk_font_get_metrics gengort.PreloadProc

func FontGetMetrics(font *FontT, metrics *FontMetricsT) float32 {
	__res := gengort.CCall2(__imp_sk_font_get_metrics.Addr(), gengort.MarshallSyscall(font), gengort.MarshallSyscall(metrics))
	return gengort.UnmarshallSyscall[float32](__res)
}

var __imp_sk_font_get_xpos gengort.PreloadProc

func FontGetXpos(font *FontT, glyphs *uint16, count int32, xpos *float32, origin float32) {
	gengort.CCall5(__imp_sk_font_get_xpos.Addr(), gengort.MarshallSyscall(font), gengort.MarshallSyscall(glyphs), gengort.MarshallSyscall(count), gengort.MarshallSyscall(xpos), gengort.MarshallSyscall(origin))
}

var __imp_sk_font_measure_text gengort.PreloadProc

func FontMeasureText(font *FontT, text unsafe.Pointer, byteLength uint, encoding TextEncodingT, bounds *RectT, paint *PaintT) float32 {
	__res := gengort.CCall6(__imp_sk_font_measure_text.Addr(), gengort.MarshallSyscall(font), gengort.MarshallSyscall(text), gengort.MarshallSyscall(byteLength), gengort.MarshallSyscall(encoding), gengort.MarshallSyscall(bounds), gengort.MarshallSyscall(paint))
	return gengort.UnmarshallSyscall[float32](__res)
}

var __imp_sk_font_new_with_values gengort.PreloadProc

func FontNewWithValues(typeface *TypefaceT, size float32, scaleX float32, skewX float32) *FontT {
	__res := gengort.CCall4(__imp_sk_font_new_with_values.Addr(), gengort.MarshallSyscall(typeface), gengort.MarshallSyscall(size), gengort.MarshallSyscall(scaleX), gengort.MarshallSyscall(skewX))
	return gengort.UnmarshallSyscall[*FontT](__res)
}

var __imp_sk_font_set_force_auto_hinting gengort.PreloadProc

func FontSetForceAutoHinting(font *FontT, value bool) {
	gengort.CCall2(__imp_sk_font_set_force_auto_hinting.Addr(), gengort.MarshallSyscall(font), gengort.MarshallSyscall(value))
}

var __imp_sk_font_set_hinting gengort.PreloadProc

func FontSetHinting(font *FontT, value FontHintingT) {
	gengort.CCall2(__imp_sk_font_set_hinting.Addr(), gengort.MarshallSyscall(font), gengort.MarshallSyscall(value))
}

var __imp_sk_font_set_subpixel gengort.PreloadProc

func FontSetSubpixel(font *FontT, value bool) {
	gengort.CCall2(__imp_sk_font_set_subpixel.Addr(), gengort.MarshallSyscall(font), gengort.MarshallSyscall(value))
}

var __imp_sk_font_text_to_glyphs gengort.PreloadProc

func FontTextToGlyphs(font *FontT, text unsafe.Pointer, byteLength uint, encoding TextEncodingT, glyphs *uint16, maxGlyphCount int32) int32 {
	__res := gengort.CCall6(__imp_sk_font_text_to_glyphs.Addr(), gengort.MarshallSyscall(font), gengort.MarshallSyscall(text), gengort.MarshallSyscall(byteLength), gengort.MarshallSyscall(encoding), gengort.MarshallSyscall(glyphs), gengort.MarshallSyscall(maxGlyphCount))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_font_unichar_to_glyph gengort.PreloadProc

func FontUnicharToGlyph(font *FontT, unichar int32) uint16 {
	__res := gengort.CCall2(__imp_sk_font_unichar_to_glyph.Addr(), gengort.MarshallSyscall(font), gengort.MarshallSyscall(unichar))
	return gengort.UnmarshallSyscall[uint16](__res)
}

var __imp_sk_font_unichars_to_glyphs gengort.PreloadProc

func FontUnicharsToGlyphs(font *FontT, unichars *int32, count int32, glyphs *uint16) {
	gengort.CCall4(__imp_sk_font_unichars_to_glyphs.Addr(), gengort.MarshallSyscall(font), gengort.MarshallSyscall(unichars), gengort.MarshallSyscall(count), gengort.MarshallSyscall(glyphs))
}

var __imp_sk_font_glyph_widths gengort.PreloadProc

func FontGlyphWidths(font *FontT, glyphs *uint16, count int32, widths *float32) {
	gengort.CCall4(__imp_sk_font_glyph_widths.Addr(), gengort.MarshallSyscall(font), gengort.MarshallSyscall(glyphs), gengort.MarshallSyscall(count), gengort.MarshallSyscall(widths))
}

var __imp_sk_fontmgr_count_families gengort.PreloadProc

func FontmgrCountFamilies(fontmgr *FontMgrT) int32 {
	__res := gengort.CCall1(__imp_sk_fontmgr_count_families.Addr(), gengort.MarshallSyscall(fontmgr))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_fontmgr_create_from_data gengort.PreloadProc

func FontmgrCreateFromData(fontmgr *FontMgrT, data *DataT, index int32) *TypefaceT {
	__res := gengort.CCall3(__imp_sk_fontmgr_create_from_data.Addr(), gengort.MarshallSyscall(fontmgr), gengort.MarshallSyscall(data), gengort.MarshallSyscall(index))
	return gengort.UnmarshallSyscall[*TypefaceT](__res)
}

var __imp_sk_fontmgr_get_family_name gengort.PreloadProc

func FontmgrGetFamilyName(fontmgr *FontMgrT, index int32, familyName *StringT) {
	gengort.CCall3(__imp_sk_fontmgr_get_family_name.Addr(), gengort.MarshallSyscall(fontmgr), gengort.MarshallSyscall(index), gengort.MarshallSyscall(familyName))
}

var __imp_sk_fontmgr_match_family gengort.PreloadProc

func FontmgrMatchFamily(fontmgr *FontMgrT, familyName *byte) *FontStyleSetT {
	__res := gengort.CCall2(__imp_sk_fontmgr_match_family.Addr(), gengort.MarshallSyscall(fontmgr), gengort.MarshallSyscall(familyName))
	return gengort.UnmarshallSyscall[*FontStyleSetT](__res)
}

var __imp_sk_fontmgr_match_family_style gengort.PreloadProc

func FontmgrMatchFamilyStyle(fontmgr *FontMgrT, familyName *byte, style *FontStyleT) *TypefaceT {
	__res := gengort.CCall3(__imp_sk_fontmgr_match_family_style.Addr(), gengort.MarshallSyscall(fontmgr), gengort.MarshallSyscall(familyName), gengort.MarshallSyscall(style))
	return gengort.UnmarshallSyscall[*TypefaceT](__res)
}

var __imp_sk_fontmgr_match_family_style_character gengort.PreloadProc

func FontmgrMatchFamilyStyleCharacter(fontmgr *FontMgrT, familyName *byte, style *FontStyleT, bcp47 **byte, bcp47Count int32, character int32) *TypefaceT {
	__res := gengort.CCall6(__imp_sk_fontmgr_match_family_style_character.Addr(), gengort.MarshallSyscall(fontmgr), gengort.MarshallSyscall(familyName), gengort.MarshallSyscall(style), gengort.MarshallSyscall(bcp47), gengort.MarshallSyscall(bcp47Count), gengort.MarshallSyscall(character))
	return gengort.UnmarshallSyscall[*TypefaceT](__res)
}

var __imp_sk_fontmgr_ref_default gengort.PreloadProc

func FontmgrRefDefault() *FontMgrT {
	__res := gengort.CCall0(__imp_sk_fontmgr_ref_default.Addr())
	return gengort.UnmarshallSyscall[*FontMgrT](__res)
}

var __imp_sk_fontstyleset_create_typeface gengort.PreloadProc

func FontstylesetCreateTypeface(fss *FontStyleSetT, index int32) *TypefaceT {
	__res := gengort.CCall2(__imp_sk_fontstyleset_create_typeface.Addr(), gengort.MarshallSyscall(fss), gengort.MarshallSyscall(index))
	return gengort.UnmarshallSyscall[*TypefaceT](__res)
}

var __imp_sk_fontstyleset_get_count gengort.PreloadProc

func FontstylesetGetCount(fss *FontStyleSetT) int32 {
	__res := gengort.CCall1(__imp_sk_fontstyleset_get_count.Addr(), gengort.MarshallSyscall(fss))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_fontstyleset_get_style gengort.PreloadProc

func FontstylesetGetStyle(fss *FontStyleSetT, index int32, fs *FontStyleT, style *StringT) {
	gengort.CCall4(__imp_sk_fontstyleset_get_style.Addr(), gengort.MarshallSyscall(fss), gengort.MarshallSyscall(index), gengort.MarshallSyscall(fs), gengort.MarshallSyscall(style))
}

var __imp_sk_fontstyleset_match_style gengort.PreloadProc

func FontstylesetMatchStyle(fss *FontStyleSetT, style *FontStyleT) *TypefaceT {
	__res := gengort.CCall2(__imp_sk_fontstyleset_match_style.Addr(), gengort.MarshallSyscall(fss), gengort.MarshallSyscall(style))
	return gengort.UnmarshallSyscall[*TypefaceT](__res)
}

var __imp_sk_fontstyleset_unref gengort.PreloadProc

func FontstylesetUnref(fss *FontStyleSetT) {
	gengort.CCall1(__imp_sk_fontstyleset_unref.Addr(), gengort.MarshallSyscall(fss))
}

var __imp_sk_fontstyle_delete gengort.PreloadProc

func FontstyleDelete(fs *FontStyleT) {
	gengort.CCall1(__imp_sk_fontstyle_delete.Addr(), gengort.MarshallSyscall(fs))
}

var __imp_sk_fontstyle_get_slant gengort.PreloadProc

func FontstyleGetSlant(fs *FontStyleT) FontStyleSlantT {
	__res := gengort.CCall1(__imp_sk_fontstyle_get_slant.Addr(), gengort.MarshallSyscall(fs))
	return gengort.UnmarshallSyscall[FontStyleSlantT](__res)
}

var __imp_sk_fontstyle_get_weight gengort.PreloadProc

func FontstyleGetWeight(fs *FontStyleT) int32 {
	__res := gengort.CCall1(__imp_sk_fontstyle_get_weight.Addr(), gengort.MarshallSyscall(fs))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_fontstyle_get_width gengort.PreloadProc

func FontstyleGetWidth(fs *FontStyleT) int32 {
	__res := gengort.CCall1(__imp_sk_fontstyle_get_width.Addr(), gengort.MarshallSyscall(fs))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_fontstyle_new gengort.PreloadProc

func FontstyleNew(weight int32, width int32, slant FontStyleSlantT) *FontStyleT {
	__res := gengort.CCall3(__imp_sk_fontstyle_new.Addr(), gengort.MarshallSyscall(weight), gengort.MarshallSyscall(width), gengort.MarshallSyscall(slant))
	return gengort.UnmarshallSyscall[*FontStyleT](__res)
}

var __imp_sk_image_get_alpha_type gengort.PreloadProc

func ImageGetAlphaType(image *ImageT) AlphaTypeT {
	__res := gengort.CCall1(__imp_sk_image_get_alpha_type.Addr(), gengort.MarshallSyscall(image))
	return gengort.UnmarshallSyscall[AlphaTypeT](__res)
}

var __imp_sk_image_get_color_type gengort.PreloadProc

func ImageGetColorType(image *ImageT) ColorTypeT {
	__res := gengort.CCall1(__imp_sk_image_get_color_type.Addr(), gengort.MarshallSyscall(image))
	return gengort.UnmarshallSyscall[ColorTypeT](__res)
}

var __imp_sk_image_get_colorspace gengort.PreloadProc

func ImageGetColorspace(image *ImageT) *ColorSpaceT {
	__res := gengort.CCall1(__imp_sk_image_get_colorspace.Addr(), gengort.MarshallSyscall(image))
	return gengort.UnmarshallSyscall[*ColorSpaceT](__res)
}

var __imp_sk_image_get_height gengort.PreloadProc

func ImageGetHeight(image *ImageT) int32 {
	__res := gengort.CCall1(__imp_sk_image_get_height.Addr(), gengort.MarshallSyscall(image))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_image_get_width gengort.PreloadProc

func ImageGetWidth(image *ImageT) int32 {
	__res := gengort.CCall1(__imp_sk_image_get_width.Addr(), gengort.MarshallSyscall(image))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_image_make_non_texture_image gengort.PreloadProc

func ImageMakeNonTextureImage(image *ImageT) *ImageT {
	__res := gengort.CCall1(__imp_sk_image_make_non_texture_image.Addr(), gengort.MarshallSyscall(image))
	return gengort.UnmarshallSyscall[*ImageT](__res)
}

var __imp_sk_image_make_shader gengort.PreloadProc

func ImageMakeShader(image *ImageT, tileX TileModeT, tileY TileModeT, samplingOptions *SamplingOptionsT, cmatrix *MatrixT) *ShaderT {
	__res := gengort.CCall5(__imp_sk_image_make_shader.Addr(), gengort.MarshallSyscall(image), gengort.MarshallSyscall(tileX), gengort.MarshallSyscall(tileY), gengort.MarshallSyscall(samplingOptions), gengort.MarshallSyscall(cmatrix))
	return gengort.UnmarshallSyscall[*ShaderT](__res)
}

var __imp_sk_image_new_from_encoded gengort.PreloadProc

func ImageNewFromEncoded(encoded *DataT) *ImageT {
	__res := gengort.CCall1(__imp_sk_image_new_from_encoded.Addr(), gengort.MarshallSyscall(encoded))
	return gengort.UnmarshallSyscall[*ImageT](__res)
}

var __imp_sk_image_new_raster_data gengort.PreloadProc

func ImageNewRasterData(cinfo *ImageInfoT, pixels *DataT, rowBytes uint) *ImageT {
	__res := gengort.CCall3(__imp_sk_image_new_raster_data.Addr(), gengort.MarshallSyscall(cinfo), gengort.MarshallSyscall(pixels), gengort.MarshallSyscall(rowBytes))
	return gengort.UnmarshallSyscall[*ImageT](__res)
}

var __imp_sk_image_read_pixels gengort.PreloadProc

func ImageReadPixels(image *ImageT, dstInfo *ImageInfoT, dstPixels unsafe.Pointer, dstRowBytes uint, srcX int32, srcY int32, cachingHint ImageCachingHintT) bool {
	__res := gengort.CCall7(__imp_sk_image_read_pixels.Addr(), gengort.MarshallSyscall(image), gengort.MarshallSyscall(dstInfo), gengort.MarshallSyscall(dstPixels), gengort.MarshallSyscall(dstRowBytes), gengort.MarshallSyscall(srcX), gengort.MarshallSyscall(srcY), gengort.MarshallSyscall(cachingHint))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_image_unref gengort.PreloadProc

func ImageUnref(image *ImageT) {
	gengort.CCall1(__imp_sk_image_unref.Addr(), gengort.MarshallSyscall(image))
}

var __imp_sk_image_texture_from_image gengort.PreloadProc

func ImageTextureFromImage(ctx *GrDirectContextT, image *ImageT, mipmapped bool, budgeted bool) *ImageT {
	__res := gengort.CCall4(__imp_sk_image_texture_from_image.Addr(), gengort.MarshallSyscall(ctx), gengort.MarshallSyscall(image), gengort.MarshallSyscall(mipmapped), gengort.MarshallSyscall(budgeted))
	return gengort.UnmarshallSyscall[*ImageT](__res)
}

var __imp_sk_imagefilter_new_arithmetic gengort.PreloadProc

func ImagefilterNewArithmetic(k1 float32, k2 float32, k3 float32, k4 float32, enforcePMColor bool, background *ImageFilterT, foreground *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall8(__imp_sk_imagefilter_new_arithmetic.Addr(), gengort.MarshallSyscall(k1), gengort.MarshallSyscall(k2), gengort.MarshallSyscall(k3), gengort.MarshallSyscall(k4), gengort.MarshallSyscall(enforcePMColor), gengort.MarshallSyscall(background), gengort.MarshallSyscall(foreground), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_blur gengort.PreloadProc

func ImagefilterNewBlur(sigmaX float32, sigmaY float32, tileMode TileModeT, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall5(__imp_sk_imagefilter_new_blur.Addr(), gengort.MarshallSyscall(sigmaX), gengort.MarshallSyscall(sigmaY), gengort.MarshallSyscall(tileMode), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_color_filter gengort.PreloadProc

func ImagefilterNewColorFilter(cf *ColorFilterT, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall3(__imp_sk_imagefilter_new_color_filter.Addr(), gengort.MarshallSyscall(cf), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_compose gengort.PreloadProc

func ImagefilterNewCompose(outer *ImageFilterT, inner *ImageFilterT) *ImageFilterT {
	__res := gengort.CCall2(__imp_sk_imagefilter_new_compose.Addr(), gengort.MarshallSyscall(outer), gengort.MarshallSyscall(inner))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_dilate gengort.PreloadProc

func ImagefilterNewDilate(radiusX int32, radiusY int32, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall4(__imp_sk_imagefilter_new_dilate.Addr(), gengort.MarshallSyscall(radiusX), gengort.MarshallSyscall(radiusY), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_displacement_map_effect gengort.PreloadProc

func ImagefilterNewDisplacementMapEffect(xChannelSelector ColorChannelT, yChannelSelector ColorChannelT, scale float32, displacement *ImageFilterT, color *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall6(__imp_sk_imagefilter_new_displacement_map_effect.Addr(), gengort.MarshallSyscall(xChannelSelector), gengort.MarshallSyscall(yChannelSelector), gengort.MarshallSyscall(scale), gengort.MarshallSyscall(displacement), gengort.MarshallSyscall(color), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_distant_lit_diffuse gengort.PreloadProc

func ImagefilterNewDistantLitDiffuse(direction *Point3T, lightColor ColorT, surfaceScale float32, kd float32, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall6(__imp_sk_imagefilter_new_distant_lit_diffuse.Addr(), gengort.MarshallSyscall(direction), gengort.MarshallSyscall(lightColor), gengort.MarshallSyscall(surfaceScale), gengort.MarshallSyscall(kd), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_distant_lit_specular gengort.PreloadProc

func ImagefilterNewDistantLitSpecular(direction *Point3T, lightColor ColorT, surfaceScale float32, ks float32, shininess float32, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall7(__imp_sk_imagefilter_new_distant_lit_specular.Addr(), gengort.MarshallSyscall(direction), gengort.MarshallSyscall(lightColor), gengort.MarshallSyscall(surfaceScale), gengort.MarshallSyscall(ks), gengort.MarshallSyscall(shininess), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_drop_shadow gengort.PreloadProc

func ImagefilterNewDropShadow(dx float32, dy float32, sigmaX float32, sigmaY float32, color ColorT, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall7(__imp_sk_imagefilter_new_drop_shadow.Addr(), gengort.MarshallSyscall(dx), gengort.MarshallSyscall(dy), gengort.MarshallSyscall(sigmaX), gengort.MarshallSyscall(sigmaY), gengort.MarshallSyscall(color), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_drop_shadow_only gengort.PreloadProc

func ImagefilterNewDropShadowOnly(dx float32, dy float32, sigmaX float32, sigmaY float32, color ColorT, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall7(__imp_sk_imagefilter_new_drop_shadow_only.Addr(), gengort.MarshallSyscall(dx), gengort.MarshallSyscall(dy), gengort.MarshallSyscall(sigmaX), gengort.MarshallSyscall(sigmaY), gengort.MarshallSyscall(color), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_erode gengort.PreloadProc

func ImagefilterNewErode(radiusX int32, radiusY int32, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall4(__imp_sk_imagefilter_new_erode.Addr(), gengort.MarshallSyscall(radiusX), gengort.MarshallSyscall(radiusY), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_image_source gengort.PreloadProc

func ImagefilterNewImageSource(image *ImageT, srcRect *RectT, dstRect *RectT, samplingOptions *SamplingOptionsT) *ImageFilterT {
	__res := gengort.CCall4(__imp_sk_imagefilter_new_image_source.Addr(), gengort.MarshallSyscall(image), gengort.MarshallSyscall(srcRect), gengort.MarshallSyscall(dstRect), gengort.MarshallSyscall(samplingOptions))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_image_source_default gengort.PreloadProc

func ImagefilterNewImageSourceDefault(image *ImageT, samplingOptions *SamplingOptionsT) *ImageFilterT {
	__res := gengort.CCall2(__imp_sk_imagefilter_new_image_source_default.Addr(), gengort.MarshallSyscall(image), gengort.MarshallSyscall(samplingOptions))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_magnifier gengort.PreloadProc

func ImagefilterNewMagnifier(lensBounds *RectT, zoomAmount float32, inset float32, samplingOptions *SamplingOptionsT, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall6(__imp_sk_imagefilter_new_magnifier.Addr(), gengort.MarshallSyscall(lensBounds), gengort.MarshallSyscall(zoomAmount), gengort.MarshallSyscall(inset), gengort.MarshallSyscall(samplingOptions), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_matrix_convolution gengort.PreloadProc

func ImagefilterNewMatrixConvolution(kernelSize *IsizeT, kernel *float32, gain float32, bias float32, kernelOffset *IpointT, tileMode TileModeT, convolveAlpha bool, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall9(__imp_sk_imagefilter_new_matrix_convolution.Addr(), gengort.MarshallSyscall(kernelSize), gengort.MarshallSyscall(kernel), gengort.MarshallSyscall(gain), gengort.MarshallSyscall(bias), gengort.MarshallSyscall(kernelOffset), gengort.MarshallSyscall(tileMode), gengort.MarshallSyscall(convolveAlpha), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_matrix_transform gengort.PreloadProc

func ImagefilterNewMatrixTransform(matrix *MatrixT, samplingOptions *SamplingOptionsT, input *ImageFilterT) *ImageFilterT {
	__res := gengort.CCall3(__imp_sk_imagefilter_new_matrix_transform.Addr(), gengort.MarshallSyscall(matrix), gengort.MarshallSyscall(samplingOptions), gengort.MarshallSyscall(input))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_merge gengort.PreloadProc

func ImagefilterNewMerge(filters **ImageFilterT, count int32, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall3(__imp_sk_imagefilter_new_merge.Addr(), gengort.MarshallSyscall(filters), gengort.MarshallSyscall(count), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_offset gengort.PreloadProc

func ImagefilterNewOffset(dx float32, dy float32, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall4(__imp_sk_imagefilter_new_offset.Addr(), gengort.MarshallSyscall(dx), gengort.MarshallSyscall(dy), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_point_lit_diffuse gengort.PreloadProc

func ImagefilterNewPointLitDiffuse(location *Point3T, lightColor ColorT, surfaceScale float32, kd float32, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall6(__imp_sk_imagefilter_new_point_lit_diffuse.Addr(), gengort.MarshallSyscall(location), gengort.MarshallSyscall(lightColor), gengort.MarshallSyscall(surfaceScale), gengort.MarshallSyscall(kd), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_point_lit_specular gengort.PreloadProc

func ImagefilterNewPointLitSpecular(location *Point3T, lightColor ColorT, surfaceScale float32, ks float32, shininess float32, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall7(__imp_sk_imagefilter_new_point_lit_specular.Addr(), gengort.MarshallSyscall(location), gengort.MarshallSyscall(lightColor), gengort.MarshallSyscall(surfaceScale), gengort.MarshallSyscall(ks), gengort.MarshallSyscall(shininess), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_spot_lit_diffuse gengort.PreloadProc

func ImagefilterNewSpotLitDiffuse(location *Point3T, target *Point3T, specularExponent float32, cutoffAngle float32, lightColor ColorT, surfaceScale float32, kd float32, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall9(__imp_sk_imagefilter_new_spot_lit_diffuse.Addr(), gengort.MarshallSyscall(location), gengort.MarshallSyscall(target), gengort.MarshallSyscall(specularExponent), gengort.MarshallSyscall(cutoffAngle), gengort.MarshallSyscall(lightColor), gengort.MarshallSyscall(surfaceScale), gengort.MarshallSyscall(kd), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_spot_lit_specular gengort.PreloadProc

func ImagefilterNewSpotLitSpecular(location *Point3T, target *Point3T, specularExponent float32, cutoffAngle float32, lightColor ColorT, surfaceScale float32, ks float32, shininess float32, input *ImageFilterT, cropRect *RectT) *ImageFilterT {
	__res := gengort.CCall10(__imp_sk_imagefilter_new_spot_lit_specular.Addr(), gengort.MarshallSyscall(location), gengort.MarshallSyscall(target), gengort.MarshallSyscall(specularExponent), gengort.MarshallSyscall(cutoffAngle), gengort.MarshallSyscall(lightColor), gengort.MarshallSyscall(surfaceScale), gengort.MarshallSyscall(ks), gengort.MarshallSyscall(shininess), gengort.MarshallSyscall(input), gengort.MarshallSyscall(cropRect))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_new_tile gengort.PreloadProc

func ImagefilterNewTile(src *RectT, dst *RectT, input *ImageFilterT) *ImageFilterT {
	__res := gengort.CCall3(__imp_sk_imagefilter_new_tile.Addr(), gengort.MarshallSyscall(src), gengort.MarshallSyscall(dst), gengort.MarshallSyscall(input))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_imagefilter_unref gengort.PreloadProc

func ImagefilterUnref(filter *ImageFilterT) {
	gengort.CCall1(__imp_sk_imagefilter_unref.Addr(), gengort.MarshallSyscall(filter))
}

var __imp_sk_maskfilter_new_blur_with_flags gengort.PreloadProc

func MaskfilterNewBlurWithFlags( BlurStyleT, sigma float32, respectCTM bool) *MaskFilterT {
	__res := gengort.CCall3(__imp_sk_maskfilter_new_blur_with_flags.Addr(), gengort.MarshallSyscall(), gengort.MarshallSyscall(sigma), gengort.MarshallSyscall(respectCTM))
	return gengort.UnmarshallSyscall[*MaskFilterT](__res)
}

var __imp_sk_maskfilter_new_clip gengort.PreloadProc

func MaskfilterNewClip(min uint8, max uint8) *MaskFilterT {
	__res := gengort.CCall2(__imp_sk_maskfilter_new_clip.Addr(), gengort.MarshallSyscall(min), gengort.MarshallSyscall(max))
	return gengort.UnmarshallSyscall[*MaskFilterT](__res)
}

var __imp_sk_maskfilter_new_gamma gengort.PreloadProc

func MaskfilterNewGamma(gamma float32) *MaskFilterT {
	__res := gengort.CCall1(__imp_sk_maskfilter_new_gamma.Addr(), gengort.MarshallSyscall(gamma))
	return gengort.UnmarshallSyscall[*MaskFilterT](__res)
}

var __imp_sk_maskfilter_new_shader gengort.PreloadProc

func MaskfilterNewShader(cshader *ShaderT) *MaskFilterT {
	__res := gengort.CCall1(__imp_sk_maskfilter_new_shader.Addr(), gengort.MarshallSyscall(cshader))
	return gengort.UnmarshallSyscall[*MaskFilterT](__res)
}

var __imp_sk_maskfilter_new_table gengort.PreloadProc

func MaskfilterNewTable(table *uint8) *MaskFilterT {
	__res := gengort.CCall1(__imp_sk_maskfilter_new_table.Addr(), gengort.MarshallSyscall(table))
	return gengort.UnmarshallSyscall[*MaskFilterT](__res)
}

var __imp_sk_maskfilter_unref gengort.PreloadProc

func MaskfilterUnref(filter *MaskFilterT) {
	gengort.CCall1(__imp_sk_maskfilter_unref.Addr(), gengort.MarshallSyscall(filter))
}

var __imp_sk_paint_equivalent gengort.PreloadProc

func PaintEquivalent(cpaint *PaintT, other *PaintT) bool {
	__res := gengort.CCall2(__imp_sk_paint_equivalent.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(other))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_paint_clone gengort.PreloadProc

func PaintClone(cpaint *PaintT) *PaintT {
	__res := gengort.CCall1(__imp_sk_paint_clone.Addr(), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[*PaintT](__res)
}

var __imp_sk_paint_delete gengort.PreloadProc

func PaintDelete(cpaint *PaintT) {
	gengort.CCall1(__imp_sk_paint_delete.Addr(), gengort.MarshallSyscall(cpaint))
}

var __imp_sk_paint_get_blend_mode_or gengort.PreloadProc

func PaintGetBlendModeOr(cpaint *PaintT, defaultMode BlendModeT) BlendModeT {
	__res := gengort.CCall2(__imp_sk_paint_get_blend_mode_or.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(defaultMode))
	return gengort.UnmarshallSyscall[BlendModeT](__res)
}

var __imp_sk_paint_get_color gengort.PreloadProc

func PaintGetColor(cpaint *PaintT) ColorT {
	__res := gengort.CCall1(__imp_sk_paint_get_color.Addr(), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[ColorT](__res)
}

var __imp_sk_paint_get_colorfilter gengort.PreloadProc

func PaintGetColorfilter(cpaint *PaintT) *ColorFilterT {
	__res := gengort.CCall1(__imp_sk_paint_get_colorfilter.Addr(), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[*ColorFilterT](__res)
}

var __imp_sk_paint_get_fill_path gengort.PreloadProc

func PaintGetFillPath(cpaint *PaintT, src *PathT, dst *PathT, cullRect *RectT, resScale float32) bool {
	__res := gengort.CCall5(__imp_sk_paint_get_fill_path.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(src), gengort.MarshallSyscall(dst), gengort.MarshallSyscall(cullRect), gengort.MarshallSyscall(resScale))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_paint_get_imagefilter gengort.PreloadProc

func PaintGetImagefilter(cpaint *PaintT) *ImageFilterT {
	__res := gengort.CCall1(__imp_sk_paint_get_imagefilter.Addr(), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[*ImageFilterT](__res)
}

var __imp_sk_paint_get_maskfilter gengort.PreloadProc

func PaintGetMaskfilter(cpaint *PaintT) *MaskFilterT {
	__res := gengort.CCall1(__imp_sk_paint_get_maskfilter.Addr(), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[*MaskFilterT](__res)
}

var __imp_sk_paint_get_path_effect gengort.PreloadProc

func PaintGetPathEffect(cpaint *PaintT) *PathEffectT {
	__res := gengort.CCall1(__imp_sk_paint_get_path_effect.Addr(), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[*PathEffectT](__res)
}

var __imp_sk_paint_get_shader gengort.PreloadProc

func PaintGetShader(cpaint *PaintT) *ShaderT {
	__res := gengort.CCall1(__imp_sk_paint_get_shader.Addr(), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[*ShaderT](__res)
}

var __imp_sk_paint_get_stroke_cap gengort.PreloadProc

func PaintGetStrokeCap(cpaint *PaintT) StrokeCapT {
	__res := gengort.CCall1(__imp_sk_paint_get_stroke_cap.Addr(), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[StrokeCapT](__res)
}

var __imp_sk_paint_get_stroke_join gengort.PreloadProc

func PaintGetStrokeJoin(cpaint *PaintT) StrokeJoinT {
	__res := gengort.CCall1(__imp_sk_paint_get_stroke_join.Addr(), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[StrokeJoinT](__res)
}

var __imp_sk_paint_get_stroke_miter gengort.PreloadProc

func PaintGetStrokeMiter(cpaint *PaintT) float32 {
	__res := gengort.CCall1(__imp_sk_paint_get_stroke_miter.Addr(), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[float32](__res)
}

var __imp_sk_paint_get_stroke_width gengort.PreloadProc

func PaintGetStrokeWidth(cpaint *PaintT) float32 {
	__res := gengort.CCall1(__imp_sk_paint_get_stroke_width.Addr(), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[float32](__res)
}

var __imp_sk_paint_get_style gengort.PreloadProc

func PaintGetStyle(cpaint *PaintT) PaintStyleT {
	__res := gengort.CCall1(__imp_sk_paint_get_style.Addr(), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[PaintStyleT](__res)
}

var __imp_sk_paint_is_antialias gengort.PreloadProc

func PaintIsAntialias(cpaint *PaintT) bool {
	__res := gengort.CCall1(__imp_sk_paint_is_antialias.Addr(), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_paint_is_dither gengort.PreloadProc

func PaintIsDither(cpaint *PaintT) bool {
	__res := gengort.CCall1(__imp_sk_paint_is_dither.Addr(), gengort.MarshallSyscall(cpaint))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_paint_new gengort.PreloadProc

func PaintNew() *PaintT {
	__res := gengort.CCall0(__imp_sk_paint_new.Addr())
	return gengort.UnmarshallSyscall[*PaintT](__res)
}

var __imp_sk_paint_reset gengort.PreloadProc

func PaintReset(cpaint *PaintT) {
	gengort.CCall1(__imp_sk_paint_reset.Addr(), gengort.MarshallSyscall(cpaint))
}

var __imp_sk_paint_set_antialias gengort.PreloadProc

func PaintSetAntialias(cpaint *PaintT, aa bool) {
	gengort.CCall2(__imp_sk_paint_set_antialias.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(aa))
}

var __imp_sk_paint_set_blend_mode gengort.PreloadProc

func PaintSetBlendMode(paint *PaintT, mode BlendModeT) {
	gengort.CCall2(__imp_sk_paint_set_blend_mode.Addr(), gengort.MarshallSyscall(paint), gengort.MarshallSyscall(mode))
}

var __imp_sk_paint_set_color gengort.PreloadProc

func PaintSetColor(cpaint *PaintT, c ColorT) {
	gengort.CCall2(__imp_sk_paint_set_color.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(c))
}

var __imp_sk_paint_set_colorfilter gengort.PreloadProc

func PaintSetColorfilter(cpaint *PaintT, cfilter *ColorFilterT) {
	gengort.CCall2(__imp_sk_paint_set_colorfilter.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(cfilter))
}

var __imp_sk_paint_set_dither gengort.PreloadProc

func PaintSetDither(cpaint *PaintT, isdither bool) {
	gengort.CCall2(__imp_sk_paint_set_dither.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(isdither))
}

var __imp_sk_paint_set_imagefilter gengort.PreloadProc

func PaintSetImagefilter(cpaint *PaintT, cfilter *ImageFilterT) {
	gengort.CCall2(__imp_sk_paint_set_imagefilter.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(cfilter))
}

var __imp_sk_paint_set_maskfilter gengort.PreloadProc

func PaintSetMaskfilter(cpaint *PaintT, cfilter *MaskFilterT) {
	gengort.CCall2(__imp_sk_paint_set_maskfilter.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(cfilter))
}

var __imp_sk_paint_set_path_effect gengort.PreloadProc

func PaintSetPathEffect(cpaint *PaintT, effect *PathEffectT) {
	gengort.CCall2(__imp_sk_paint_set_path_effect.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(effect))
}

var __imp_sk_paint_set_shader gengort.PreloadProc

func PaintSetShader(cpaint *PaintT, cshader *ShaderT) {
	gengort.CCall2(__imp_sk_paint_set_shader.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(cshader))
}

var __imp_sk_paint_set_stroke_cap gengort.PreloadProc

func PaintSetStrokeCap(cpaint *PaintT, ccap StrokeCapT) {
	gengort.CCall2(__imp_sk_paint_set_stroke_cap.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(ccap))
}

var __imp_sk_paint_set_stroke_join gengort.PreloadProc

func PaintSetStrokeJoin(cpaint *PaintT, cjoin StrokeJoinT) {
	gengort.CCall2(__imp_sk_paint_set_stroke_join.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(cjoin))
}

var __imp_sk_paint_set_stroke_miter gengort.PreloadProc

func PaintSetStrokeMiter(cpaint *PaintT, miter float32) {
	gengort.CCall2(__imp_sk_paint_set_stroke_miter.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(miter))
}

var __imp_sk_paint_set_stroke_width gengort.PreloadProc

func PaintSetStrokeWidth(cpaint *PaintT, width float32) {
	gengort.CCall2(__imp_sk_paint_set_stroke_width.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(width))
}

var __imp_sk_paint_set_style gengort.PreloadProc

func PaintSetStyle(cpaint *PaintT, style PaintStyleT) {
	gengort.CCall2(__imp_sk_paint_set_style.Addr(), gengort.MarshallSyscall(cpaint), gengort.MarshallSyscall(style))
}

var __imp_sk_path_add_circle gengort.PreloadProc

func PathAddCircle(cpath *PathT, x float32, y float32, radius float32, dir PathDirectionT) {
	gengort.CCall5(__imp_sk_path_add_circle.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(x), gengort.MarshallSyscall(y), gengort.MarshallSyscall(radius), gengort.MarshallSyscall(dir))
}

var __imp_sk_path_add_oval gengort.PreloadProc

func PathAddOval(cpath *PathT, crect *RectT, cdir PathDirectionT) {
	gengort.CCall3(__imp_sk_path_add_oval.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(crect), gengort.MarshallSyscall(cdir))
}

var __imp_sk_path_add_path gengort.PreloadProc

func PathAddPath(cpath *PathT, other *PathT, add_mode PathAddModeT) {
	gengort.CCall3(__imp_sk_path_add_path.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(other), gengort.MarshallSyscall(add_mode))
}

var __imp_sk_path_add_path_matrix gengort.PreloadProc

func PathAddPathMatrix(cpath *PathT, other *PathT, matrix *MatrixT, add_mode PathAddModeT) {
	gengort.CCall4(__imp_sk_path_add_path_matrix.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(other), gengort.MarshallSyscall(matrix), gengort.MarshallSyscall(add_mode))
}

var __imp_sk_path_add_path_offset gengort.PreloadProc

func PathAddPathOffset(cpath *PathT, other *PathT, dx float32, dy float32, add_mode PathAddModeT) {
	gengort.CCall5(__imp_sk_path_add_path_offset.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(other), gengort.MarshallSyscall(dx), gengort.MarshallSyscall(dy), gengort.MarshallSyscall(add_mode))
}

var __imp_sk_path_add_path_reverse gengort.PreloadProc

func PathAddPathReverse(cpath *PathT, other *PathT) {
	gengort.CCall2(__imp_sk_path_add_path_reverse.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(other))
}

var __imp_sk_path_add_poly gengort.PreloadProc

func PathAddPoly(cpath *PathT, points *PointT, count int32, _close bool) {
	gengort.CCall4(__imp_sk_path_add_poly.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(points), gengort.MarshallSyscall(count), gengort.MarshallSyscall(_close))
}

var __imp_sk_path_add_rect gengort.PreloadProc

func PathAddRect(cpath *PathT, crect *RectT, cdir PathDirectionT) {
	gengort.CCall3(__imp_sk_path_add_rect.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(crect), gengort.MarshallSyscall(cdir))
}

var __imp_sk_path_add_rounded_rect gengort.PreloadProc

func PathAddRoundedRect(cpath *PathT, crect *RectT, rx float32, ry float32, cdir PathDirectionT) {
	gengort.CCall5(__imp_sk_path_add_rounded_rect.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(crect), gengort.MarshallSyscall(rx), gengort.MarshallSyscall(ry), gengort.MarshallSyscall(cdir))
}

var __imp_sk_path_arc_to gengort.PreloadProc

func PathArcTo(cpath *PathT, rx float32, ry float32, xAxisRotate float32, largeArc PathArcSizeT, sweep PathDirectionT, x float32, y float32) {
	gengort.CCall8(__imp_sk_path_arc_to.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(rx), gengort.MarshallSyscall(ry), gengort.MarshallSyscall(xAxisRotate), gengort.MarshallSyscall(largeArc), gengort.MarshallSyscall(sweep), gengort.MarshallSyscall(x), gengort.MarshallSyscall(y))
}

var __imp_sk_path_arc_to_with_oval gengort.PreloadProc

func PathArcToWithOval(cpath *PathT, oval *RectT, startAngle float32, sweepAngle float32, forceMoveTo bool) {
	gengort.CCall5(__imp_sk_path_arc_to_with_oval.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(oval), gengort.MarshallSyscall(startAngle), gengort.MarshallSyscall(sweepAngle), gengort.MarshallSyscall(forceMoveTo))
}

var __imp_sk_path_arc_to_with_points gengort.PreloadProc

func PathArcToWithPoints(cpath *PathT, x1 float32, y1 float32, x2 float32, y2 float32, radius float32) {
	gengort.CCall6(__imp_sk_path_arc_to_with_points.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(x1), gengort.MarshallSyscall(y1), gengort.MarshallSyscall(x2), gengort.MarshallSyscall(y2), gengort.MarshallSyscall(radius))
}

var __imp_sk_path_clone gengort.PreloadProc

func PathClone(cpath *PathT) *PathT {
	__res := gengort.CCall1(__imp_sk_path_clone.Addr(), gengort.MarshallSyscall(cpath))
	return gengort.UnmarshallSyscall[*PathT](__res)
}

var __imp_sk_path_close gengort.PreloadProc

func PathClose(cpath *PathT) {
	gengort.CCall1(__imp_sk_path_close.Addr(), gengort.MarshallSyscall(cpath))
}

var __imp_sk_path_compute_tight_bounds gengort.PreloadProc

func PathComputeTightBounds(cpath *PathT, crect *RectT) {
	gengort.CCall2(__imp_sk_path_compute_tight_bounds.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(crect))
}

var __imp_sk_path_conic_to gengort.PreloadProc

func PathConicTo(cpath *PathT, x0 float32, y0 float32, x1 float32, y1 float32, w float32) {
	gengort.CCall6(__imp_sk_path_conic_to.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(x0), gengort.MarshallSyscall(y0), gengort.MarshallSyscall(x1), gengort.MarshallSyscall(y1), gengort.MarshallSyscall(w))
}

var __imp_sk_path_contains gengort.PreloadProc

func PathContains(cpath *PathT, x float32, y float32) bool {
	__res := gengort.CCall3(__imp_sk_path_contains.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(x), gengort.MarshallSyscall(y))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_path_count_points gengort.PreloadProc

func PathCountPoints(cpath *PathT) int32 {
	__res := gengort.CCall1(__imp_sk_path_count_points.Addr(), gengort.MarshallSyscall(cpath))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_path_cubic_to gengort.PreloadProc

func PathCubicTo( *PathT, x0 float32, y0 float32, x1 float32, y1 float32, x2 float32, y2 float32) {
	gengort.CCall7(__imp_sk_path_cubic_to.Addr(), gengort.MarshallSyscall(), gengort.MarshallSyscall(x0), gengort.MarshallSyscall(y0), gengort.MarshallSyscall(x1), gengort.MarshallSyscall(y1), gengort.MarshallSyscall(x2), gengort.MarshallSyscall(y2))
}

var __imp_sk_path_delete gengort.PreloadProc

func PathDelete(cpath *PathT) {
	gengort.CCall1(__imp_sk_path_delete.Addr(), gengort.MarshallSyscall(cpath))
}

var __imp_sk_path_get_bounds gengort.PreloadProc

func PathGetBounds(cpath *PathT, crect *RectT) {
	gengort.CCall2(__imp_sk_path_get_bounds.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(crect))
}

var __imp_sk_path_get_points gengort.PreloadProc

func PathGetPoints(cpath *PathT, points *PointT, max int32) int32 {
	__res := gengort.CCall3(__imp_sk_path_get_points.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(points), gengort.MarshallSyscall(max))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_path_get_filltype gengort.PreloadProc

func PathGetFilltype(cpath *PathT) PathFillTypeT {
	__res := gengort.CCall1(__imp_sk_path_get_filltype.Addr(), gengort.MarshallSyscall(cpath))
	return gengort.UnmarshallSyscall[PathFillTypeT](__res)
}

var __imp_sk_path_get_last_point gengort.PreloadProc

func PathGetLastPoint(cpath *PathT, point *PointT) bool {
	__res := gengort.CCall2(__imp_sk_path_get_last_point.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(point))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_path_line_to gengort.PreloadProc

func PathLineTo(cpath *PathT, x float32, y float32) {
	gengort.CCall3(__imp_sk_path_line_to.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(x), gengort.MarshallSyscall(y))
}

var __imp_sk_path_move_to gengort.PreloadProc

func PathMoveTo(cpath *PathT, x float32, y float32) {
	gengort.CCall3(__imp_sk_path_move_to.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(x), gengort.MarshallSyscall(y))
}

var __imp_sk_path_new gengort.PreloadProc

func PathNew() *PathT {
	__res := gengort.CCall0(__imp_sk_path_new.Addr())
	return gengort.UnmarshallSyscall[*PathT](__res)
}

var __imp_sk_path_parse_svg_string gengort.PreloadProc

func PathParseSvgString(cpath *PathT, str *byte) bool {
	__res := gengort.CCall2(__imp_sk_path_parse_svg_string.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(str))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_path_quad_to gengort.PreloadProc

func PathQuadTo(cpath *PathT, x0 float32, y0 float32, x1 float32, y1 float32) {
	gengort.CCall5(__imp_sk_path_quad_to.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(x0), gengort.MarshallSyscall(y0), gengort.MarshallSyscall(x1), gengort.MarshallSyscall(y1))
}

var __imp_sk_path_rarc_to gengort.PreloadProc

func PathRarcTo(cpath *PathT, rx float32, ry float32, xAxisRotate float32, largeArc PathArcSizeT, sweep PathDirectionT, x float32, y float32) {
	gengort.CCall8(__imp_sk_path_rarc_to.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(rx), gengort.MarshallSyscall(ry), gengort.MarshallSyscall(xAxisRotate), gengort.MarshallSyscall(largeArc), gengort.MarshallSyscall(sweep), gengort.MarshallSyscall(x), gengort.MarshallSyscall(y))
}

var __imp_sk_path_rconic_to gengort.PreloadProc

func PathRconicTo(cpath *PathT, dx0 float32, dy0 float32, dx1 float32, dy1 float32, w float32) {
	gengort.CCall6(__imp_sk_path_rconic_to.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(dx0), gengort.MarshallSyscall(dy0), gengort.MarshallSyscall(dx1), gengort.MarshallSyscall(dy1), gengort.MarshallSyscall(w))
}

var __imp_sk_path_rcubic_to gengort.PreloadProc

func PathRcubicTo(cpath *PathT, dx0 float32, dy0 float32, dx1 float32, dy1 float32, dx2 float32, dy2 float32) {
	gengort.CCall7(__imp_sk_path_rcubic_to.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(dx0), gengort.MarshallSyscall(dy0), gengort.MarshallSyscall(dx1), gengort.MarshallSyscall(dy1), gengort.MarshallSyscall(dx2), gengort.MarshallSyscall(dy2))
}

var __imp_sk_path_reset gengort.PreloadProc

func PathReset(cpath *PathT) {
	gengort.CCall1(__imp_sk_path_reset.Addr(), gengort.MarshallSyscall(cpath))
}

var __imp_sk_path_rewind gengort.PreloadProc

func PathRewind(cpath *PathT) {
	gengort.CCall1(__imp_sk_path_rewind.Addr(), gengort.MarshallSyscall(cpath))
}

var __imp_sk_path_rline_to gengort.PreloadProc

func PathRlineTo(cpath *PathT, dx float32, yd float32) {
	gengort.CCall3(__imp_sk_path_rline_to.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(dx), gengort.MarshallSyscall(yd))
}

var __imp_sk_path_rmove_to gengort.PreloadProc

func PathRmoveTo(cpath *PathT, dx float32, dy float32) {
	gengort.CCall3(__imp_sk_path_rmove_to.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(dx), gengort.MarshallSyscall(dy))
}

var __imp_sk_path_set_filltype gengort.PreloadProc

func PathSetFilltype(cpath *PathT, cfilltype PathFillTypeT) {
	gengort.CCall2(__imp_sk_path_set_filltype.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(cfilltype))
}

var __imp_sk_path_to_svg_string gengort.PreloadProc

func PathToSvgString(cpath *PathT, absolute bool) *StringT {
	__res := gengort.CCall2(__imp_sk_path_to_svg_string.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(absolute))
	return gengort.UnmarshallSyscall[*StringT](__res)
}

var __imp_sk_path_transform gengort.PreloadProc

func PathTransform(cpath *PathT, cmatrix *MatrixT) {
	gengort.CCall2(__imp_sk_path_transform.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(cmatrix))
}

var __imp_sk_path_transform_to_dest gengort.PreloadProc

func PathTransformToDest(cpath *PathT, cmatrix *MatrixT, destination *PathT) {
	gengort.CCall3(__imp_sk_path_transform_to_dest.Addr(), gengort.MarshallSyscall(cpath), gengort.MarshallSyscall(cmatrix), gengort.MarshallSyscall(destination))
}

var __imp_sk_path_effect_create_1d_path gengort.PreloadProc

func PathEffectCreate1dPath(path *PathT, advance float32, phase float32, style PathEffect1dStyleT) *PathEffectT {
	__res := gengort.CCall4(__imp_sk_path_effect_create_1d_path.Addr(), gengort.MarshallSyscall(path), gengort.MarshallSyscall(advance), gengort.MarshallSyscall(phase), gengort.MarshallSyscall(style))
	return gengort.UnmarshallSyscall[*PathEffectT](__res)
}

var __imp_sk_path_effect_create_2d_line gengort.PreloadProc

func PathEffectCreate2dLine(width float32, matrix *MatrixT) *PathEffectT {
	__res := gengort.CCall2(__imp_sk_path_effect_create_2d_line.Addr(), gengort.MarshallSyscall(width), gengort.MarshallSyscall(matrix))
	return gengort.UnmarshallSyscall[*PathEffectT](__res)
}

var __imp_sk_path_effect_create_2d_path gengort.PreloadProc

func PathEffectCreate2dPath(matrix *MatrixT, path *PathT) *PathEffectT {
	__res := gengort.CCall2(__imp_sk_path_effect_create_2d_path.Addr(), gengort.MarshallSyscall(matrix), gengort.MarshallSyscall(path))
	return gengort.UnmarshallSyscall[*PathEffectT](__res)
}

var __imp_sk_path_effect_create_compose gengort.PreloadProc

func PathEffectCreateCompose(outer *PathEffectT, inner *PathEffectT) *PathEffectT {
	__res := gengort.CCall2(__imp_sk_path_effect_create_compose.Addr(), gengort.MarshallSyscall(outer), gengort.MarshallSyscall(inner))
	return gengort.UnmarshallSyscall[*PathEffectT](__res)
}

var __imp_sk_path_effect_create_corner gengort.PreloadProc

func PathEffectCreateCorner(radius float32) *PathEffectT {
	__res := gengort.CCall1(__imp_sk_path_effect_create_corner.Addr(), gengort.MarshallSyscall(radius))
	return gengort.UnmarshallSyscall[*PathEffectT](__res)
}

var __imp_sk_path_effect_create_dash gengort.PreloadProc

func PathEffectCreateDash(intervals *float32, count int32, phase float32) *PathEffectT {
	__res := gengort.CCall3(__imp_sk_path_effect_create_dash.Addr(), gengort.MarshallSyscall(intervals), gengort.MarshallSyscall(count), gengort.MarshallSyscall(phase))
	return gengort.UnmarshallSyscall[*PathEffectT](__res)
}

var __imp_sk_path_effect_create_discrete gengort.PreloadProc

func PathEffectCreateDiscrete(segLength float32, deviation float32, seedAssist uint32) *PathEffectT {
	__res := gengort.CCall3(__imp_sk_path_effect_create_discrete.Addr(), gengort.MarshallSyscall(segLength), gengort.MarshallSyscall(deviation), gengort.MarshallSyscall(seedAssist))
	return gengort.UnmarshallSyscall[*PathEffectT](__res)
}

var __imp_sk_path_effect_create_sum gengort.PreloadProc

func PathEffectCreateSum(first *PathEffectT, second *PathEffectT) *PathEffectT {
	__res := gengort.CCall2(__imp_sk_path_effect_create_sum.Addr(), gengort.MarshallSyscall(first), gengort.MarshallSyscall(second))
	return gengort.UnmarshallSyscall[*PathEffectT](__res)
}

var __imp_sk_path_effect_create_trim gengort.PreloadProc

func PathEffectCreateTrim(start float32, stop float32, mode PathEffectTrimModeT) *PathEffectT {
	__res := gengort.CCall3(__imp_sk_path_effect_create_trim.Addr(), gengort.MarshallSyscall(start), gengort.MarshallSyscall(stop), gengort.MarshallSyscall(mode))
	return gengort.UnmarshallSyscall[*PathEffectT](__res)
}

var __imp_sk_path_effect_unref gengort.PreloadProc

func PathEffectUnref(effect *PathEffectT) {
	gengort.CCall1(__imp_sk_path_effect_unref.Addr(), gengort.MarshallSyscall(effect))
}

var __imp_sk_path_op gengort.PreloadProc

func PathOp(path *PathT, other *PathT, op PathOpT, result *PathT) bool {
	__res := gengort.CCall4(__imp_sk_path_op.Addr(), gengort.MarshallSyscall(path), gengort.MarshallSyscall(other), gengort.MarshallSyscall(op), gengort.MarshallSyscall(result))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_path_simplify gengort.PreloadProc

func PathSimplify(path *PathT, result *PathT) bool {
	__res := gengort.CCall2(__imp_sk_path_simplify.Addr(), gengort.MarshallSyscall(path), gengort.MarshallSyscall(result))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_opbuilder_add gengort.PreloadProc

func OpbuilderAdd(builder *OpBuilderT, path *PathT, op PathOpT) {
	gengort.CCall3(__imp_sk_opbuilder_add.Addr(), gengort.MarshallSyscall(builder), gengort.MarshallSyscall(path), gengort.MarshallSyscall(op))
}

var __imp_sk_opbuilder_destroy gengort.PreloadProc

func OpbuilderDestroy(builder *OpBuilderT) {
	gengort.CCall1(__imp_sk_opbuilder_destroy.Addr(), gengort.MarshallSyscall(builder))
}

var __imp_sk_opbuilder_new gengort.PreloadProc

func OpbuilderNew() *OpBuilderT {
	__res := gengort.CCall0(__imp_sk_opbuilder_new.Addr())
	return gengort.UnmarshallSyscall[*OpBuilderT](__res)
}

var __imp_sk_opbuilder_resolve gengort.PreloadProc

func OpbuilderResolve(builder *OpBuilderT, result *PathT) bool {
	__res := gengort.CCall2(__imp_sk_opbuilder_resolve.Addr(), gengort.MarshallSyscall(builder), gengort.MarshallSyscall(result))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_shader_new_blend gengort.PreloadProc

func ShaderNewBlend(mode BlendModeT, dst *ShaderT, src *ShaderT) *ShaderT {
	__res := gengort.CCall3(__imp_sk_shader_new_blend.Addr(), gengort.MarshallSyscall(mode), gengort.MarshallSyscall(dst), gengort.MarshallSyscall(src))
	return gengort.UnmarshallSyscall[*ShaderT](__res)
}

var __imp_sk_shader_new_color gengort.PreloadProc

func ShaderNewColor(color ColorT) *ShaderT {
	__res := gengort.CCall1(__imp_sk_shader_new_color.Addr(), gengort.MarshallSyscall(color))
	return gengort.UnmarshallSyscall[*ShaderT](__res)
}

var __imp_sk_shader_new_linear_gradient gengort.PreloadProc

func ShaderNewLinearGradient(points *PointT, colors *ColorT, colorPos *float32, colorCount int32, tileMode TileModeT, localMatrix *MatrixT) *ShaderT {
	__res := gengort.CCall6(__imp_sk_shader_new_linear_gradient.Addr(), gengort.MarshallSyscall(points), gengort.MarshallSyscall(colors), gengort.MarshallSyscall(colorPos), gengort.MarshallSyscall(colorCount), gengort.MarshallSyscall(tileMode), gengort.MarshallSyscall(localMatrix))
	return gengort.UnmarshallSyscall[*ShaderT](__res)
}

var __imp_sk_shader_new_perlin_noise_fractal_noise gengort.PreloadProc

func ShaderNewPerlinNoiseFractalNoise(baseFrequencyX float32, baseFrequencyY float32, numOctaves int32, seed float32, tileSize *IsizeT) *ShaderT {
	__res := gengort.CCall5(__imp_sk_shader_new_perlin_noise_fractal_noise.Addr(), gengort.MarshallSyscall(baseFrequencyX), gengort.MarshallSyscall(baseFrequencyY), gengort.MarshallSyscall(numOctaves), gengort.MarshallSyscall(seed), gengort.MarshallSyscall(tileSize))
	return gengort.UnmarshallSyscall[*ShaderT](__res)
}

var __imp_sk_shader_new_perlin_noise_turbulence gengort.PreloadProc

func ShaderNewPerlinNoiseTurbulence(baseFrequencyX float32, baseFrequencyY float32, numOctaves int32, seed float32, tileSize *IsizeT) *ShaderT {
	__res := gengort.CCall5(__imp_sk_shader_new_perlin_noise_turbulence.Addr(), gengort.MarshallSyscall(baseFrequencyX), gengort.MarshallSyscall(baseFrequencyY), gengort.MarshallSyscall(numOctaves), gengort.MarshallSyscall(seed), gengort.MarshallSyscall(tileSize))
	return gengort.UnmarshallSyscall[*ShaderT](__res)
}

var __imp_sk_shader_new_radial_gradient gengort.PreloadProc

func ShaderNewRadialGradient(center *PointT, radius float32, colors *ColorT, colorPos *float32, colorCount int32, tileMode TileModeT, localMatrix *MatrixT) *ShaderT {
	__res := gengort.CCall7(__imp_sk_shader_new_radial_gradient.Addr(), gengort.MarshallSyscall(center), gengort.MarshallSyscall(radius), gengort.MarshallSyscall(colors), gengort.MarshallSyscall(colorPos), gengort.MarshallSyscall(colorCount), gengort.MarshallSyscall(tileMode), gengort.MarshallSyscall(localMatrix))
	return gengort.UnmarshallSyscall[*ShaderT](__res)
}

var __imp_sk_shader_new_sweep_gradient gengort.PreloadProc

func ShaderNewSweepGradient(center *PointT, colors *ColorT, colorPos *float32, colorCount int32, tileMode TileModeT, startAngle float32, endAngle float32, localMatrix *MatrixT) *ShaderT {
	__res := gengort.CCall8(__imp_sk_shader_new_sweep_gradient.Addr(), gengort.MarshallSyscall(center), gengort.MarshallSyscall(colors), gengort.MarshallSyscall(colorPos), gengort.MarshallSyscall(colorCount), gengort.MarshallSyscall(tileMode), gengort.MarshallSyscall(startAngle), gengort.MarshallSyscall(endAngle), gengort.MarshallSyscall(localMatrix))
	return gengort.UnmarshallSyscall[*ShaderT](__res)
}

var __imp_sk_shader_new_two_point_conical_gradient gengort.PreloadProc

func ShaderNewTwoPointConicalGradient(start *PointT, startRadius float32, end *PointT, endRadius float32, colors *ColorT, colorPos *float32, colorCount int32, tileMode TileModeT, localMatrix *MatrixT) *ShaderT {
	__res := gengort.CCall9(__imp_sk_shader_new_two_point_conical_gradient.Addr(), gengort.MarshallSyscall(start), gengort.MarshallSyscall(startRadius), gengort.MarshallSyscall(end), gengort.MarshallSyscall(endRadius), gengort.MarshallSyscall(colors), gengort.MarshallSyscall(colorPos), gengort.MarshallSyscall(colorCount), gengort.MarshallSyscall(tileMode), gengort.MarshallSyscall(localMatrix))
	return gengort.UnmarshallSyscall[*ShaderT](__res)
}

var __imp_sk_shader_unref gengort.PreloadProc

func ShaderUnref(shader *ShaderT) {
	gengort.CCall1(__imp_sk_shader_unref.Addr(), gengort.MarshallSyscall(shader))
}

var __imp_sk_shader_with_color_filter gengort.PreloadProc

func ShaderWithColorFilter(shader *ShaderT, filter *ColorFilterT) *ShaderT {
	__res := gengort.CCall2(__imp_sk_shader_with_color_filter.Addr(), gengort.MarshallSyscall(shader), gengort.MarshallSyscall(filter))
	return gengort.UnmarshallSyscall[*ShaderT](__res)
}

var __imp_sk_shader_with_local_matrix gengort.PreloadProc

func ShaderWithLocalMatrix(shader *ShaderT, localMatrix *MatrixT) *ShaderT {
	__res := gengort.CCall2(__imp_sk_shader_with_local_matrix.Addr(), gengort.MarshallSyscall(shader), gengort.MarshallSyscall(localMatrix))
	return gengort.UnmarshallSyscall[*ShaderT](__res)
}

var __imp_sk_string_new gengort.PreloadProc

func StringNew(text *byte, _len uint) *StringT {
	__res := gengort.CCall2(__imp_sk_string_new.Addr(), gengort.MarshallSyscall(text), gengort.MarshallSyscall(_len))
	return gengort.UnmarshallSyscall[*StringT](__res)
}

var __imp_sk_string_new_empty gengort.PreloadProc

func StringNewEmpty() *StringT {
	__res := gengort.CCall0(__imp_sk_string_new_empty.Addr())
	return gengort.UnmarshallSyscall[*StringT](__res)
}

var __imp_sk_string_delete gengort.PreloadProc

func StringDelete(str *StringT) {
	gengort.CCall1(__imp_sk_string_delete.Addr(), gengort.MarshallSyscall(str))
}

var __imp_sk_string_get_c_str gengort.PreloadProc

func StringGetCStr(str *StringT) *byte {
	__res := gengort.CCall1(__imp_sk_string_get_c_str.Addr(), gengort.MarshallSyscall(str))
	return gengort.UnmarshallSyscall[*byte](__res)
}

var __imp_sk_string_get_size gengort.PreloadProc

func StringGetSize(str *StringT) uint {
	__res := gengort.CCall1(__imp_sk_string_get_size.Addr(), gengort.MarshallSyscall(str))
	return gengort.UnmarshallSyscall[uint](__res)
}

var __imp_sk_surface_make_raster_direct gengort.PreloadProc

func SurfaceMakeRasterDirect(imageInfo *ImageInfoT, pixels unsafe.Pointer, rowBytes uint, surfaceProps *SurfacePropsT) *SurfaceT {
	__res := gengort.CCall4(__imp_sk_surface_make_raster_direct.Addr(), gengort.MarshallSyscall(imageInfo), gengort.MarshallSyscall(pixels), gengort.MarshallSyscall(rowBytes), gengort.MarshallSyscall(surfaceProps))
	return gengort.UnmarshallSyscall[*SurfaceT](__res)
}

var __imp_sk_surface_make_raster_n32_premul gengort.PreloadProc

func SurfaceMakeRasterN32Premul(imageInfo *ImageInfoT, surfaceProps *SurfacePropsT) *SurfaceT {
	__res := gengort.CCall2(__imp_sk_surface_make_raster_n32_premul.Addr(), gengort.MarshallSyscall(imageInfo), gengort.MarshallSyscall(surfaceProps))
	return gengort.UnmarshallSyscall[*SurfaceT](__res)
}

var __imp_sk_surface_make_surface gengort.PreloadProc

func SurfaceMakeSurface(surface *SurfaceT, width int32, height int32) *SurfaceT {
	__res := gengort.CCall3(__imp_sk_surface_make_surface.Addr(), gengort.MarshallSyscall(surface), gengort.MarshallSyscall(width), gengort.MarshallSyscall(height))
	return gengort.UnmarshallSyscall[*SurfaceT](__res)
}

var __imp_sk_surface_make_image_snapshot gengort.PreloadProc

func SurfaceMakeImageSnapshot(surface *SurfaceT) *ImageT {
	__res := gengort.CCall1(__imp_sk_surface_make_image_snapshot.Addr(), gengort.MarshallSyscall(surface))
	return gengort.UnmarshallSyscall[*ImageT](__res)
}

var __imp_sk_surface_get_canvas gengort.PreloadProc

func SurfaceGetCanvas(surface *SurfaceT) *CanvasT {
	__res := gengort.CCall1(__imp_sk_surface_get_canvas.Addr(), gengort.MarshallSyscall(surface))
	return gengort.UnmarshallSyscall[*CanvasT](__res)
}

var __imp_sk_surface_new_backend_render_target gengort.PreloadProc

func SurfaceNewBackendRenderTarget(context *GrDirectContextT, target *GrBackendrendertargetT, origin GrSurfaceOriginT, colorType ColorTypeT, colorspace *ColorSpaceT, props *SurfacePropsT) *SurfaceT {
	__res := gengort.CCall6(__imp_sk_surface_new_backend_render_target.Addr(), gengort.MarshallSyscall(context), gengort.MarshallSyscall(target), gengort.MarshallSyscall(origin), gengort.MarshallSyscall(colorType), gengort.MarshallSyscall(colorspace), gengort.MarshallSyscall(props))
	return gengort.UnmarshallSyscall[*SurfaceT](__res)
}

var __imp_sk_surface_unref gengort.PreloadProc

func SurfaceUnref(surface *SurfaceT) {
	gengort.CCall1(__imp_sk_surface_unref.Addr(), gengort.MarshallSyscall(surface))
}

var __imp_sk_surfaceprops_new gengort.PreloadProc

func SurfacepropsNew(flags uint32, geometry PixelGeometryT) *SurfacePropsT {
	__res := gengort.CCall2(__imp_sk_surfaceprops_new.Addr(), gengort.MarshallSyscall(flags), gengort.MarshallSyscall(geometry))
	return gengort.UnmarshallSyscall[*SurfacePropsT](__res)
}

var __imp_sk_surfaceprops_delete gengort.PreloadProc

func SurfacepropsDelete(surface_props *SurfacePropsT) {
	gengort.CCall1(__imp_sk_surfaceprops_delete.Addr(), gengort.MarshallSyscall(surface_props))
}

var __imp_sk_textblob_builder_alloc_run gengort.PreloadProc

func TextblobBuilderAllocRun(builder *TextBlobBuilderT, font *FontT, count int32, x float32, y float32, bounds *RectT) *TextBlobBuilderRunBufferT {
	__res := gengort.CCall6(__imp_sk_textblob_builder_alloc_run.Addr(), gengort.MarshallSyscall(builder), gengort.MarshallSyscall(font), gengort.MarshallSyscall(count), gengort.MarshallSyscall(x), gengort.MarshallSyscall(y), gengort.MarshallSyscall(bounds))
	return gengort.UnmarshallSyscall[*TextBlobBuilderRunBufferT](__res)
}

var __imp_sk_textblob_builder_alloc_run_pos gengort.PreloadProc

func TextblobBuilderAllocRunPos(builder *TextBlobBuilderT, font *FontT, count int32, bounds *RectT) *TextBlobBuilderRunBufferT {
	__res := gengort.CCall4(__imp_sk_textblob_builder_alloc_run_pos.Addr(), gengort.MarshallSyscall(builder), gengort.MarshallSyscall(font), gengort.MarshallSyscall(count), gengort.MarshallSyscall(bounds))
	return gengort.UnmarshallSyscall[*TextBlobBuilderRunBufferT](__res)
}

var __imp_sk_textblob_builder_alloc_run_pos_h gengort.PreloadProc

func TextblobBuilderAllocRunPosH(builder *TextBlobBuilderT, font *FontT, count int32, y float32, bounds *RectT) *TextBlobBuilderRunBufferT {
	__res := gengort.CCall5(__imp_sk_textblob_builder_alloc_run_pos_h.Addr(), gengort.MarshallSyscall(builder), gengort.MarshallSyscall(font), gengort.MarshallSyscall(count), gengort.MarshallSyscall(y), gengort.MarshallSyscall(bounds))
	return gengort.UnmarshallSyscall[*TextBlobBuilderRunBufferT](__res)
}

var __imp_sk_textblob_builder_delete gengort.PreloadProc

func TextblobBuilderDelete(builder *TextBlobBuilderT) {
	gengort.CCall1(__imp_sk_textblob_builder_delete.Addr(), gengort.MarshallSyscall(builder))
}

var __imp_sk_textblob_builder_make gengort.PreloadProc

func TextblobBuilderMake(builder *TextBlobBuilderT) *TextBlobT {
	__res := gengort.CCall1(__imp_sk_textblob_builder_make.Addr(), gengort.MarshallSyscall(builder))
	return gengort.UnmarshallSyscall[*TextBlobT](__res)
}

var __imp_sk_textblob_builder_new gengort.PreloadProc

func TextblobBuilderNew() *TextBlobBuilderT {
	__res := gengort.CCall0(__imp_sk_textblob_builder_new.Addr())
	return gengort.UnmarshallSyscall[*TextBlobBuilderT](__res)
}

var __imp_sk_textblob_get_bounds gengort.PreloadProc

func TextblobGetBounds(blob *TextBlobT, bounds *RectT) {
	gengort.CCall2(__imp_sk_textblob_get_bounds.Addr(), gengort.MarshallSyscall(blob), gengort.MarshallSyscall(bounds))
}

var __imp_sk_textblob_get_intercepts gengort.PreloadProc

func TextblobGetIntercepts(blob *TextBlobT, bounds *float32, intervals *float32, paint *PaintT) int32 {
	__res := gengort.CCall4(__imp_sk_textblob_get_intercepts.Addr(), gengort.MarshallSyscall(blob), gengort.MarshallSyscall(bounds), gengort.MarshallSyscall(intervals), gengort.MarshallSyscall(paint))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_textblob_make_from_text gengort.PreloadProc

func TextblobMakeFromText(text unsafe.Pointer, byteLength uint, font *FontT, encoding TextEncodingT) *TextBlobT {
	__res := gengort.CCall4(__imp_sk_textblob_make_from_text.Addr(), gengort.MarshallSyscall(text), gengort.MarshallSyscall(byteLength), gengort.MarshallSyscall(font), gengort.MarshallSyscall(encoding))
	return gengort.UnmarshallSyscall[*TextBlobT](__res)
}

var __imp_sk_textblob_unref gengort.PreloadProc

func TextblobUnref(blob *TextBlobT) {
	gengort.CCall1(__imp_sk_textblob_unref.Addr(), gengort.MarshallSyscall(blob))
}

var __imp_sk_typeface_get_family_name gengort.PreloadProc

func TypefaceGetFamilyName(typeface *TypefaceT) *StringT {
	__res := gengort.CCall1(__imp_sk_typeface_get_family_name.Addr(), gengort.MarshallSyscall(typeface))
	return gengort.UnmarshallSyscall[*StringT](__res)
}

var __imp_sk_typeface_get_fontstyle gengort.PreloadProc

func TypefaceGetFontstyle(typeface *TypefaceT) *FontStyleT {
	__res := gengort.CCall1(__imp_sk_typeface_get_fontstyle.Addr(), gengort.MarshallSyscall(typeface))
	return gengort.UnmarshallSyscall[*FontStyleT](__res)
}

var __imp_sk_typeface_get_units_per_em gengort.PreloadProc

func TypefaceGetUnitsPerEm(typeface *TypefaceT) int32 {
	__res := gengort.CCall1(__imp_sk_typeface_get_units_per_em.Addr(), gengort.MarshallSyscall(typeface))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_sk_typeface_is_fixed_pitch gengort.PreloadProc

func TypefaceIsFixedPitch(typeface *TypefaceT) bool {
	__res := gengort.CCall1(__imp_sk_typeface_is_fixed_pitch.Addr(), gengort.MarshallSyscall(typeface))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_typeface_unref gengort.PreloadProc

func TypefaceUnref(typeface *TypefaceT) {
	gengort.CCall1(__imp_sk_typeface_unref.Addr(), gengort.MarshallSyscall(typeface))
}

var __imp_sk_dynamic_memory_wstream_new gengort.PreloadProc

func DynamicMemoryWstreamNew() *DynamicMemoryWstreamT {
	__res := gengort.CCall0(__imp_sk_dynamic_memory_wstream_new.Addr())
	return gengort.UnmarshallSyscall[*DynamicMemoryWstreamT](__res)
}

var __imp_sk_dynamic_memory_wstream_as_wstream gengort.PreloadProc

func DynamicMemoryWstreamAsWstream(stream *DynamicMemoryWstreamT) *WstreamT {
	__res := gengort.CCall1(__imp_sk_dynamic_memory_wstream_as_wstream.Addr(), gengort.MarshallSyscall(stream))
	return gengort.UnmarshallSyscall[*WstreamT](__res)
}

var __imp_sk_dynamic_memory_wstream_write gengort.PreloadProc

func DynamicMemoryWstreamWrite(stream *DynamicMemoryWstreamT, buffer unsafe.Pointer, size uint) bool {
	__res := gengort.CCall3(__imp_sk_dynamic_memory_wstream_write.Addr(), gengort.MarshallSyscall(stream), gengort.MarshallSyscall(buffer), gengort.MarshallSyscall(size))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_dynamic_memory_wstream_bytes_written gengort.PreloadProc

func DynamicMemoryWstreamBytesWritten(stream *DynamicMemoryWstreamT) uint {
	__res := gengort.CCall1(__imp_sk_dynamic_memory_wstream_bytes_written.Addr(), gengort.MarshallSyscall(stream))
	return gengort.UnmarshallSyscall[uint](__res)
}

var __imp_sk_dynamic_memory_wstream_read gengort.PreloadProc

func DynamicMemoryWstreamRead(stream *DynamicMemoryWstreamT, buffer unsafe.Pointer, offset uint, size uint) uint {
	__res := gengort.CCall4(__imp_sk_dynamic_memory_wstream_read.Addr(), gengort.MarshallSyscall(stream), gengort.MarshallSyscall(buffer), gengort.MarshallSyscall(offset), gengort.MarshallSyscall(size))
	return gengort.UnmarshallSyscall[uint](__res)
}

var __imp_sk_dynamic_memory_wstream_delete gengort.PreloadProc

func DynamicMemoryWstreamDelete(stream *DynamicMemoryWstreamT) {
	gengort.CCall1(__imp_sk_dynamic_memory_wstream_delete.Addr(), gengort.MarshallSyscall(stream))
}

var __imp_sk_file_wstream_new gengort.PreloadProc

func FileWstreamNew(path *byte) *FileWstreamT {
	__res := gengort.CCall1(__imp_sk_file_wstream_new.Addr(), gengort.MarshallSyscall(path))
	return gengort.UnmarshallSyscall[*FileWstreamT](__res)
}

var __imp_sk_file_wstream_as_wstream gengort.PreloadProc

func FileWstreamAsWstream(stream *FileWstreamT) *WstreamT {
	__res := gengort.CCall1(__imp_sk_file_wstream_as_wstream.Addr(), gengort.MarshallSyscall(stream))
	return gengort.UnmarshallSyscall[*WstreamT](__res)
}

var __imp_sk_file_wstream_write gengort.PreloadProc

func FileWstreamWrite(stream *FileWstreamT, buffer unsafe.Pointer, size uint) bool {
	__res := gengort.CCall3(__imp_sk_file_wstream_write.Addr(), gengort.MarshallSyscall(stream), gengort.MarshallSyscall(buffer), gengort.MarshallSyscall(size))
	return gengort.UnmarshallSyscall[bool](__res)
}

var __imp_sk_file_wstream_bytes_written gengort.PreloadProc

func FileWstreamBytesWritten(stream *FileWstreamT) uint {
	__res := gengort.CCall1(__imp_sk_file_wstream_bytes_written.Addr(), gengort.MarshallSyscall(stream))
	return gengort.UnmarshallSyscall[uint](__res)
}

var __imp_sk_file_wstream_flush gengort.PreloadProc

func FileWstreamFlush(stream *FileWstreamT) {
	gengort.CCall1(__imp_sk_file_wstream_flush.Addr(), gengort.MarshallSyscall(stream))
}

var __imp_sk_file_wstream_delete gengort.PreloadProc

func FileWstreamDelete(stream *FileWstreamT) {
	gengort.CCall1(__imp_sk_file_wstream_delete.Addr(), gengort.MarshallSyscall(stream))
}

var __imp_sk_document_begin_page gengort.PreloadProc

func DocumentBeginPage(doc *DocumentT, width float32, height float32) *CanvasT {
	__res := gengort.CCall3(__imp_sk_document_begin_page.Addr(), gengort.MarshallSyscall(doc), gengort.MarshallSyscall(width), gengort.MarshallSyscall(height))
	return gengort.UnmarshallSyscall[*CanvasT](__res)
}

var __imp_sk_document_end_page gengort.PreloadProc

func DocumentEndPage(doc *DocumentT) {
	gengort.CCall1(__imp_sk_document_end_page.Addr(), gengort.MarshallSyscall(doc))
}

var __imp_sk_document_close gengort.PreloadProc

func DocumentClose(doc *DocumentT) {
	gengort.CCall1(__imp_sk_document_close.Addr(), gengort.MarshallSyscall(doc))
}

var __imp_sk_document_abort gengort.PreloadProc

func DocumentAbort(doc *DocumentT) {
	gengort.CCall1(__imp_sk_document_abort.Addr(), gengort.MarshallSyscall(doc))
}

var __imp_sk_document_make_pdf gengort.PreloadProc

func DocumentMakePdf(stream *WstreamT, metadata *MetadataT) *DocumentT {
	__res := gengort.CCall2(__imp_sk_document_make_pdf.Addr(), gengort.MarshallSyscall(stream), gengort.MarshallSyscall(metadata))
	return gengort.UnmarshallSyscall[*DocumentT](__res)
}

var __imp_register_image_codecs gengort.PreloadProc

func RegisterImageCodecs() { gengort.CCall0(__imp_register_image_codecs.Addr()) }

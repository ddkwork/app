// Code generated by bindgen. DO NOT EDIT.
package skia

import (
	"github.com/ddkwork/app/bindgen/bindlib"
	"unsafe"
)

const GengoLibraryName = "skia"

var GengoLibrary = bindlib.NewLibrary(GengoLibraryName)

type SkPathAddModeT int32

const (
	SK_PATH_ADD_MODE_APPEND SkPathAddModeT = 0
	SK_PATH_ADD_MODE_EXTEND SkPathAddModeT = 1
)

type SkPathArcSizeT int32

const (
	SK_PATH_ARC_SIZE_SMALL SkPathArcSizeT = 0
	SK_PATH_ARC_SIZE_LARGE SkPathArcSizeT = 1
)

type SkPathDirectionT int32

const (
	SK_PATH_DIRECTION_CW  SkPathDirectionT = 0
	SK_PATH_DIRECTION_CCW SkPathDirectionT = 1
)

type SkPathFillTypeT int32

const (
	SK_PATH_FILLTYPE_WINDING         SkPathFillTypeT = 0
	SK_PATH_FILLTYPE_EVENODD         SkPathFillTypeT = 1
	SK_PATH_FILLTYPE_INVERSE_WINDING SkPathFillTypeT = 2
	SK_PATH_FILLTYPE_INVERSE_EVENODD SkPathFillTypeT = 3
)

type SkPathEffect1dStyleT int32

const (
	SK_PATH_EFFECT_1D_STYLE_TRANSLATE SkPathEffect1dStyleT = 0
	SK_PATH_EFFECT_1D_STYLE_ROTATE    SkPathEffect1dStyleT = 1
	SK_PATH_EFFECT_1D_STYLE_MORPH     SkPathEffect1dStyleT = 2
	SK_PATH_EFFECT_1D_STYLE_LAST      SkPathEffect1dStyleT = 2
)

type SkPathEffectTrimModeT int32

const (
	SK_PATH_EFFECT_TRIM_MODE_NORMAL   SkPathEffectTrimModeT = 0
	SK_PATH_EFFECT_TRIM_MODE_INVERTED SkPathEffectTrimModeT = 1
)

type SkPathOpT int32

const (
	SK_PATH_OP_DIFFERENCE         SkPathOpT = 0
	SK_PATH_OP_INTERSECT          SkPathOpT = 1
	SK_PATH_OP_UNION              SkPathOpT = 2
	SK_PATH_OP_XOR                SkPathOpT = 3
	SK_PATH_OP_REVERSE_DIFFERENCE SkPathOpT = 4
)

type SkPixelGeometryT int32

const (
	SK_PIXEL_GEOMETRY_UNKNOWN SkPixelGeometryT = 0
	SK_PIXEL_GEOMETRY_RGB_H   SkPixelGeometryT = 1
	SK_PIXEL_GEOMETRY_BGR_H   SkPixelGeometryT = 2
	SK_PIXEL_GEOMETRY_RGB_V   SkPixelGeometryT = 3
	SK_PIXEL_GEOMETRY_BGR_V   SkPixelGeometryT = 4
)

type GrSurfaceOriginT int32

const (
	GR_SURFACE_ORIGIN_TOP_LEFT    GrSurfaceOriginT = 0
	GR_SURFACE_ORIGIN_BOTTOM_LEFT GrSurfaceOriginT = 1
)

type SkBlendModeT int32

const (
	SK_BLEND_MODE_CLEAR          SkBlendModeT = 0
	SK_BLEND_MODE_SRC            SkBlendModeT = 1
	SK_BLEND_MODE_DST            SkBlendModeT = 2
	SK_BLEND_MODE_SRCOVER        SkBlendModeT = 3
	SK_BLEND_MODE_DSTOVER        SkBlendModeT = 4
	SK_BLEND_MODE_SRCIN          SkBlendModeT = 5
	SK_BLEND_MODE_DSTIN          SkBlendModeT = 6
	SK_BLEND_MODE_SRCOUT         SkBlendModeT = 7
	SK_BLEND_MODE_DSTOUT         SkBlendModeT = 8
	SK_BLEND_MODE_SRCATOP        SkBlendModeT = 9
	SK_BLEND_MODE_DSTATOP        SkBlendModeT = 10
	SK_BLEND_MODE_XOR            SkBlendModeT = 11
	SK_BLEND_MODE_PLUS           SkBlendModeT = 12
	SK_BLEND_MODE_MODULATE       SkBlendModeT = 13
	SK_BLEND_MODE_SCREEN         SkBlendModeT = 14
	SK_BLEND_MODE_OVERLAY        SkBlendModeT = 15
	SK_BLEND_MODE_DARKEN         SkBlendModeT = 16
	SK_BLEND_MODE_LIGHTEN        SkBlendModeT = 17
	SK_BLEND_MODE_COLORDODGE     SkBlendModeT = 18
	SK_BLEND_MODE_COLORBURN      SkBlendModeT = 19
	SK_BLEND_MODE_HARDLIGHT      SkBlendModeT = 20
	SK_BLEND_MODE_SOFTLIGHT      SkBlendModeT = 21
	SK_BLEND_MODE_DIFFERENCE     SkBlendModeT = 22
	SK_BLEND_MODE_EXCLUSION      SkBlendModeT = 23
	SK_BLEND_MODE_MULTIPLY       SkBlendModeT = 24
	SK_BLEND_MODE_HUE            SkBlendModeT = 25
	SK_BLEND_MODE_SATURATION     SkBlendModeT = 26
	SK_BLEND_MODE_COLOR          SkBlendModeT = 27
	SK_BLEND_MODE_LUMINOSITY     SkBlendModeT = 28
	SK_BLEND_MODE_LAST_COEFF     SkBlendModeT = 14
	SK_BLEND_MODE_LAST_SEPARABLE SkBlendModeT = 24
	SK_BLEND_MODE_LAST           SkBlendModeT = 28
)

type SkBlurStyleT int32

const (
	SK_BLUR_STYLE_NORMAL SkBlurStyleT = 0
	SK_BLUR_STYLE_SOLID  SkBlurStyleT = 1
	SK_BLUR_STYLE_OUTER  SkBlurStyleT = 2
	SK_BLUR_STYLE_INNER  SkBlurStyleT = 3
	SK_BLUR_STYLE_LAST   SkBlurStyleT = 3
)

type SkClipOpT int32

const (
	SK_CLIP_OP_DIFFERENCE SkClipOpT = 0
	SK_CLIP_OP_INTERSECT  SkClipOpT = 1
	SK_CLIP_OP_LAST       SkClipOpT = 1
)

type SkHighContrastConfigInvertStyleT int32

const (
	SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE_NO_INVERT         SkHighContrastConfigInvertStyleT = 0
	SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE_INVERT_BRIGHTNESS SkHighContrastConfigInvertStyleT = 1
	SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE_INVERT_LIGHTNESS  SkHighContrastConfigInvertStyleT = 2
	SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE_LAST              SkHighContrastConfigInvertStyleT = 2
)

type SkColorChannelT int32

const (
	SK_COLOR_CHANNEL_RED   SkColorChannelT = 0
	SK_COLOR_CHANNEL_GREEN SkColorChannelT = 1
	SK_COLOR_CHANNEL_BLUE  SkColorChannelT = 2
	SK_COLOR_CHANNEL_ALPHA SkColorChannelT = 3
	SK_COLOR_CHANNEL_LAST  SkColorChannelT = 3
)

type SkPaintStyleT int32

const (
	SK_PAINT_STYLE_FILL            SkPaintStyleT = 0
	SK_PAINT_STYLE_STROKE          SkPaintStyleT = 1
	SK_PAINT_STYLE_STROKE_AND_FILL SkPaintStyleT = 2
)

type SkStrokeCapT int32

const (
	SK_STROKE_CAP_BUTT    SkStrokeCapT = 0
	SK_STROKE_CAP_ROUND   SkStrokeCapT = 1
	SK_STROKE_CAP_SQUARE  SkStrokeCapT = 2
	SK_STROKE_CAP_LAST    SkStrokeCapT = 2
	SK_STROKE_CAP_DEFAULT SkStrokeCapT = 0
)

type SkStrokeJoinT int32

const (
	SK_STROKE_JOIN_MITER   SkStrokeJoinT = 0
	SK_STROKE_JOIN_ROUND   SkStrokeJoinT = 1
	SK_STROKE_JOIN_BEVEL   SkStrokeJoinT = 2
	SK_STROKE_JOIN_LAST    SkStrokeJoinT = 2
	SK_STROKE_JOIN_DEFAULT SkStrokeJoinT = 0
)

type SkColorTypeT int32

const (
	SK_COLOR_TYPE_UNKNOWN            SkColorTypeT = 0
	SK_COLOR_TYPE_ALPHA_8            SkColorTypeT = 1
	SK_COLOR_TYPE_RGB_565            SkColorTypeT = 2
	SK_COLOR_TYPE_ARGB_4444          SkColorTypeT = 3
	SK_COLOR_TYPE_RGBA_8888          SkColorTypeT = 4
	SK_COLOR_TYPE_RGB_888X           SkColorTypeT = 5
	SK_COLOR_TYPE_BGRA_8888          SkColorTypeT = 6
	SK_COLOR_TYPE_RGBA_1010102       SkColorTypeT = 7
	SK_COLOR_TYPE_BGRA_1010102       SkColorTypeT = 8
	SK_COLOR_TYPE_RGB_101010X        SkColorTypeT = 9
	SK_COLOR_TYPE_BGR_101010X        SkColorTypeT = 10
	SK_COLOR_TYPE_BGR_101010X_XR     SkColorTypeT = 11
	SK_COLOR_TYPE_BGRA_10101010_XR   SkColorTypeT = 12
	S_K__COLOR__TYPE__RGBA_10X6      SkColorTypeT = 13
	SK_COLOR_TYPE_GRAY_8             SkColorTypeT = 14
	SK_COLOR_TYPE_RGBA_F16_NORM      SkColorTypeT = 15
	SK_COLOR_TYPE_RGBA_F16           SkColorTypeT = 16
	SK_COLOR_TYPE_RGBA_F32           SkColorTypeT = 17
	SK_COLOR_TYPE_R8G8_UNORM         SkColorTypeT = 18
	SK_COLOR_TYPE_A16_FLOAT          SkColorTypeT = 19
	SK_COLOR_TYPE_R16G16_FLOAT       SkColorTypeT = 20
	SK_COLOR_TYPE_A16_UNORM          SkColorTypeT = 21
	SK_COLOR_TYPE_R16G16_UNORM       SkColorTypeT = 22
	SK_COLOR_TYPE_R16G16B16A16_UNORM SkColorTypeT = 23
	SK_COLOR_TYPE_SRGBA_8888         SkColorTypeT = 24
	SK_COLOR_TYPE_R8_UNORM           SkColorTypeT = 25
	SK_COLOR_TYPE_LAST               SkColorTypeT = 25
	SK_COLOR_TYPE_N32                SkColorTypeT = 4
)

type SkAlphaTypeT int32

const (
	SK_ALPHA_TYPE_UNKNOWN  SkAlphaTypeT = 0
	SK_ALPHA_TYPE_OPAQUE   SkAlphaTypeT = 1
	SK_ALPHA_TYPE_PREMUL   SkAlphaTypeT = 2
	SK_ALPHA_TYPE_UNPREMUL SkAlphaTypeT = 3
	SK_ALPHA_TYPE_LAST     SkAlphaTypeT = 3
)

type SkImageCachingHintT int32

const (
	SK_IMAGE_CACHING_HINT_ALLOW    SkImageCachingHintT = 0
	SK_IMAGE_CACHING_HINT_DISALLOW SkImageCachingHintT = 1
)

type SkFilterModeT int32

const (
	SK_FILTER_MODE_NEAREST SkFilterModeT = 0
	SK_FILTER_MODE_LINEAR  SkFilterModeT = 1
	SK_FILTER_MODE_LAST    SkFilterModeT = 1
)

type SkMipmapModeT int32

const (
	SK_MIPMAP_MODE_NONE    SkMipmapModeT = 0
	SK_MIPMAP_MODE_NEAREST SkMipmapModeT = 1
	SK_MIPMAP_MODE_LINEAR  SkMipmapModeT = 2
	SK_MIPMAP_MODE_LAST    SkMipmapModeT = 2
)

type SkFontHintingT int32

const (
	SK_FONT_HINTING_NONE   SkFontHintingT = 0
	SK_FONT_HINTING_SLIGHT SkFontHintingT = 1
	SK_FONT_HINTING_NORMAL SkFontHintingT = 2
	SK_FONT_HINTING_FULL   SkFontHintingT = 3
)

type SkTextEncodingT int32

const (
	SK_TEXT_ENCODING_UTF8     SkTextEncodingT = 0
	SK_TEXT_ENCODING_UTF16    SkTextEncodingT = 1
	SK_TEXT_ENCODING_UTF32    SkTextEncodingT = 2
	SK_TEXT_ENCODING_GLYPH_ID SkTextEncodingT = 3
)

type SkFontStyleWeightT int32

const (
	SK_FONT_STYLE_WEIGHT_INVISIBLE   SkFontStyleWeightT = 0
	SK_FONT_STYLE_WEIGHT_THIN        SkFontStyleWeightT = 100
	SK_FONT_STYLE_WEIGHT_EXTRA_LIGHT SkFontStyleWeightT = 200
	SK_FONT_STYLE_WEIGHT_LIGHT       SkFontStyleWeightT = 300
	SK_FONT_STYLE_WEIGHT_NORMAL      SkFontStyleWeightT = 400
	SK_FONT_STYLE_WEIGHT_MEDIUM      SkFontStyleWeightT = 500
	SK_FONT_STYLE_WEIGHT_SEMI_BOLD   SkFontStyleWeightT = 600
	SK_FONT_STYLE_WEIGHT_BOLD        SkFontStyleWeightT = 700
	SK_FONT_STYLE_WEIGHT_EXTRA_BOLD  SkFontStyleWeightT = 800
	SK_FONT_STYLE_WEIGHT_BLACK       SkFontStyleWeightT = 900
	SK_FONT_STYLE_WEIGHT_EXTRA_BLACK SkFontStyleWeightT = 1000
)

type SkFontStyleWidthT int32

const (
	SK_FONT_STYLE_WIDTH_ULTRA_CONDENSED SkFontStyleWidthT = 1
	SK_FONT_STYLE_WIDTH_EXTRA_CONDENSED SkFontStyleWidthT = 2
	SK_FONT_STYLE_WIDTH_CONDENSED       SkFontStyleWidthT = 3
	SK_FONT_STYLE_WIDTH_SEMI_CONDENSED  SkFontStyleWidthT = 4
	SK_FONT_STYLE_WIDTH_NORMAL          SkFontStyleWidthT = 5
	SK_FONT_STYLE_WIDTH_SEMI_EXPANDED   SkFontStyleWidthT = 6
	SK_FONT_STYLE_WIDTH_EXPANDED        SkFontStyleWidthT = 7
	SK_FONT_STYLE_WIDTH_EXTRA_EXPANDED  SkFontStyleWidthT = 8
	SK_FONT_STYLE_WIDTH_ULTRA_EXPANDED  SkFontStyleWidthT = 9
)

type SkFontStyleSlantT int32

const (
	SK_FONT_STYLE_SLANT_UPRIGHT SkFontStyleSlantT = 0
	SK_FONT_STYLE_SLANT_ITALIC  SkFontStyleSlantT = 1
	SK_FONT_STYLE_SLANT_OBLIQUE SkFontStyleSlantT = 2
)

type SkFontMetricsFlagsT int32

const (
	SK_FONT_METRICS_FLAG_UNDERLINE_THICKNESS_IS_VALID SkFontMetricsFlagsT = 1
	SK_FONT_METRICS_FLAG_UNDERLINE_POSITION_IS_VALID  SkFontMetricsFlagsT = 2
	SK_FONT_METRICS_FLAG_STRIKEOUT_THICKNESS_IS_VALID SkFontMetricsFlagsT = 4
	SK_FONT_METRICS_FLAG_STRIKEOUT_POSITION_IS_VALID  SkFontMetricsFlagsT = 8
	SK_FONT_METRICS_FLAG_BOUNDS_INVALID               SkFontMetricsFlagsT = 16
)

type SkPointModeT int32

const (
	SK_POINT_MODE_POINTS  SkPointModeT = 0
	SK_POINT_MODE_LINES   SkPointModeT = 1
	SK_POINT_MODE_POLYGON SkPointModeT = 2
)

type SkSrcRectConstraintT int32

const (
	SRC_RECT_CONSTRAINT_STRICT SkSrcRectConstraintT = 0
	SRC_RECT_CONSTRAINT_FAST   SkSrcRectConstraintT = 1
)

type SkTileModeT int32

const (
	SK_TILE_MODE_CLAMP SkTileModeT = 0
	SK_TILE_REPEAT     SkTileModeT = 1
	SK_TILE_MIRROR     SkTileModeT = 2
	SK_TILE_DECAL      SkTileModeT = 3
	SK_TILE_LAST       SkTileModeT = 3
)

type SkTextBlobBuilderRunBufferT struct {
	Glyphs   *uint16
	Pos      *float32
	Utf8text *byte
	Clusters *uint32
}
type SkIpointT struct {
	X int32
	Y int32
}
type SkPointT struct {
	X float32
	Y float32
}
type SkPoint3T struct {
	X float32
	Y float32
	Z float32
}
type SkIsizeT struct {
	W int32
	H int32
}
type SkIrectT struct {
	Left   int32
	Top    int32
	Right  int32
	Bottom int32
}
type SkRectT struct {
	Left   float32
	Top    float32
	Right  float32
	Bottom float32
}
type SkMatrixT struct {
	scaleX float32
	skewX  float32
	transX float32
	skewY  float32
	scaleY float32
	transY float32
	Persp0 float32
	Persp1 float32
	Persp2 float32
}
type GrGlFramebufferinfoT struct {
	fFBOID     uint32
	fFormat    uint32
	fProtected bool
}
type SkHighContrastConfigT struct {
	Grayscale   bool
	invertStyle SkHighContrastConfigInvertStyleT
	Contrast    float32
}
type SkImageInfoT struct {
	colorSpace unsafe.Pointer
	colorType  SkColorTypeT
	alphaType  SkAlphaTypeT
	Width      int32
	Height     int32
}
type SkCubicResamplerT struct {
	B float32
	C float32
}
type SkSamplingOptionsT struct {
	maxAniso int32
	useCubic bool
	Cubic    SkCubicResamplerT
	Filter   SkFilterModeT
	Mipmap   SkMipmapModeT
}
type SkFontMetricsT struct {
	Flags              uint32
	Top                float32
	Ascent             float32
	Descent            float32
	Bottom             float32
	Leading            float32
	avgCharWidth       float32
	maxCharWidth       float32
	xMin               float32
	xMax               float32
	xHeight            float32
	capHeight          float32
	underlineThickness float32
	underlinePosition  float32
	strikeoutThickness float32
	strikeoutPosition  float32
}
type SkDateTimeT struct {
	timeZoneMinutes int16
	Year            uint16
	Month           uint8
	dayOfWeek       uint8
	Day             uint8
	Hour            uint8
	Minute          uint8
	Second          uint8
}
type SkMetadataT struct {
	Title           *byte
	Author          *byte
	Subject         *byte
	Keywords        *byte
	Creator         *byte
	Producer        *byte
	Creation        SkDateTimeT
	Modified        SkDateTimeT
	rasterDPI       float32
	Unused          float32
	encodingQuality int32
}
type _Int128T = any
type _Uint128T = any
type __NSConstantString = any
type SizeT = uint64
type _BuiltinMsVaList = *byte
type _BuiltinVaList = *byte
type Uint8T = uint8
type Uint16T = uint16
type Uint32T = uint32
type Uint64T = uint64
type Int8T = int8
type Int16T = int16
type Int32T = int32
type Int64T = int64
type Bool = int32
type IntptrT = *int32
type SkColorT = uint32

var __imp_gr_backendrendertarget_new_gl bindlib.PreloadProc

// Gengo init function.
func init() {
	__imp_gr_backendrendertarget_new_gl = GengoLibrary.ImportNow("gr_backendrendertarget_new_gl")
	__imp_gr_backendrendertarget_delete = GengoLibrary.ImportNow("gr_backendrendertarget_delete")
	__imp_gr_direct_context_make_gl = GengoLibrary.ImportNow("gr_direct_context_make_gl")
	__imp_gr_direct_context_abandon_context = GengoLibrary.ImportNow("gr_direct_context_abandon_context")
	__imp_gr_direct_context_delete = GengoLibrary.ImportNow("gr_direct_context_delete")
	__imp_gr_direct_context_flush_and_submit = GengoLibrary.ImportNow("gr_direct_context_flush_and_submit")
	__imp_gr_direct_context_release_resources_and_abandon_context = GengoLibrary.ImportNow("gr_direct_context_release_resources_and_abandon_context")
	__imp_gr_direct_context_reset = GengoLibrary.ImportNow("gr_direct_context_reset")
	__imp_gr_direct_context_reset_gl_texture_bindings = GengoLibrary.ImportNow("gr_direct_context_reset_gl_texture_bindings")
	__imp_gr_direct_context_unref = GengoLibrary.ImportNow("gr_direct_context_unref")
	__imp_gr_glinterface_create_native_interface = GengoLibrary.ImportNow("gr_glinterface_create_native_interface")
	__imp_gr_glinterface_unref = GengoLibrary.ImportNow("gr_glinterface_unref")
	__imp_sk_canvas_get_surface = GengoLibrary.ImportNow("sk_canvas_get_surface")
	__imp_sk_canvas_clear = GengoLibrary.ImportNow("sk_canvas_clear")
	__imp_sk_canvas_clip_path_with_operation = GengoLibrary.ImportNow("sk_canvas_clip_path_with_operation")
	__imp_sk_canvas_clip_rect_with_operation = GengoLibrary.ImportNow("sk_canvas_clip_rect_with_operation")
	__imp_sk_canvas_concat = GengoLibrary.ImportNow("sk_canvas_concat")
	__imp_sk_canvas_draw_arc = GengoLibrary.ImportNow("sk_canvas_draw_arc")
	__imp_sk_canvas_draw_circle = GengoLibrary.ImportNow("sk_canvas_draw_circle")
	__imp_sk_canvas_draw_color = GengoLibrary.ImportNow("sk_canvas_draw_color")
	__imp_sk_canvas_draw_image_nine = GengoLibrary.ImportNow("sk_canvas_draw_image_nine")
	__imp_sk_canvas_draw_image_rect = GengoLibrary.ImportNow("sk_canvas_draw_image_rect")
	__imp_sk_canvas_draw_line = GengoLibrary.ImportNow("sk_canvas_draw_line")
	__imp_sk_canvas_draw_oval = GengoLibrary.ImportNow("sk_canvas_draw_oval")
	__imp_sk_canvas_draw_paint = GengoLibrary.ImportNow("sk_canvas_draw_paint")
	__imp_sk_canvas_draw_path = GengoLibrary.ImportNow("sk_canvas_draw_path")
	__imp_sk_canvas_draw_point = GengoLibrary.ImportNow("sk_canvas_draw_point")
	__imp_sk_canvas_draw_points = GengoLibrary.ImportNow("sk_canvas_draw_points")
	__imp_sk_canvas_draw_rect = GengoLibrary.ImportNow("sk_canvas_draw_rect")
	__imp_sk_canvas_draw_round_rect = GengoLibrary.ImportNow("sk_canvas_draw_round_rect")
	__imp_sk_canvas_draw_simple_text = GengoLibrary.ImportNow("sk_canvas_draw_simple_text")
	__imp_sk_canvas_draw_text_blob = GengoLibrary.ImportNow("sk_canvas_draw_text_blob")
	__imp_sk_canvas_get_local_clip_bounds = GengoLibrary.ImportNow("sk_canvas_get_local_clip_bounds")
	__imp_sk_canvas_get_save_count = GengoLibrary.ImportNow("sk_canvas_get_save_count")
	__imp_sk_canvas_get_total_matrix = GengoLibrary.ImportNow("sk_canvas_get_total_matrix")
	__imp_sk_canvas_is_clip_empty = GengoLibrary.ImportNow("sk_canvas_is_clip_empty")
	__imp_sk_canvas_is_clip_rect = GengoLibrary.ImportNow("sk_canvas_is_clip_rect")
	__imp_sk_canvas_quick_reject_path = GengoLibrary.ImportNow("sk_canvas_quick_reject_path")
	__imp_sk_canvas_quick_reject_rect = GengoLibrary.ImportNow("sk_canvas_quick_reject_rect")
	__imp_sk_canvas_reset_matrix = GengoLibrary.ImportNow("sk_canvas_reset_matrix")
	__imp_sk_canvas_restore = GengoLibrary.ImportNow("sk_canvas_restore")
	__imp_sk_canvas_restore_to_count = GengoLibrary.ImportNow("sk_canvas_restore_to_count")
	__imp_sk_canvas_rotate_radians = GengoLibrary.ImportNow("sk_canvas_rotate_radians")
	__imp_sk_canvas_save = GengoLibrary.ImportNow("sk_canvas_save")
	__imp_sk_canvas_save_layer = GengoLibrary.ImportNow("sk_canvas_save_layer")
	__imp_sk_canvas_save_layer_alpha = GengoLibrary.ImportNow("sk_canvas_save_layer_alpha")
	__imp_sk_canvas_scale = GengoLibrary.ImportNow("sk_canvas_scale")
	__imp_sk_canvas_set_matrix = GengoLibrary.ImportNow("sk_canvas_set_matrix")
	__imp_sk_canvas_skew = GengoLibrary.ImportNow("sk_canvas_skew")
	__imp_sk_canvas_translate = GengoLibrary.ImportNow("sk_canvas_translate")
	__imp_sk_colorfilter_new_color_matrix = GengoLibrary.ImportNow("sk_colorfilter_new_color_matrix")
	__imp_sk_colorfilter_new_compose = GengoLibrary.ImportNow("sk_colorfilter_new_compose")
	__imp_sk_colorfilter_new_high_contrast = GengoLibrary.ImportNow("sk_colorfilter_new_high_contrast")
	__imp_sk_colorfilter_new_lighting = GengoLibrary.ImportNow("sk_colorfilter_new_lighting")
	__imp_sk_colorfilter_new_luma_color = GengoLibrary.ImportNow("sk_colorfilter_new_luma_color")
	__imp_sk_colorfilter_new_mode = GengoLibrary.ImportNow("sk_colorfilter_new_mode")
	__imp_sk_colorfilter_unref = GengoLibrary.ImportNow("sk_colorfilter_unref")
	__imp_sk_colorspace_new_srgb = GengoLibrary.ImportNow("sk_colorspace_new_srgb")
	__imp_sk_data_get_data = GengoLibrary.ImportNow("sk_data_get_data")
	__imp_sk_data_get_size = GengoLibrary.ImportNow("sk_data_get_size")
	__imp_sk_data_new_with_copy = GengoLibrary.ImportNow("sk_data_new_with_copy")
	__imp_sk_data_unref = GengoLibrary.ImportNow("sk_data_unref")
	__imp_sk_encode_jpeg = GengoLibrary.ImportNow("sk_encode_jpeg")
	__imp_sk_encode_png = GengoLibrary.ImportNow("sk_encode_png")
	__imp_sk_encode_webp = GengoLibrary.ImportNow("sk_encode_webp")
	__imp_sk_font_delete = GengoLibrary.ImportNow("sk_font_delete")
	__imp_sk_font_get_metrics = GengoLibrary.ImportNow("sk_font_get_metrics")
	__imp_sk_font_get_xpos = GengoLibrary.ImportNow("sk_font_get_xpos")
	__imp_sk_font_measure_text = GengoLibrary.ImportNow("sk_font_measure_text")
	__imp_sk_font_new_with_values = GengoLibrary.ImportNow("sk_font_new_with_values")
	__imp_sk_font_set_force_auto_hinting = GengoLibrary.ImportNow("sk_font_set_force_auto_hinting")
	__imp_sk_font_set_hinting = GengoLibrary.ImportNow("sk_font_set_hinting")
	__imp_sk_font_set_subpixel = GengoLibrary.ImportNow("sk_font_set_subpixel")
	__imp_sk_font_text_to_glyphs = GengoLibrary.ImportNow("sk_font_text_to_glyphs")
	__imp_sk_font_unichar_to_glyph = GengoLibrary.ImportNow("sk_font_unichar_to_glyph")
	__imp_sk_font_unichars_to_glyphs = GengoLibrary.ImportNow("sk_font_unichars_to_glyphs")
	__imp_sk_font_glyph_widths = GengoLibrary.ImportNow("sk_font_glyph_widths")
	__imp_sk_fontmgr_count_families = GengoLibrary.ImportNow("sk_fontmgr_count_families")
	__imp_sk_fontmgr_create_from_data = GengoLibrary.ImportNow("sk_fontmgr_create_from_data")
	__imp_sk_fontmgr_get_family_name = GengoLibrary.ImportNow("sk_fontmgr_get_family_name")
	__imp_sk_fontmgr_match_family = GengoLibrary.ImportNow("sk_fontmgr_match_family")
	__imp_sk_fontmgr_match_family_style = GengoLibrary.ImportNow("sk_fontmgr_match_family_style")
	__imp_sk_fontmgr_match_family_style_character = GengoLibrary.ImportNow("sk_fontmgr_match_family_style_character")
	__imp_sk_fontmgr_ref_default = GengoLibrary.ImportNow("sk_fontmgr_ref_default")
	__imp_sk_fontstyleset_create_typeface = GengoLibrary.ImportNow("sk_fontstyleset_create_typeface")
	__imp_sk_fontstyleset_get_count = GengoLibrary.ImportNow("sk_fontstyleset_get_count")
	__imp_sk_fontstyleset_get_style = GengoLibrary.ImportNow("sk_fontstyleset_get_style")
	__imp_sk_fontstyleset_match_style = GengoLibrary.ImportNow("sk_fontstyleset_match_style")
	__imp_sk_fontstyleset_unref = GengoLibrary.ImportNow("sk_fontstyleset_unref")
	__imp_sk_fontstyle_delete = GengoLibrary.ImportNow("sk_fontstyle_delete")
	__imp_sk_fontstyle_get_slant = GengoLibrary.ImportNow("sk_fontstyle_get_slant")
	__imp_sk_fontstyle_get_weight = GengoLibrary.ImportNow("sk_fontstyle_get_weight")
	__imp_sk_fontstyle_get_width = GengoLibrary.ImportNow("sk_fontstyle_get_width")
	__imp_sk_fontstyle_new = GengoLibrary.ImportNow("sk_fontstyle_new")
	__imp_sk_image_get_alpha_type = GengoLibrary.ImportNow("sk_image_get_alpha_type")
	__imp_sk_image_get_color_type = GengoLibrary.ImportNow("sk_image_get_color_type")
	__imp_sk_image_get_colorspace = GengoLibrary.ImportNow("sk_image_get_colorspace")
	__imp_sk_image_get_height = GengoLibrary.ImportNow("sk_image_get_height")
	__imp_sk_image_get_width = GengoLibrary.ImportNow("sk_image_get_width")
	__imp_sk_image_make_non_texture_image = GengoLibrary.ImportNow("sk_image_make_non_texture_image")
	__imp_sk_image_make_shader = GengoLibrary.ImportNow("sk_image_make_shader")
	__imp_sk_image_new_from_encoded = GengoLibrary.ImportNow("sk_image_new_from_encoded")
	__imp_sk_image_new_raster_data = GengoLibrary.ImportNow("sk_image_new_raster_data")
	__imp_sk_image_read_pixels = GengoLibrary.ImportNow("sk_image_read_pixels")
	__imp_sk_image_unref = GengoLibrary.ImportNow("sk_image_unref")
	__imp_sk_image_texture_from_image = GengoLibrary.ImportNow("sk_image_texture_from_image")
	__imp_sk_imagefilter_new_arithmetic = GengoLibrary.ImportNow("sk_imagefilter_new_arithmetic")
	__imp_sk_imagefilter_new_blur = GengoLibrary.ImportNow("sk_imagefilter_new_blur")
	__imp_sk_imagefilter_new_color_filter = GengoLibrary.ImportNow("sk_imagefilter_new_color_filter")
	__imp_sk_imagefilter_new_compose = GengoLibrary.ImportNow("sk_imagefilter_new_compose")
	__imp_sk_imagefilter_new_dilate = GengoLibrary.ImportNow("sk_imagefilter_new_dilate")
	__imp_sk_imagefilter_new_displacement_map_effect = GengoLibrary.ImportNow("sk_imagefilter_new_displacement_map_effect")
	__imp_sk_imagefilter_new_distant_lit_diffuse = GengoLibrary.ImportNow("sk_imagefilter_new_distant_lit_diffuse")
	__imp_sk_imagefilter_new_distant_lit_specular = GengoLibrary.ImportNow("sk_imagefilter_new_distant_lit_specular")
	__imp_sk_imagefilter_new_drop_shadow = GengoLibrary.ImportNow("sk_imagefilter_new_drop_shadow")
	__imp_sk_imagefilter_new_drop_shadow_only = GengoLibrary.ImportNow("sk_imagefilter_new_drop_shadow_only")
	__imp_sk_imagefilter_new_erode = GengoLibrary.ImportNow("sk_imagefilter_new_erode")
	__imp_sk_imagefilter_new_image_source = GengoLibrary.ImportNow("sk_imagefilter_new_image_source")
	__imp_sk_imagefilter_new_image_source_default = GengoLibrary.ImportNow("sk_imagefilter_new_image_source_default")
	__imp_sk_imagefilter_new_magnifier = GengoLibrary.ImportNow("sk_imagefilter_new_magnifier")
	__imp_sk_imagefilter_new_matrix_convolution = GengoLibrary.ImportNow("sk_imagefilter_new_matrix_convolution")
	__imp_sk_imagefilter_new_matrix_transform = GengoLibrary.ImportNow("sk_imagefilter_new_matrix_transform")
	__imp_sk_imagefilter_new_merge = GengoLibrary.ImportNow("sk_imagefilter_new_merge")
	__imp_sk_imagefilter_new_offset = GengoLibrary.ImportNow("sk_imagefilter_new_offset")
	__imp_sk_imagefilter_new_point_lit_diffuse = GengoLibrary.ImportNow("sk_imagefilter_new_point_lit_diffuse")
	__imp_sk_imagefilter_new_point_lit_specular = GengoLibrary.ImportNow("sk_imagefilter_new_point_lit_specular")
	__imp_sk_imagefilter_new_spot_lit_diffuse = GengoLibrary.ImportNow("sk_imagefilter_new_spot_lit_diffuse")
	__imp_sk_imagefilter_new_spot_lit_specular = GengoLibrary.ImportNow("sk_imagefilter_new_spot_lit_specular")
	__imp_sk_imagefilter_new_tile = GengoLibrary.ImportNow("sk_imagefilter_new_tile")
	__imp_sk_imagefilter_unref = GengoLibrary.ImportNow("sk_imagefilter_unref")
	__imp_sk_maskfilter_new_blur_with_flags = GengoLibrary.ImportNow("sk_maskfilter_new_blur_with_flags")
	__imp_sk_maskfilter_new_clip = GengoLibrary.ImportNow("sk_maskfilter_new_clip")
	__imp_sk_maskfilter_new_gamma = GengoLibrary.ImportNow("sk_maskfilter_new_gamma")
	__imp_sk_maskfilter_new_shader = GengoLibrary.ImportNow("sk_maskfilter_new_shader")
	__imp_sk_maskfilter_new_table = GengoLibrary.ImportNow("sk_maskfilter_new_table")
	__imp_sk_maskfilter_unref = GengoLibrary.ImportNow("sk_maskfilter_unref")
	__imp_sk_paint_equivalent = GengoLibrary.ImportNow("sk_paint_equivalent")
	__imp_sk_paint_clone = GengoLibrary.ImportNow("sk_paint_clone")
	__imp_sk_paint_delete = GengoLibrary.ImportNow("sk_paint_delete")
	__imp_sk_paint_get_blend_mode_or = GengoLibrary.ImportNow("sk_paint_get_blend_mode_or")
	__imp_sk_paint_get_color = GengoLibrary.ImportNow("sk_paint_get_color")
	__imp_sk_paint_get_colorfilter = GengoLibrary.ImportNow("sk_paint_get_colorfilter")
	__imp_sk_paint_get_fill_path = GengoLibrary.ImportNow("sk_paint_get_fill_path")
	__imp_sk_paint_get_imagefilter = GengoLibrary.ImportNow("sk_paint_get_imagefilter")
	__imp_sk_paint_get_maskfilter = GengoLibrary.ImportNow("sk_paint_get_maskfilter")
	__imp_sk_paint_get_path_effect = GengoLibrary.ImportNow("sk_paint_get_path_effect")
	__imp_sk_paint_get_shader = GengoLibrary.ImportNow("sk_paint_get_shader")
	__imp_sk_paint_get_stroke_cap = GengoLibrary.ImportNow("sk_paint_get_stroke_cap")
	__imp_sk_paint_get_stroke_join = GengoLibrary.ImportNow("sk_paint_get_stroke_join")
	__imp_sk_paint_get_stroke_miter = GengoLibrary.ImportNow("sk_paint_get_stroke_miter")
	__imp_sk_paint_get_stroke_width = GengoLibrary.ImportNow("sk_paint_get_stroke_width")
	__imp_sk_paint_get_style = GengoLibrary.ImportNow("sk_paint_get_style")
	__imp_sk_paint_is_antialias = GengoLibrary.ImportNow("sk_paint_is_antialias")
	__imp_sk_paint_is_dither = GengoLibrary.ImportNow("sk_paint_is_dither")
	__imp_sk_paint_new = GengoLibrary.ImportNow("sk_paint_new")
	__imp_sk_paint_reset = GengoLibrary.ImportNow("sk_paint_reset")
	__imp_sk_paint_set_antialias = GengoLibrary.ImportNow("sk_paint_set_antialias")
	__imp_sk_paint_set_blend_mode = GengoLibrary.ImportNow("sk_paint_set_blend_mode")
	__imp_sk_paint_set_color = GengoLibrary.ImportNow("sk_paint_set_color")
	__imp_sk_paint_set_colorfilter = GengoLibrary.ImportNow("sk_paint_set_colorfilter")
	__imp_sk_paint_set_dither = GengoLibrary.ImportNow("sk_paint_set_dither")
	__imp_sk_paint_set_imagefilter = GengoLibrary.ImportNow("sk_paint_set_imagefilter")
	__imp_sk_paint_set_maskfilter = GengoLibrary.ImportNow("sk_paint_set_maskfilter")
	__imp_sk_paint_set_path_effect = GengoLibrary.ImportNow("sk_paint_set_path_effect")
	__imp_sk_paint_set_shader = GengoLibrary.ImportNow("sk_paint_set_shader")
	__imp_sk_paint_set_stroke_cap = GengoLibrary.ImportNow("sk_paint_set_stroke_cap")
	__imp_sk_paint_set_stroke_join = GengoLibrary.ImportNow("sk_paint_set_stroke_join")
	__imp_sk_paint_set_stroke_miter = GengoLibrary.ImportNow("sk_paint_set_stroke_miter")
	__imp_sk_paint_set_stroke_width = GengoLibrary.ImportNow("sk_paint_set_stroke_width")
	__imp_sk_paint_set_style = GengoLibrary.ImportNow("sk_paint_set_style")
	__imp_sk_path_add_circle = GengoLibrary.ImportNow("sk_path_add_circle")
	__imp_sk_path_add_oval = GengoLibrary.ImportNow("sk_path_add_oval")
	__imp_sk_path_add_path = GengoLibrary.ImportNow("sk_path_add_path")
	__imp_sk_path_add_path_matrix = GengoLibrary.ImportNow("sk_path_add_path_matrix")
	__imp_sk_path_add_path_offset = GengoLibrary.ImportNow("sk_path_add_path_offset")
	__imp_sk_path_add_path_reverse = GengoLibrary.ImportNow("sk_path_add_path_reverse")
	__imp_sk_path_add_poly = GengoLibrary.ImportNow("sk_path_add_poly")
	__imp_sk_path_add_rect = GengoLibrary.ImportNow("sk_path_add_rect")
	__imp_sk_path_add_rounded_rect = GengoLibrary.ImportNow("sk_path_add_rounded_rect")
	__imp_sk_path_arc_to = GengoLibrary.ImportNow("sk_path_arc_to")
	__imp_sk_path_arc_to_with_oval = GengoLibrary.ImportNow("sk_path_arc_to_with_oval")
	__imp_sk_path_arc_to_with_points = GengoLibrary.ImportNow("sk_path_arc_to_with_points")
	__imp_sk_path_clone = GengoLibrary.ImportNow("sk_path_clone")
	__imp_sk_path_close = GengoLibrary.ImportNow("sk_path_close")
	__imp_sk_path_compute_tight_bounds = GengoLibrary.ImportNow("sk_path_compute_tight_bounds")
	__imp_sk_path_conic_to = GengoLibrary.ImportNow("sk_path_conic_to")
	__imp_sk_path_contains = GengoLibrary.ImportNow("sk_path_contains")
	__imp_sk_path_count_points = GengoLibrary.ImportNow("sk_path_count_points")
	__imp_sk_path_cubic_to = GengoLibrary.ImportNow("sk_path_cubic_to")
	__imp_sk_path_delete = GengoLibrary.ImportNow("sk_path_delete")
	__imp_sk_path_get_bounds = GengoLibrary.ImportNow("sk_path_get_bounds")
	__imp_sk_path_get_points = GengoLibrary.ImportNow("sk_path_get_points")
	__imp_sk_path_get_filltype = GengoLibrary.ImportNow("sk_path_get_filltype")
	__imp_sk_path_get_last_point = GengoLibrary.ImportNow("sk_path_get_last_point")
	__imp_sk_path_line_to = GengoLibrary.ImportNow("sk_path_line_to")
	__imp_sk_path_move_to = GengoLibrary.ImportNow("sk_path_move_to")
	__imp_sk_path_new = GengoLibrary.ImportNow("sk_path_new")
	__imp_sk_path_parse_svg_string = GengoLibrary.ImportNow("sk_path_parse_svg_string")
	__imp_sk_path_quad_to = GengoLibrary.ImportNow("sk_path_quad_to")
	__imp_sk_path_rarc_to = GengoLibrary.ImportNow("sk_path_rarc_to")
	__imp_sk_path_rconic_to = GengoLibrary.ImportNow("sk_path_rconic_to")
	__imp_sk_path_rcubic_to = GengoLibrary.ImportNow("sk_path_rcubic_to")
	__imp_sk_path_reset = GengoLibrary.ImportNow("sk_path_reset")
	__imp_sk_path_rewind = GengoLibrary.ImportNow("sk_path_rewind")
	__imp_sk_path_rline_to = GengoLibrary.ImportNow("sk_path_rline_to")
	__imp_sk_path_rmove_to = GengoLibrary.ImportNow("sk_path_rmove_to")
	__imp_sk_path_set_filltype = GengoLibrary.ImportNow("sk_path_set_filltype")
	__imp_sk_path_to_svg_string = GengoLibrary.ImportNow("sk_path_to_svg_string")
	__imp_sk_path_transform = GengoLibrary.ImportNow("sk_path_transform")
	__imp_sk_path_transform_to_dest = GengoLibrary.ImportNow("sk_path_transform_to_dest")
	__imp_sk_path_effect_create_1d_path = GengoLibrary.ImportNow("sk_path_effect_create_1d_path")
	__imp_sk_path_effect_create_2d_line = GengoLibrary.ImportNow("sk_path_effect_create_2d_line")
	__imp_sk_path_effect_create_2d_path = GengoLibrary.ImportNow("sk_path_effect_create_2d_path")
	__imp_sk_path_effect_create_compose = GengoLibrary.ImportNow("sk_path_effect_create_compose")
	__imp_sk_path_effect_create_corner = GengoLibrary.ImportNow("sk_path_effect_create_corner")
	__imp_sk_path_effect_create_dash = GengoLibrary.ImportNow("sk_path_effect_create_dash")
	__imp_sk_path_effect_create_discrete = GengoLibrary.ImportNow("sk_path_effect_create_discrete")
	__imp_sk_path_effect_create_sum = GengoLibrary.ImportNow("sk_path_effect_create_sum")
	__imp_sk_path_effect_create_trim = GengoLibrary.ImportNow("sk_path_effect_create_trim")
	__imp_sk_path_effect_unref = GengoLibrary.ImportNow("sk_path_effect_unref")
	__imp_sk_path_op = GengoLibrary.ImportNow("sk_path_op")
	__imp_sk_path_simplify = GengoLibrary.ImportNow("sk_path_simplify")
	__imp_sk_opbuilder_add = GengoLibrary.ImportNow("sk_opbuilder_add")
	__imp_sk_opbuilder_destroy = GengoLibrary.ImportNow("sk_opbuilder_destroy")
	__imp_sk_opbuilder_new = GengoLibrary.ImportNow("sk_opbuilder_new")
	__imp_sk_opbuilder_resolve = GengoLibrary.ImportNow("sk_opbuilder_resolve")
	__imp_sk_shader_new_blend = GengoLibrary.ImportNow("sk_shader_new_blend")
	__imp_sk_shader_new_color = GengoLibrary.ImportNow("sk_shader_new_color")
	__imp_sk_shader_new_linear_gradient = GengoLibrary.ImportNow("sk_shader_new_linear_gradient")
	__imp_sk_shader_new_perlin_noise_fractal_noise = GengoLibrary.ImportNow("sk_shader_new_perlin_noise_fractal_noise")
	__imp_sk_shader_new_perlin_noise_turbulence = GengoLibrary.ImportNow("sk_shader_new_perlin_noise_turbulence")
	__imp_sk_shader_new_radial_gradient = GengoLibrary.ImportNow("sk_shader_new_radial_gradient")
	__imp_sk_shader_new_sweep_gradient = GengoLibrary.ImportNow("sk_shader_new_sweep_gradient")
	__imp_sk_shader_new_two_point_conical_gradient = GengoLibrary.ImportNow("sk_shader_new_two_point_conical_gradient")
	__imp_sk_shader_unref = GengoLibrary.ImportNow("sk_shader_unref")
	__imp_sk_shader_with_color_filter = GengoLibrary.ImportNow("sk_shader_with_color_filter")
	__imp_sk_shader_with_local_matrix = GengoLibrary.ImportNow("sk_shader_with_local_matrix")
	__imp_sk_string_new = GengoLibrary.ImportNow("sk_string_new")
	__imp_sk_string_new_empty = GengoLibrary.ImportNow("sk_string_new_empty")
	__imp_sk_string_delete = GengoLibrary.ImportNow("sk_string_delete")
	__imp_sk_string_get_c_str = GengoLibrary.ImportNow("sk_string_get_c_str")
	__imp_sk_string_get_size = GengoLibrary.ImportNow("sk_string_get_size")
	__imp_sk_surface_make_raster_direct = GengoLibrary.ImportNow("sk_surface_make_raster_direct")
	__imp_sk_surface_make_raster_n32_premul = GengoLibrary.ImportNow("sk_surface_make_raster_n32_premul")
	__imp_sk_surface_make_surface = GengoLibrary.ImportNow("sk_surface_make_surface")
	__imp_sk_surface_make_image_snapshot = GengoLibrary.ImportNow("sk_surface_make_image_snapshot")
	__imp_sk_surface_get_canvas = GengoLibrary.ImportNow("sk_surface_get_canvas")
	__imp_sk_surface_new_backend_render_target = GengoLibrary.ImportNow("sk_surface_new_backend_render_target")
	__imp_sk_surface_unref = GengoLibrary.ImportNow("sk_surface_unref")
	__imp_sk_surfaceprops_new = GengoLibrary.ImportNow("sk_surfaceprops_new")
	__imp_sk_surfaceprops_delete = GengoLibrary.ImportNow("sk_surfaceprops_delete")
	__imp_sk_textblob_builder_alloc_run = GengoLibrary.ImportNow("sk_textblob_builder_alloc_run")
	__imp_sk_textblob_builder_alloc_run_pos = GengoLibrary.ImportNow("sk_textblob_builder_alloc_run_pos")
	__imp_sk_textblob_builder_alloc_run_pos_h = GengoLibrary.ImportNow("sk_textblob_builder_alloc_run_pos_h")
	__imp_sk_textblob_builder_delete = GengoLibrary.ImportNow("sk_textblob_builder_delete")
	__imp_sk_textblob_builder_make = GengoLibrary.ImportNow("sk_textblob_builder_make")
	__imp_sk_textblob_builder_new = GengoLibrary.ImportNow("sk_textblob_builder_new")
	__imp_sk_textblob_get_bounds = GengoLibrary.ImportNow("sk_textblob_get_bounds")
	__imp_sk_textblob_get_intercepts = GengoLibrary.ImportNow("sk_textblob_get_intercepts")
	__imp_sk_textblob_make_from_text = GengoLibrary.ImportNow("sk_textblob_make_from_text")
	__imp_sk_textblob_unref = GengoLibrary.ImportNow("sk_textblob_unref")
	__imp_sk_typeface_get_family_name = GengoLibrary.ImportNow("sk_typeface_get_family_name")
	__imp_sk_typeface_get_fontstyle = GengoLibrary.ImportNow("sk_typeface_get_fontstyle")
	__imp_sk_typeface_get_units_per_em = GengoLibrary.ImportNow("sk_typeface_get_units_per_em")
	__imp_sk_typeface_is_fixed_pitch = GengoLibrary.ImportNow("sk_typeface_is_fixed_pitch")
	__imp_sk_typeface_unref = GengoLibrary.ImportNow("sk_typeface_unref")
	__imp_sk_dynamic_memory_wstream_new = GengoLibrary.ImportNow("sk_dynamic_memory_wstream_new")
	__imp_sk_dynamic_memory_wstream_as_wstream = GengoLibrary.ImportNow("sk_dynamic_memory_wstream_as_wstream")
	__imp_sk_dynamic_memory_wstream_write = GengoLibrary.ImportNow("sk_dynamic_memory_wstream_write")
	__imp_sk_dynamic_memory_wstream_bytes_written = GengoLibrary.ImportNow("sk_dynamic_memory_wstream_bytes_written")
	__imp_sk_dynamic_memory_wstream_read = GengoLibrary.ImportNow("sk_dynamic_memory_wstream_read")
	__imp_sk_dynamic_memory_wstream_delete = GengoLibrary.ImportNow("sk_dynamic_memory_wstream_delete")
	__imp_sk_file_wstream_new = GengoLibrary.ImportNow("sk_file_wstream_new")
	__imp_sk_file_wstream_as_wstream = GengoLibrary.ImportNow("sk_file_wstream_as_wstream")
	__imp_sk_file_wstream_write = GengoLibrary.ImportNow("sk_file_wstream_write")
	__imp_sk_file_wstream_bytes_written = GengoLibrary.ImportNow("sk_file_wstream_bytes_written")
	__imp_sk_file_wstream_flush = GengoLibrary.ImportNow("sk_file_wstream_flush")
	__imp_sk_file_wstream_delete = GengoLibrary.ImportNow("sk_file_wstream_delete")
	__imp_sk_document_begin_page = GengoLibrary.ImportNow("sk_document_begin_page")
	__imp_sk_document_end_page = GengoLibrary.ImportNow("sk_document_end_page")
	__imp_sk_document_close = GengoLibrary.ImportNow("sk_document_close")
	__imp_sk_document_abort = GengoLibrary.ImportNow("sk_document_abort")
	__imp_sk_document_make_pdf = GengoLibrary.ImportNow("sk_document_make_pdf")
	__imp_register_image_codecs = GengoLibrary.ImportNow("register_image_codecs")
	bindlib.Validate((*SkTextBlobBuilderRunBufferT)(nil), 32, 8, "Glyphs", 0, "Pos", 8, "Utf8text", 16, "Clusters", 24)
	bindlib.Validate((*SkIpointT)(nil), 8, 4, "X", 0, "Y", 4)
	bindlib.Validate((*SkPointT)(nil), 8, 4, "X", 0, "Y", 4)
	bindlib.Validate((*SkPoint3T)(nil), 12, 4, "X", 0, "Y", 4, "Z", 8)
	bindlib.Validate((*SkIsizeT)(nil), 8, 4, "W", 0, "H", 4)
	bindlib.Validate((*SkIrectT)(nil), 16, 4, "Left", 0, "Top", 4, "Right", 8, "Bottom", 12)
	bindlib.Validate((*SkRectT)(nil), 16, 4, "Left", 0, "Top", 4, "Right", 8, "Bottom", 12)
	bindlib.Validate((*SkMatrixT)(nil), 36, 4, "scaleX", 0, "skewX", 4, "transX", 8, "skewY", 12, "scaleY", 16, "transY", 20, "Persp0", 24, "Persp1", 28, "Persp2", 32)
	bindlib.Validate((*GrGlFramebufferinfoT)(nil), 12, 4, "fFBOID", 0, "fFormat", 4, "fProtected", 8)
	bindlib.Validate((*SkHighContrastConfigT)(nil), 12, 4, "Grayscale", 0, "invertStyle", 4, "Contrast", 8)
	bindlib.Validate((*SkImageInfoT)(nil), 24, 8, "colorSpace", 0, "colorType", 8, "alphaType", 12, "Width", 16, "Height", 20)
	bindlib.Validate((*SkCubicResamplerT)(nil), 8, 4, "B", 0, "C", 4)
	bindlib.Validate((*SkSamplingOptionsT)(nil), 24, 4, "maxAniso", 0, "useCubic", 4, "Cubic", 8, "Filter", 16, "Mipmap", 20)
	bindlib.Validate((*SkFontMetricsT)(nil), 64, 4, "Flags", 0, "Top", 4, "Ascent", 8, "Descent", 12, "Bottom", 16, "Leading", 20, "avgCharWidth", 24, "maxCharWidth", 28, "xMin", 32, "xMax", 36, "xHeight", 40, "capHeight", 44, "underlineThickness", 48, "underlinePosition", 52, "strikeoutThickness", 56, "strikeoutPosition", 60)
	bindlib.Validate((*SkDateTimeT)(nil), 10, 2, "timeZoneMinutes", 0, "Year", 2, "Month", 4, "dayOfWeek", 5, "Day", 6, "Hour", 7, "Minute", 8, "Second", 9)
	bindlib.Validate((*SkMetadataT)(nil), 80, 8, "Title", 0, "Author", 8, "Subject", 16, "Keywords", 24, "Creator", 32, "Producer", 40, "Creation", 48, "Modified", 58, "rasterDPI", 68, "Unused", 72, "encodingQuality", 76)
}
func GrBackendrendertargetNewGl(width int32, height int32, samples int32, stencils int32, glInfo *GrGlFramebufferinfoT) unsafe.Pointer {
	__res := bindlib.CCall5(__imp_gr_backendrendertarget_new_gl.Addr(), bindlib.MarshallSyscall(width), bindlib.MarshallSyscall(height), bindlib.MarshallSyscall(samples), bindlib.MarshallSyscall(stencils), bindlib.MarshallSyscall(glInfo))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_gr_backendrendertarget_delete bindlib.PreloadProc

func GrBackendrendertargetDelete(rendertarget unsafe.Pointer) {
	bindlib.CCall1(__imp_gr_backendrendertarget_delete.Addr(), bindlib.MarshallSyscall(rendertarget))
}

var __imp_gr_direct_context_make_gl bindlib.PreloadProc

func GrDirectContextMakeGl(glInterface unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_gr_direct_context_make_gl.Addr(), bindlib.MarshallSyscall(glInterface))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_gr_direct_context_abandon_context bindlib.PreloadProc

func GrDirectContextAbandonContext(context unsafe.Pointer) {
	bindlib.CCall1(__imp_gr_direct_context_abandon_context.Addr(), bindlib.MarshallSyscall(context))
}

var __imp_gr_direct_context_delete bindlib.PreloadProc

func GrDirectContextDelete(context unsafe.Pointer) {
	bindlib.CCall1(__imp_gr_direct_context_delete.Addr(), bindlib.MarshallSyscall(context))
}

var __imp_gr_direct_context_flush_and_submit bindlib.PreloadProc

func GrDirectContextFlushAndSubmit(context unsafe.Pointer, syncCPU bool) {
	bindlib.CCall2(__imp_gr_direct_context_flush_and_submit.Addr(), bindlib.MarshallSyscall(context), bindlib.MarshallSyscall(syncCPU))
}

var __imp_gr_direct_context_release_resources_and_abandon_context bindlib.PreloadProc

func GrDirectContextReleaseResourcesAndAbandonContext(context unsafe.Pointer) {
	bindlib.CCall1(__imp_gr_direct_context_release_resources_and_abandon_context.Addr(), bindlib.MarshallSyscall(context))
}

var __imp_gr_direct_context_reset bindlib.PreloadProc

func GrDirectContextReset(context unsafe.Pointer) {
	bindlib.CCall1(__imp_gr_direct_context_reset.Addr(), bindlib.MarshallSyscall(context))
}

var __imp_gr_direct_context_reset_gl_texture_bindings bindlib.PreloadProc

func GrDirectContextResetGlTextureBindings(context unsafe.Pointer) {
	bindlib.CCall1(__imp_gr_direct_context_reset_gl_texture_bindings.Addr(), bindlib.MarshallSyscall(context))
}

var __imp_gr_direct_context_unref bindlib.PreloadProc

func GrDirectContextUnref(context unsafe.Pointer) {
	bindlib.CCall1(__imp_gr_direct_context_unref.Addr(), bindlib.MarshallSyscall(context))
}

var __imp_gr_glinterface_create_native_interface bindlib.PreloadProc

func GrGlinterfaceCreateNativeInterface() unsafe.Pointer {
	__res := bindlib.CCall0(__imp_gr_glinterface_create_native_interface.Addr())
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_gr_glinterface_unref bindlib.PreloadProc

func GrGlinterfaceUnref(intf unsafe.Pointer) {
	bindlib.CCall1(__imp_gr_glinterface_unref.Addr(), bindlib.MarshallSyscall(intf))
}

var __imp_sk_canvas_get_surface bindlib.PreloadProc

func SkCanvasGetSurface(canvas unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_canvas_get_surface.Addr(), bindlib.MarshallSyscall(canvas))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_canvas_clear bindlib.PreloadProc

func SkCanvasClear(canvas unsafe.Pointer, color SkColorT) {
	bindlib.CCall2(__imp_sk_canvas_clear.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(color))
}

var __imp_sk_canvas_clip_path_with_operation bindlib.PreloadProc

func SkCanvasClipPathWithOperation(t unsafe.Pointer, crect unsafe.Pointer, op SkClipOpT, doAA bool) {
	bindlib.CCall4(__imp_sk_canvas_clip_path_with_operation.Addr(), bindlib.MarshallSyscall(t), bindlib.MarshallSyscall(crect), bindlib.MarshallSyscall(op), bindlib.MarshallSyscall(doAA))
}

var __imp_sk_canvas_clip_rect_with_operation bindlib.PreloadProc

func SkCanvasClipRectWithOperation(t unsafe.Pointer, crect *SkRectT, op SkClipOpT, doAA bool) {
	bindlib.CCall4(__imp_sk_canvas_clip_rect_with_operation.Addr(), bindlib.MarshallSyscall(t), bindlib.MarshallSyscall(crect), bindlib.MarshallSyscall(op), bindlib.MarshallSyscall(doAA))
}

var __imp_sk_canvas_concat bindlib.PreloadProc

func SkCanvasConcat(canvas unsafe.Pointer, matrix *SkMatrixT) {
	bindlib.CCall2(__imp_sk_canvas_concat.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(matrix))
}

var __imp_sk_canvas_draw_arc bindlib.PreloadProc

func SkCanvasDrawArc(canvas unsafe.Pointer, oval *SkRectT, startAngle float32, sweepAngle float32, useCenter bool, paint unsafe.Pointer) {
	bindlib.CCall6(__imp_sk_canvas_draw_arc.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(oval), bindlib.MarshallSyscall(startAngle), bindlib.MarshallSyscall(sweepAngle), bindlib.MarshallSyscall(useCenter), bindlib.MarshallSyscall(paint))
}

var __imp_sk_canvas_draw_circle bindlib.PreloadProc

func SkCanvasDrawCircle(canvas unsafe.Pointer, cx float32, cy float32, rad float32, cpaint unsafe.Pointer) {
	bindlib.CCall5(__imp_sk_canvas_draw_circle.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(cx), bindlib.MarshallSyscall(cy), bindlib.MarshallSyscall(rad), bindlib.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_color bindlib.PreloadProc

func SkCanvasDrawColor(canvas unsafe.Pointer, color SkColorT, mode SkBlendModeT) {
	bindlib.CCall3(__imp_sk_canvas_draw_color.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(color), bindlib.MarshallSyscall(mode))
}

var __imp_sk_canvas_draw_image_nine bindlib.PreloadProc

func SkCanvasDrawImageNine(t unsafe.Pointer, image unsafe.Pointer, center *SkIrectT, dst *SkRectT, filter SkFilterModeT, paint unsafe.Pointer) {
	bindlib.CCall6(__imp_sk_canvas_draw_image_nine.Addr(), bindlib.MarshallSyscall(t), bindlib.MarshallSyscall(image), bindlib.MarshallSyscall(center), bindlib.MarshallSyscall(dst), bindlib.MarshallSyscall(filter), bindlib.MarshallSyscall(paint))
}

var __imp_sk_canvas_draw_image_rect bindlib.PreloadProc

func SkCanvasDrawImageRect(canvas unsafe.Pointer, cimage unsafe.Pointer, csrcR *SkRectT, cdstR *SkRectT, samplingOptions *SkSamplingOptionsT, cpaint unsafe.Pointer, constraint SkSrcRectConstraintT) {
	bindlib.CCall7(__imp_sk_canvas_draw_image_rect.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(cimage), bindlib.MarshallSyscall(csrcR), bindlib.MarshallSyscall(cdstR), bindlib.MarshallSyscall(samplingOptions), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(constraint))
}

var __imp_sk_canvas_draw_line bindlib.PreloadProc

func SkCanvasDrawLine(canvas unsafe.Pointer, x0 float32, y0 float32, x1 float32, y1 float32, cpaint unsafe.Pointer) {
	bindlib.CCall6(__imp_sk_canvas_draw_line.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(x0), bindlib.MarshallSyscall(y0), bindlib.MarshallSyscall(x1), bindlib.MarshallSyscall(y1), bindlib.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_oval bindlib.PreloadProc

func SkCanvasDrawOval(canvas unsafe.Pointer, crect *SkRectT, cpaint unsafe.Pointer) {
	bindlib.CCall3(__imp_sk_canvas_draw_oval.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(crect), bindlib.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_paint bindlib.PreloadProc

func SkCanvasDrawPaint(canvas unsafe.Pointer, cpaint unsafe.Pointer) {
	bindlib.CCall2(__imp_sk_canvas_draw_paint.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_path bindlib.PreloadProc

func SkCanvasDrawPath(canvas unsafe.Pointer, cpath unsafe.Pointer, cpaint unsafe.Pointer) {
	bindlib.CCall3(__imp_sk_canvas_draw_path.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_point bindlib.PreloadProc

func SkCanvasDrawPoint(canvas unsafe.Pointer, x float32, y float32, cpaint unsafe.Pointer) {
	bindlib.CCall4(__imp_sk_canvas_draw_point.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(x), bindlib.MarshallSyscall(y), bindlib.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_points bindlib.PreloadProc

func SkCanvasDrawPoints(canvas unsafe.Pointer, pointMode SkPointModeT, count uint, points *SkPointT, cpaint unsafe.Pointer) {
	bindlib.CCall5(__imp_sk_canvas_draw_points.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(pointMode), bindlib.MarshallSyscall(count), bindlib.MarshallSyscall(points), bindlib.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_rect bindlib.PreloadProc

func SkCanvasDrawRect(canvas unsafe.Pointer, crect *SkRectT, cpaint unsafe.Pointer) {
	bindlib.CCall3(__imp_sk_canvas_draw_rect.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(crect), bindlib.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_round_rect bindlib.PreloadProc

func SkCanvasDrawRoundRect(canvas unsafe.Pointer, crect *SkRectT, rx float32, ry float32, cpaint unsafe.Pointer) {
	bindlib.CCall5(__imp_sk_canvas_draw_round_rect.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(crect), bindlib.MarshallSyscall(rx), bindlib.MarshallSyscall(ry), bindlib.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_simple_text bindlib.PreloadProc

func SkCanvasDrawSimpleText(canvas unsafe.Pointer, text unsafe.Pointer, byte_length uint, encoding SkTextEncodingT, x float32, y float32, cfont unsafe.Pointer, cpaint unsafe.Pointer) {
	bindlib.CCall8(__imp_sk_canvas_draw_simple_text.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(text), bindlib.MarshallSyscall(byte_length), bindlib.MarshallSyscall(encoding), bindlib.MarshallSyscall(x), bindlib.MarshallSyscall(y), bindlib.MarshallSyscall(cfont), bindlib.MarshallSyscall(cpaint))
}

var __imp_sk_canvas_draw_text_blob bindlib.PreloadProc

func SkCanvasDrawTextBlob(canvas unsafe.Pointer, text unsafe.Pointer, x float32, y float32, paint unsafe.Pointer) {
	bindlib.CCall5(__imp_sk_canvas_draw_text_blob.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(text), bindlib.MarshallSyscall(x), bindlib.MarshallSyscall(y), bindlib.MarshallSyscall(paint))
}

var __imp_sk_canvas_get_local_clip_bounds bindlib.PreloadProc

func SkCanvasGetLocalClipBounds(canvas unsafe.Pointer, cbounds *SkRectT) bool {
	__res := bindlib.CCall2(__imp_sk_canvas_get_local_clip_bounds.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(cbounds))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_canvas_get_save_count bindlib.PreloadProc

func SkCanvasGetSaveCount(canvas unsafe.Pointer) int32 {
	__res := bindlib.CCall1(__imp_sk_canvas_get_save_count.Addr(), bindlib.MarshallSyscall(canvas))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_canvas_get_total_matrix bindlib.PreloadProc

func SkCanvasGetTotalMatrix(canvas unsafe.Pointer, matrix *SkMatrixT) {
	bindlib.CCall2(__imp_sk_canvas_get_total_matrix.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(matrix))
}

var __imp_sk_canvas_is_clip_empty bindlib.PreloadProc

func SkCanvasIsClipEmpty(canvas unsafe.Pointer) bool {
	__res := bindlib.CCall1(__imp_sk_canvas_is_clip_empty.Addr(), bindlib.MarshallSyscall(canvas))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_canvas_is_clip_rect bindlib.PreloadProc

func SkCanvasIsClipRect(canvas unsafe.Pointer) bool {
	__res := bindlib.CCall1(__imp_sk_canvas_is_clip_rect.Addr(), bindlib.MarshallSyscall(canvas))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_canvas_quick_reject_path bindlib.PreloadProc

func SkCanvasQuickRejectPath(canvas unsafe.Pointer, path unsafe.Pointer) bool {
	__res := bindlib.CCall2(__imp_sk_canvas_quick_reject_path.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(path))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_canvas_quick_reject_rect bindlib.PreloadProc

func SkCanvasQuickRejectRect(canvas unsafe.Pointer, rect *SkRectT) bool {
	__res := bindlib.CCall2(__imp_sk_canvas_quick_reject_rect.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(rect))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_canvas_reset_matrix bindlib.PreloadProc

func SkCanvasResetMatrix(canvas unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_canvas_reset_matrix.Addr(), bindlib.MarshallSyscall(canvas))
}

var __imp_sk_canvas_restore bindlib.PreloadProc

func SkCanvasRestore(canvas unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_canvas_restore.Addr(), bindlib.MarshallSyscall(canvas))
}

var __imp_sk_canvas_restore_to_count bindlib.PreloadProc

func SkCanvasRestoreToCount(canvas unsafe.Pointer, saveCount int32) {
	bindlib.CCall2(__imp_sk_canvas_restore_to_count.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(saveCount))
}

var __imp_sk_canvas_rotate_radians bindlib.PreloadProc

func SkCanvasRotateRadians(canvas unsafe.Pointer, radians float32) {
	bindlib.CCall2(__imp_sk_canvas_rotate_radians.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(radians))
}

var __imp_sk_canvas_save bindlib.PreloadProc

func SkCanvasSave(canvas unsafe.Pointer) int32 {
	__res := bindlib.CCall1(__imp_sk_canvas_save.Addr(), bindlib.MarshallSyscall(canvas))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_canvas_save_layer bindlib.PreloadProc

func SkCanvasSaveLayer(canvas unsafe.Pointer, crect *SkRectT, cpaint unsafe.Pointer) int32 {
	__res := bindlib.CCall3(__imp_sk_canvas_save_layer.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(crect), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_canvas_save_layer_alpha bindlib.PreloadProc

func SkCanvasSaveLayerAlpha(canvas unsafe.Pointer, crect *SkRectT, alpha uint8) int32 {
	__res := bindlib.CCall3(__imp_sk_canvas_save_layer_alpha.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(crect), bindlib.MarshallSyscall(alpha))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_canvas_scale bindlib.PreloadProc

func SkCanvasScale(canvas unsafe.Pointer, sx float32, sy float32) {
	bindlib.CCall3(__imp_sk_canvas_scale.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(sx), bindlib.MarshallSyscall(sy))
}

var __imp_sk_canvas_set_matrix bindlib.PreloadProc

func SkCanvasSetMatrix(canvas unsafe.Pointer, matrix *SkMatrixT) {
	bindlib.CCall2(__imp_sk_canvas_set_matrix.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(matrix))
}

var __imp_sk_canvas_skew bindlib.PreloadProc

func SkCanvasSkew(canvas unsafe.Pointer, sx float32, sy float32) {
	bindlib.CCall3(__imp_sk_canvas_skew.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(sx), bindlib.MarshallSyscall(sy))
}

var __imp_sk_canvas_translate bindlib.PreloadProc

func SkCanvasTranslate(canvas unsafe.Pointer, dx float32, dy float32) {
	bindlib.CCall3(__imp_sk_canvas_translate.Addr(), bindlib.MarshallSyscall(canvas), bindlib.MarshallSyscall(dx), bindlib.MarshallSyscall(dy))
}

var __imp_sk_colorfilter_new_color_matrix bindlib.PreloadProc

func SkColorfilterNewColorMatrix(array *float32) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_colorfilter_new_color_matrix.Addr(), bindlib.MarshallSyscall(array))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_colorfilter_new_compose bindlib.PreloadProc

func SkColorfilterNewCompose(outer unsafe.Pointer, inner unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_colorfilter_new_compose.Addr(), bindlib.MarshallSyscall(outer), bindlib.MarshallSyscall(inner))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_colorfilter_new_high_contrast bindlib.PreloadProc

func SkColorfilterNewHighContrast(config *SkHighContrastConfigT) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_colorfilter_new_high_contrast.Addr(), bindlib.MarshallSyscall(config))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_colorfilter_new_lighting bindlib.PreloadProc

func SkColorfilterNewLighting(mul SkColorT, add SkColorT) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_colorfilter_new_lighting.Addr(), bindlib.MarshallSyscall(mul), bindlib.MarshallSyscall(add))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_colorfilter_new_luma_color bindlib.PreloadProc

func SkColorfilterNewLumaColor() unsafe.Pointer {
	__res := bindlib.CCall0(__imp_sk_colorfilter_new_luma_color.Addr())
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_colorfilter_new_mode bindlib.PreloadProc

func SkColorfilterNewMode(c SkColorT, mode SkBlendModeT) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_colorfilter_new_mode.Addr(), bindlib.MarshallSyscall(c), bindlib.MarshallSyscall(mode))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_colorfilter_unref bindlib.PreloadProc

func SkColorfilterUnref(filter unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_colorfilter_unref.Addr(), bindlib.MarshallSyscall(filter))
}

var __imp_sk_colorspace_new_srgb bindlib.PreloadProc

func SkColorspaceNewSrgb() unsafe.Pointer {
	__res := bindlib.CCall0(__imp_sk_colorspace_new_srgb.Addr())
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_data_get_data bindlib.PreloadProc

func SkDataGetData(data unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_data_get_data.Addr(), bindlib.MarshallSyscall(data))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_data_get_size bindlib.PreloadProc

func SkDataGetSize(data unsafe.Pointer) uint {
	__res := bindlib.CCall1(__imp_sk_data_get_size.Addr(), bindlib.MarshallSyscall(data))
	return bindlib.UnmarshallSyscall[uint](__res)
}

var __imp_sk_data_new_with_copy bindlib.PreloadProc

func SkDataNewWithCopy(src unsafe.Pointer, length uint) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_data_new_with_copy.Addr(), bindlib.MarshallSyscall(src), bindlib.MarshallSyscall(length))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_data_unref bindlib.PreloadProc

func SkDataUnref(data unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_data_unref.Addr(), bindlib.MarshallSyscall(data))
}

var __imp_sk_encode_jpeg bindlib.PreloadProc

func SkEncodeJpeg(ctx unsafe.Pointer, img unsafe.Pointer, quality int32) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_encode_jpeg.Addr(), bindlib.MarshallSyscall(ctx), bindlib.MarshallSyscall(img), bindlib.MarshallSyscall(quality))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_encode_png bindlib.PreloadProc

func SkEncodePng(ctx unsafe.Pointer, img unsafe.Pointer, compressionLevel int32) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_encode_png.Addr(), bindlib.MarshallSyscall(ctx), bindlib.MarshallSyscall(img), bindlib.MarshallSyscall(compressionLevel))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_encode_webp bindlib.PreloadProc

func SkEncodeWebp(ctx unsafe.Pointer, img unsafe.Pointer, quality float32, lossy bool) unsafe.Pointer {
	__res := bindlib.CCall4(__imp_sk_encode_webp.Addr(), bindlib.MarshallSyscall(ctx), bindlib.MarshallSyscall(img), bindlib.MarshallSyscall(quality), bindlib.MarshallSyscall(lossy))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_font_delete bindlib.PreloadProc

func SkFontDelete(font unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_font_delete.Addr(), bindlib.MarshallSyscall(font))
}

var __imp_sk_font_get_metrics bindlib.PreloadProc

func SkFontGetMetrics(font unsafe.Pointer, metrics *SkFontMetricsT) float32 {
	__res := bindlib.CCall2(__imp_sk_font_get_metrics.Addr(), bindlib.MarshallSyscall(font), bindlib.MarshallSyscall(metrics))
	return bindlib.UnmarshallSyscall[float32](__res)
}

var __imp_sk_font_get_xpos bindlib.PreloadProc

func SkFontGetXpos(font unsafe.Pointer, glyphs *uint16, count int32, xpos *float32, origin float32) {
	bindlib.CCall5(__imp_sk_font_get_xpos.Addr(), bindlib.MarshallSyscall(font), bindlib.MarshallSyscall(glyphs), bindlib.MarshallSyscall(count), bindlib.MarshallSyscall(xpos), bindlib.MarshallSyscall(origin))
}

var __imp_sk_font_measure_text bindlib.PreloadProc

func SkFontMeasureText(font unsafe.Pointer, text unsafe.Pointer, byteLength uint, encoding SkTextEncodingT, bounds *SkRectT, paint unsafe.Pointer) float32 {
	__res := bindlib.CCall6(__imp_sk_font_measure_text.Addr(), bindlib.MarshallSyscall(font), bindlib.MarshallSyscall(text), bindlib.MarshallSyscall(byteLength), bindlib.MarshallSyscall(encoding), bindlib.MarshallSyscall(bounds), bindlib.MarshallSyscall(paint))
	return bindlib.UnmarshallSyscall[float32](__res)
}

var __imp_sk_font_new_with_values bindlib.PreloadProc

func SkFontNewWithValues(typeface unsafe.Pointer, size float32, scaleX float32, skewX float32) unsafe.Pointer {
	__res := bindlib.CCall4(__imp_sk_font_new_with_values.Addr(), bindlib.MarshallSyscall(typeface), bindlib.MarshallSyscall(size), bindlib.MarshallSyscall(scaleX), bindlib.MarshallSyscall(skewX))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_font_set_force_auto_hinting bindlib.PreloadProc

func SkFontSetForceAutoHinting(font unsafe.Pointer, value bool) {
	bindlib.CCall2(__imp_sk_font_set_force_auto_hinting.Addr(), bindlib.MarshallSyscall(font), bindlib.MarshallSyscall(value))
}

var __imp_sk_font_set_hinting bindlib.PreloadProc

func SkFontSetHinting(font unsafe.Pointer, value SkFontHintingT) {
	bindlib.CCall2(__imp_sk_font_set_hinting.Addr(), bindlib.MarshallSyscall(font), bindlib.MarshallSyscall(value))
}

var __imp_sk_font_set_subpixel bindlib.PreloadProc

func SkFontSetSubpixel(font unsafe.Pointer, value bool) {
	bindlib.CCall2(__imp_sk_font_set_subpixel.Addr(), bindlib.MarshallSyscall(font), bindlib.MarshallSyscall(value))
}

var __imp_sk_font_text_to_glyphs bindlib.PreloadProc

func SkFontTextToGlyphs(font unsafe.Pointer, text unsafe.Pointer, byteLength uint, encoding SkTextEncodingT, glyphs *uint16, maxGlyphCount int32) int32 {
	__res := bindlib.CCall6(__imp_sk_font_text_to_glyphs.Addr(), bindlib.MarshallSyscall(font), bindlib.MarshallSyscall(text), bindlib.MarshallSyscall(byteLength), bindlib.MarshallSyscall(encoding), bindlib.MarshallSyscall(glyphs), bindlib.MarshallSyscall(maxGlyphCount))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_font_unichar_to_glyph bindlib.PreloadProc

func SkFontUnicharToGlyph(font unsafe.Pointer, unichar int32) uint16 {
	__res := bindlib.CCall2(__imp_sk_font_unichar_to_glyph.Addr(), bindlib.MarshallSyscall(font), bindlib.MarshallSyscall(unichar))
	return bindlib.UnmarshallSyscall[uint16](__res)
}

var __imp_sk_font_unichars_to_glyphs bindlib.PreloadProc

func SkFontUnicharsToGlyphs(font unsafe.Pointer, unichars *int32, count int32, glyphs *uint16) {
	bindlib.CCall4(__imp_sk_font_unichars_to_glyphs.Addr(), bindlib.MarshallSyscall(font), bindlib.MarshallSyscall(unichars), bindlib.MarshallSyscall(count), bindlib.MarshallSyscall(glyphs))
}

var __imp_sk_font_glyph_widths bindlib.PreloadProc

func SkFontGlyphWidths(font unsafe.Pointer, glyphs *uint16, count int32, widths *float32) {
	bindlib.CCall4(__imp_sk_font_glyph_widths.Addr(), bindlib.MarshallSyscall(font), bindlib.MarshallSyscall(glyphs), bindlib.MarshallSyscall(count), bindlib.MarshallSyscall(widths))
}

var __imp_sk_fontmgr_count_families bindlib.PreloadProc

func SkFontmgrCountFamilies(fontmgr unsafe.Pointer) int32 {
	__res := bindlib.CCall1(__imp_sk_fontmgr_count_families.Addr(), bindlib.MarshallSyscall(fontmgr))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_fontmgr_create_from_data bindlib.PreloadProc

func SkFontmgrCreateFromData(fontmgr unsafe.Pointer, data unsafe.Pointer, index int32) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_fontmgr_create_from_data.Addr(), bindlib.MarshallSyscall(fontmgr), bindlib.MarshallSyscall(data), bindlib.MarshallSyscall(index))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_fontmgr_get_family_name bindlib.PreloadProc

func SkFontmgrGetFamilyName(fontmgr unsafe.Pointer, index int32, familyName unsafe.Pointer) {
	bindlib.CCall3(__imp_sk_fontmgr_get_family_name.Addr(), bindlib.MarshallSyscall(fontmgr), bindlib.MarshallSyscall(index), bindlib.MarshallSyscall(familyName))
}

var __imp_sk_fontmgr_match_family bindlib.PreloadProc

func SkFontmgrMatchFamily(fontmgr unsafe.Pointer, familyName *byte) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_fontmgr_match_family.Addr(), bindlib.MarshallSyscall(fontmgr), bindlib.MarshallSyscall(familyName))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_fontmgr_match_family_style bindlib.PreloadProc

func SkFontmgrMatchFamilyStyle(fontmgr unsafe.Pointer, familyName *byte, style unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_fontmgr_match_family_style.Addr(), bindlib.MarshallSyscall(fontmgr), bindlib.MarshallSyscall(familyName), bindlib.MarshallSyscall(style))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_fontmgr_match_family_style_character bindlib.PreloadProc

func SkFontmgrMatchFamilyStyleCharacter(fontmgr unsafe.Pointer, familyName *byte, style unsafe.Pointer, bcp47 **byte, bcp47Count int32, character int32) unsafe.Pointer {
	__res := bindlib.CCall6(__imp_sk_fontmgr_match_family_style_character.Addr(), bindlib.MarshallSyscall(fontmgr), bindlib.MarshallSyscall(familyName), bindlib.MarshallSyscall(style), bindlib.MarshallSyscall(bcp47), bindlib.MarshallSyscall(bcp47Count), bindlib.MarshallSyscall(character))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_fontmgr_ref_default bindlib.PreloadProc

func SkFontmgrRefDefault() unsafe.Pointer {
	__res := bindlib.CCall0(__imp_sk_fontmgr_ref_default.Addr())
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_fontstyleset_create_typeface bindlib.PreloadProc

func SkFontstylesetCreateTypeface(fss unsafe.Pointer, index int32) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_fontstyleset_create_typeface.Addr(), bindlib.MarshallSyscall(fss), bindlib.MarshallSyscall(index))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_fontstyleset_get_count bindlib.PreloadProc

func SkFontstylesetGetCount(fss unsafe.Pointer) int32 {
	__res := bindlib.CCall1(__imp_sk_fontstyleset_get_count.Addr(), bindlib.MarshallSyscall(fss))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_fontstyleset_get_style bindlib.PreloadProc

func SkFontstylesetGetStyle(fss unsafe.Pointer, index int32, fs unsafe.Pointer, style unsafe.Pointer) {
	bindlib.CCall4(__imp_sk_fontstyleset_get_style.Addr(), bindlib.MarshallSyscall(fss), bindlib.MarshallSyscall(index), bindlib.MarshallSyscall(fs), bindlib.MarshallSyscall(style))
}

var __imp_sk_fontstyleset_match_style bindlib.PreloadProc

func SkFontstylesetMatchStyle(fss unsafe.Pointer, style unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_fontstyleset_match_style.Addr(), bindlib.MarshallSyscall(fss), bindlib.MarshallSyscall(style))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_fontstyleset_unref bindlib.PreloadProc

func SkFontstylesetUnref(fss unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_fontstyleset_unref.Addr(), bindlib.MarshallSyscall(fss))
}

var __imp_sk_fontstyle_delete bindlib.PreloadProc

func SkFontstyleDelete(fs unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_fontstyle_delete.Addr(), bindlib.MarshallSyscall(fs))
}

var __imp_sk_fontstyle_get_slant bindlib.PreloadProc

func SkFontstyleGetSlant(fs unsafe.Pointer) SkFontStyleSlantT {
	__res := bindlib.CCall1(__imp_sk_fontstyle_get_slant.Addr(), bindlib.MarshallSyscall(fs))
	return bindlib.UnmarshallSyscall[SkFontStyleSlantT](__res)
}

var __imp_sk_fontstyle_get_weight bindlib.PreloadProc

func SkFontstyleGetWeight(fs unsafe.Pointer) int32 {
	__res := bindlib.CCall1(__imp_sk_fontstyle_get_weight.Addr(), bindlib.MarshallSyscall(fs))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_fontstyle_get_width bindlib.PreloadProc

func SkFontstyleGetWidth(fs unsafe.Pointer) int32 {
	__res := bindlib.CCall1(__imp_sk_fontstyle_get_width.Addr(), bindlib.MarshallSyscall(fs))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_fontstyle_new bindlib.PreloadProc

func SkFontstyleNew(weight int32, width int32, slant SkFontStyleSlantT) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_fontstyle_new.Addr(), bindlib.MarshallSyscall(weight), bindlib.MarshallSyscall(width), bindlib.MarshallSyscall(slant))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_image_get_alpha_type bindlib.PreloadProc

func SkImageGetAlphaType(image unsafe.Pointer) SkAlphaTypeT {
	__res := bindlib.CCall1(__imp_sk_image_get_alpha_type.Addr(), bindlib.MarshallSyscall(image))
	return bindlib.UnmarshallSyscall[SkAlphaTypeT](__res)
}

var __imp_sk_image_get_color_type bindlib.PreloadProc

func SkImageGetColorType(image unsafe.Pointer) SkColorTypeT {
	__res := bindlib.CCall1(__imp_sk_image_get_color_type.Addr(), bindlib.MarshallSyscall(image))
	return bindlib.UnmarshallSyscall[SkColorTypeT](__res)
}

var __imp_sk_image_get_colorspace bindlib.PreloadProc

func SkImageGetColorspace(image unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_image_get_colorspace.Addr(), bindlib.MarshallSyscall(image))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_image_get_height bindlib.PreloadProc

func SkImageGetHeight(image unsafe.Pointer) int32 {
	__res := bindlib.CCall1(__imp_sk_image_get_height.Addr(), bindlib.MarshallSyscall(image))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_image_get_width bindlib.PreloadProc

func SkImageGetWidth(image unsafe.Pointer) int32 {
	__res := bindlib.CCall1(__imp_sk_image_get_width.Addr(), bindlib.MarshallSyscall(image))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_image_make_non_texture_image bindlib.PreloadProc

func SkImageMakeNonTextureImage(image unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_image_make_non_texture_image.Addr(), bindlib.MarshallSyscall(image))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_image_make_shader bindlib.PreloadProc

func SkImageMakeShader(image unsafe.Pointer, tileX SkTileModeT, tileY SkTileModeT, samplingOptions *SkSamplingOptionsT, cmatrix *SkMatrixT) unsafe.Pointer {
	__res := bindlib.CCall5(__imp_sk_image_make_shader.Addr(), bindlib.MarshallSyscall(image), bindlib.MarshallSyscall(tileX), bindlib.MarshallSyscall(tileY), bindlib.MarshallSyscall(samplingOptions), bindlib.MarshallSyscall(cmatrix))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_image_new_from_encoded bindlib.PreloadProc

func SkImageNewFromEncoded(encoded unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_image_new_from_encoded.Addr(), bindlib.MarshallSyscall(encoded))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_image_new_raster_data bindlib.PreloadProc

func SkImageNewRasterData(cinfo *SkImageInfoT, pixels unsafe.Pointer, rowBytes uint) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_image_new_raster_data.Addr(), bindlib.MarshallSyscall(cinfo), bindlib.MarshallSyscall(pixels), bindlib.MarshallSyscall(rowBytes))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_image_read_pixels bindlib.PreloadProc

func SkImageReadPixels(image unsafe.Pointer, dstInfo *SkImageInfoT, dstPixels unsafe.Pointer, dstRowBytes uint, srcX int32, srcY int32, cachingHint SkImageCachingHintT) bool {
	__res := bindlib.CCall7(__imp_sk_image_read_pixels.Addr(), bindlib.MarshallSyscall(image), bindlib.MarshallSyscall(dstInfo), bindlib.MarshallSyscall(dstPixels), bindlib.MarshallSyscall(dstRowBytes), bindlib.MarshallSyscall(srcX), bindlib.MarshallSyscall(srcY), bindlib.MarshallSyscall(cachingHint))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_image_unref bindlib.PreloadProc

func SkImageUnref(image unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_image_unref.Addr(), bindlib.MarshallSyscall(image))
}

var __imp_sk_image_texture_from_image bindlib.PreloadProc

func SkImageTextureFromImage(ctx unsafe.Pointer, image unsafe.Pointer, mipmapped bool, budgeted bool) unsafe.Pointer {
	__res := bindlib.CCall4(__imp_sk_image_texture_from_image.Addr(), bindlib.MarshallSyscall(ctx), bindlib.MarshallSyscall(image), bindlib.MarshallSyscall(mipmapped), bindlib.MarshallSyscall(budgeted))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_arithmetic bindlib.PreloadProc

func SkImagefilterNewArithmetic(k1 float32, k2 float32, k3 float32, k4 float32, enforcePMColor bool, background unsafe.Pointer, foreground unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall8(__imp_sk_imagefilter_new_arithmetic.Addr(), bindlib.MarshallSyscall(k1), bindlib.MarshallSyscall(k2), bindlib.MarshallSyscall(k3), bindlib.MarshallSyscall(k4), bindlib.MarshallSyscall(enforcePMColor), bindlib.MarshallSyscall(background), bindlib.MarshallSyscall(foreground), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_blur bindlib.PreloadProc

func SkImagefilterNewBlur(sigmaX float32, sigmaY float32, tileMode SkTileModeT, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall5(__imp_sk_imagefilter_new_blur.Addr(), bindlib.MarshallSyscall(sigmaX), bindlib.MarshallSyscall(sigmaY), bindlib.MarshallSyscall(tileMode), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_color_filter bindlib.PreloadProc

func SkImagefilterNewColorFilter(cf unsafe.Pointer, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_imagefilter_new_color_filter.Addr(), bindlib.MarshallSyscall(cf), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_compose bindlib.PreloadProc

func SkImagefilterNewCompose(outer unsafe.Pointer, inner unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_imagefilter_new_compose.Addr(), bindlib.MarshallSyscall(outer), bindlib.MarshallSyscall(inner))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_dilate bindlib.PreloadProc

func SkImagefilterNewDilate(radiusX int32, radiusY int32, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall4(__imp_sk_imagefilter_new_dilate.Addr(), bindlib.MarshallSyscall(radiusX), bindlib.MarshallSyscall(radiusY), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_displacement_map_effect bindlib.PreloadProc

func SkImagefilterNewDisplacementMapEffect(xChannelSelector SkColorChannelT, yChannelSelector SkColorChannelT, scale float32, displacement unsafe.Pointer, color unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall6(__imp_sk_imagefilter_new_displacement_map_effect.Addr(), bindlib.MarshallSyscall(xChannelSelector), bindlib.MarshallSyscall(yChannelSelector), bindlib.MarshallSyscall(scale), bindlib.MarshallSyscall(displacement), bindlib.MarshallSyscall(color), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_distant_lit_diffuse bindlib.PreloadProc

func SkImagefilterNewDistantLitDiffuse(direction *SkPoint3T, lightColor SkColorT, surfaceScale float32, kd float32, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall6(__imp_sk_imagefilter_new_distant_lit_diffuse.Addr(), bindlib.MarshallSyscall(direction), bindlib.MarshallSyscall(lightColor), bindlib.MarshallSyscall(surfaceScale), bindlib.MarshallSyscall(kd), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_distant_lit_specular bindlib.PreloadProc

func SkImagefilterNewDistantLitSpecular(direction *SkPoint3T, lightColor SkColorT, surfaceScale float32, ks float32, shininess float32, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall7(__imp_sk_imagefilter_new_distant_lit_specular.Addr(), bindlib.MarshallSyscall(direction), bindlib.MarshallSyscall(lightColor), bindlib.MarshallSyscall(surfaceScale), bindlib.MarshallSyscall(ks), bindlib.MarshallSyscall(shininess), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_drop_shadow bindlib.PreloadProc

func SkImagefilterNewDropShadow(dx float32, dy float32, sigmaX float32, sigmaY float32, color SkColorT, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall7(__imp_sk_imagefilter_new_drop_shadow.Addr(), bindlib.MarshallSyscall(dx), bindlib.MarshallSyscall(dy), bindlib.MarshallSyscall(sigmaX), bindlib.MarshallSyscall(sigmaY), bindlib.MarshallSyscall(color), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_drop_shadow_only bindlib.PreloadProc

func SkImagefilterNewDropShadowOnly(dx float32, dy float32, sigmaX float32, sigmaY float32, color SkColorT, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall7(__imp_sk_imagefilter_new_drop_shadow_only.Addr(), bindlib.MarshallSyscall(dx), bindlib.MarshallSyscall(dy), bindlib.MarshallSyscall(sigmaX), bindlib.MarshallSyscall(sigmaY), bindlib.MarshallSyscall(color), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_erode bindlib.PreloadProc

func SkImagefilterNewErode(radiusX int32, radiusY int32, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall4(__imp_sk_imagefilter_new_erode.Addr(), bindlib.MarshallSyscall(radiusX), bindlib.MarshallSyscall(radiusY), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_image_source bindlib.PreloadProc

func SkImagefilterNewImageSource(image unsafe.Pointer, srcRect *SkRectT, dstRect *SkRectT, samplingOptions *SkSamplingOptionsT) unsafe.Pointer {
	__res := bindlib.CCall4(__imp_sk_imagefilter_new_image_source.Addr(), bindlib.MarshallSyscall(image), bindlib.MarshallSyscall(srcRect), bindlib.MarshallSyscall(dstRect), bindlib.MarshallSyscall(samplingOptions))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_image_source_default bindlib.PreloadProc

func SkImagefilterNewImageSourceDefault(image unsafe.Pointer, samplingOptions *SkSamplingOptionsT) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_imagefilter_new_image_source_default.Addr(), bindlib.MarshallSyscall(image), bindlib.MarshallSyscall(samplingOptions))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_magnifier bindlib.PreloadProc

func SkImagefilterNewMagnifier(lensBounds *SkRectT, zoomAmount float32, inset float32, samplingOptions *SkSamplingOptionsT, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall6(__imp_sk_imagefilter_new_magnifier.Addr(), bindlib.MarshallSyscall(lensBounds), bindlib.MarshallSyscall(zoomAmount), bindlib.MarshallSyscall(inset), bindlib.MarshallSyscall(samplingOptions), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_matrix_convolution bindlib.PreloadProc

func SkImagefilterNewMatrixConvolution(kernelSize *SkIsizeT, kernel *float32, gain float32, bias float32, kernelOffset *SkIpointT, tileMode SkTileModeT, convolveAlpha bool, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall9(__imp_sk_imagefilter_new_matrix_convolution.Addr(), bindlib.MarshallSyscall(kernelSize), bindlib.MarshallSyscall(kernel), bindlib.MarshallSyscall(gain), bindlib.MarshallSyscall(bias), bindlib.MarshallSyscall(kernelOffset), bindlib.MarshallSyscall(tileMode), bindlib.MarshallSyscall(convolveAlpha), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_matrix_transform bindlib.PreloadProc

func SkImagefilterNewMatrixTransform(matrix *SkMatrixT, samplingOptions *SkSamplingOptionsT, input unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_imagefilter_new_matrix_transform.Addr(), bindlib.MarshallSyscall(matrix), bindlib.MarshallSyscall(samplingOptions), bindlib.MarshallSyscall(input))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_merge bindlib.PreloadProc

func SkImagefilterNewMerge(filters *unsafe.Pointer, count int32, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_imagefilter_new_merge.Addr(), bindlib.MarshallSyscall(filters), bindlib.MarshallSyscall(count), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_offset bindlib.PreloadProc

func SkImagefilterNewOffset(dx float32, dy float32, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall4(__imp_sk_imagefilter_new_offset.Addr(), bindlib.MarshallSyscall(dx), bindlib.MarshallSyscall(dy), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_point_lit_diffuse bindlib.PreloadProc

func SkImagefilterNewPointLitDiffuse(location *SkPoint3T, lightColor SkColorT, surfaceScale float32, kd float32, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall6(__imp_sk_imagefilter_new_point_lit_diffuse.Addr(), bindlib.MarshallSyscall(location), bindlib.MarshallSyscall(lightColor), bindlib.MarshallSyscall(surfaceScale), bindlib.MarshallSyscall(kd), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_point_lit_specular bindlib.PreloadProc

func SkImagefilterNewPointLitSpecular(location *SkPoint3T, lightColor SkColorT, surfaceScale float32, ks float32, shininess float32, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall7(__imp_sk_imagefilter_new_point_lit_specular.Addr(), bindlib.MarshallSyscall(location), bindlib.MarshallSyscall(lightColor), bindlib.MarshallSyscall(surfaceScale), bindlib.MarshallSyscall(ks), bindlib.MarshallSyscall(shininess), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_spot_lit_diffuse bindlib.PreloadProc

func SkImagefilterNewSpotLitDiffuse(location *SkPoint3T, target *SkPoint3T, specularExponent float32, cutoffAngle float32, lightColor SkColorT, surfaceScale float32, kd float32, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall9(__imp_sk_imagefilter_new_spot_lit_diffuse.Addr(), bindlib.MarshallSyscall(location), bindlib.MarshallSyscall(target), bindlib.MarshallSyscall(specularExponent), bindlib.MarshallSyscall(cutoffAngle), bindlib.MarshallSyscall(lightColor), bindlib.MarshallSyscall(surfaceScale), bindlib.MarshallSyscall(kd), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_spot_lit_specular bindlib.PreloadProc

func SkImagefilterNewSpotLitSpecular(location *SkPoint3T, target *SkPoint3T, specularExponent float32, cutoffAngle float32, lightColor SkColorT, surfaceScale float32, ks float32, shininess float32, input unsafe.Pointer, cropRect *SkRectT) unsafe.Pointer {
	__res := bindlib.CCall10(__imp_sk_imagefilter_new_spot_lit_specular.Addr(), bindlib.MarshallSyscall(location), bindlib.MarshallSyscall(target), bindlib.MarshallSyscall(specularExponent), bindlib.MarshallSyscall(cutoffAngle), bindlib.MarshallSyscall(lightColor), bindlib.MarshallSyscall(surfaceScale), bindlib.MarshallSyscall(ks), bindlib.MarshallSyscall(shininess), bindlib.MarshallSyscall(input), bindlib.MarshallSyscall(cropRect))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_new_tile bindlib.PreloadProc

func SkImagefilterNewTile(src *SkRectT, dst *SkRectT, input unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_imagefilter_new_tile.Addr(), bindlib.MarshallSyscall(src), bindlib.MarshallSyscall(dst), bindlib.MarshallSyscall(input))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_imagefilter_unref bindlib.PreloadProc

func SkImagefilterUnref(filter unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_imagefilter_unref.Addr(), bindlib.MarshallSyscall(filter))
}

var __imp_sk_maskfilter_new_blur_with_flags bindlib.PreloadProc

func SkMaskfilterNewBlurWithFlags(arg0 SkBlurStyleT, sigma float32, respectCTM bool) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_maskfilter_new_blur_with_flags.Addr(), bindlib.MarshallSyscall(arg0), bindlib.MarshallSyscall(sigma), bindlib.MarshallSyscall(respectCTM))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_maskfilter_new_clip bindlib.PreloadProc

func SkMaskfilterNewClip(min uint8, max uint8) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_maskfilter_new_clip.Addr(), bindlib.MarshallSyscall(min), bindlib.MarshallSyscall(max))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_maskfilter_new_gamma bindlib.PreloadProc

func SkMaskfilterNewGamma(gamma float32) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_maskfilter_new_gamma.Addr(), bindlib.MarshallSyscall(gamma))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_maskfilter_new_shader bindlib.PreloadProc

func SkMaskfilterNewShader(cshader unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_maskfilter_new_shader.Addr(), bindlib.MarshallSyscall(cshader))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_maskfilter_new_table bindlib.PreloadProc

func SkMaskfilterNewTable(table *uint8) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_maskfilter_new_table.Addr(), bindlib.MarshallSyscall(table))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_maskfilter_unref bindlib.PreloadProc

func SkMaskfilterUnref(filter unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_maskfilter_unref.Addr(), bindlib.MarshallSyscall(filter))
}

var __imp_sk_paint_equivalent bindlib.PreloadProc

func SkPaintEquivalent(cpaint unsafe.Pointer, other unsafe.Pointer) bool {
	__res := bindlib.CCall2(__imp_sk_paint_equivalent.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(other))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_paint_clone bindlib.PreloadProc

func SkPaintClone(cpaint unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_paint_clone.Addr(), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_paint_delete bindlib.PreloadProc

func SkPaintDelete(cpaint unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_paint_delete.Addr(), bindlib.MarshallSyscall(cpaint))
}

var __imp_sk_paint_get_blend_mode_or bindlib.PreloadProc

func SkPaintGetBlendModeOr(cpaint unsafe.Pointer, defaultMode SkBlendModeT) SkBlendModeT {
	__res := bindlib.CCall2(__imp_sk_paint_get_blend_mode_or.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(defaultMode))
	return bindlib.UnmarshallSyscall[SkBlendModeT](__res)
}

var __imp_sk_paint_get_color bindlib.PreloadProc

func SkPaintGetColor(cpaint unsafe.Pointer) SkColorT {
	__res := bindlib.CCall1(__imp_sk_paint_get_color.Addr(), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[SkColorT](__res)
}

var __imp_sk_paint_get_colorfilter bindlib.PreloadProc

func SkPaintGetColorfilter(cpaint unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_paint_get_colorfilter.Addr(), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_paint_get_fill_path bindlib.PreloadProc

func SkPaintGetFillPath(cpaint unsafe.Pointer, src unsafe.Pointer, dst unsafe.Pointer, cullRect *SkRectT, resScale float32) bool {
	__res := bindlib.CCall5(__imp_sk_paint_get_fill_path.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(src), bindlib.MarshallSyscall(dst), bindlib.MarshallSyscall(cullRect), bindlib.MarshallSyscall(resScale))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_paint_get_imagefilter bindlib.PreloadProc

func SkPaintGetImagefilter(cpaint unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_paint_get_imagefilter.Addr(), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_paint_get_maskfilter bindlib.PreloadProc

func SkPaintGetMaskfilter(cpaint unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_paint_get_maskfilter.Addr(), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_paint_get_path_effect bindlib.PreloadProc

func SkPaintGetPathEffect(cpaint unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_paint_get_path_effect.Addr(), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_paint_get_shader bindlib.PreloadProc

func SkPaintGetShader(cpaint unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_paint_get_shader.Addr(), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_paint_get_stroke_cap bindlib.PreloadProc

func SkPaintGetStrokeCap(cpaint unsafe.Pointer) SkStrokeCapT {
	__res := bindlib.CCall1(__imp_sk_paint_get_stroke_cap.Addr(), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[SkStrokeCapT](__res)
}

var __imp_sk_paint_get_stroke_join bindlib.PreloadProc

func SkPaintGetStrokeJoin(cpaint unsafe.Pointer) SkStrokeJoinT {
	__res := bindlib.CCall1(__imp_sk_paint_get_stroke_join.Addr(), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[SkStrokeJoinT](__res)
}

var __imp_sk_paint_get_stroke_miter bindlib.PreloadProc

func SkPaintGetStrokeMiter(cpaint unsafe.Pointer) float32 {
	__res := bindlib.CCall1(__imp_sk_paint_get_stroke_miter.Addr(), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[float32](__res)
}

var __imp_sk_paint_get_stroke_width bindlib.PreloadProc

func SkPaintGetStrokeWidth(cpaint unsafe.Pointer) float32 {
	__res := bindlib.CCall1(__imp_sk_paint_get_stroke_width.Addr(), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[float32](__res)
}

var __imp_sk_paint_get_style bindlib.PreloadProc

func SkPaintGetStyle(cpaint unsafe.Pointer) SkPaintStyleT {
	__res := bindlib.CCall1(__imp_sk_paint_get_style.Addr(), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[SkPaintStyleT](__res)
}

var __imp_sk_paint_is_antialias bindlib.PreloadProc

func SkPaintIsAntialias(cpaint unsafe.Pointer) bool {
	__res := bindlib.CCall1(__imp_sk_paint_is_antialias.Addr(), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_paint_is_dither bindlib.PreloadProc

func SkPaintIsDither(cpaint unsafe.Pointer) bool {
	__res := bindlib.CCall1(__imp_sk_paint_is_dither.Addr(), bindlib.MarshallSyscall(cpaint))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_paint_new bindlib.PreloadProc

func SkPaintNew() unsafe.Pointer {
	__res := bindlib.CCall0(__imp_sk_paint_new.Addr())
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_paint_reset bindlib.PreloadProc

func SkPaintReset(cpaint unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_paint_reset.Addr(), bindlib.MarshallSyscall(cpaint))
}

var __imp_sk_paint_set_antialias bindlib.PreloadProc

func SkPaintSetAntialias(cpaint unsafe.Pointer, aa bool) {
	bindlib.CCall2(__imp_sk_paint_set_antialias.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(aa))
}

var __imp_sk_paint_set_blend_mode bindlib.PreloadProc

func SkPaintSetBlendMode(paint unsafe.Pointer, mode SkBlendModeT) {
	bindlib.CCall2(__imp_sk_paint_set_blend_mode.Addr(), bindlib.MarshallSyscall(paint), bindlib.MarshallSyscall(mode))
}

var __imp_sk_paint_set_color bindlib.PreloadProc

func SkPaintSetColor(cpaint unsafe.Pointer, c SkColorT) {
	bindlib.CCall2(__imp_sk_paint_set_color.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(c))
}

var __imp_sk_paint_set_colorfilter bindlib.PreloadProc

func SkPaintSetColorfilter(cpaint unsafe.Pointer, cfilter unsafe.Pointer) {
	bindlib.CCall2(__imp_sk_paint_set_colorfilter.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(cfilter))
}

var __imp_sk_paint_set_dither bindlib.PreloadProc

func SkPaintSetDither(cpaint unsafe.Pointer, isdither bool) {
	bindlib.CCall2(__imp_sk_paint_set_dither.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(isdither))
}

var __imp_sk_paint_set_imagefilter bindlib.PreloadProc

func SkPaintSetImagefilter(cpaint unsafe.Pointer, cfilter unsafe.Pointer) {
	bindlib.CCall2(__imp_sk_paint_set_imagefilter.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(cfilter))
}

var __imp_sk_paint_set_maskfilter bindlib.PreloadProc

func SkPaintSetMaskfilter(cpaint unsafe.Pointer, cfilter unsafe.Pointer) {
	bindlib.CCall2(__imp_sk_paint_set_maskfilter.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(cfilter))
}

var __imp_sk_paint_set_path_effect bindlib.PreloadProc

func SkPaintSetPathEffect(cpaint unsafe.Pointer, effect unsafe.Pointer) {
	bindlib.CCall2(__imp_sk_paint_set_path_effect.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(effect))
}

var __imp_sk_paint_set_shader bindlib.PreloadProc

func SkPaintSetShader(cpaint unsafe.Pointer, cshader unsafe.Pointer) {
	bindlib.CCall2(__imp_sk_paint_set_shader.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(cshader))
}

var __imp_sk_paint_set_stroke_cap bindlib.PreloadProc

func SkPaintSetStrokeCap(cpaint unsafe.Pointer, ccap SkStrokeCapT) {
	bindlib.CCall2(__imp_sk_paint_set_stroke_cap.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(ccap))
}

var __imp_sk_paint_set_stroke_join bindlib.PreloadProc

func SkPaintSetStrokeJoin(cpaint unsafe.Pointer, cjoin SkStrokeJoinT) {
	bindlib.CCall2(__imp_sk_paint_set_stroke_join.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(cjoin))
}

var __imp_sk_paint_set_stroke_miter bindlib.PreloadProc

func SkPaintSetStrokeMiter(cpaint unsafe.Pointer, miter float32) {
	bindlib.CCall2(__imp_sk_paint_set_stroke_miter.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(miter))
}

var __imp_sk_paint_set_stroke_width bindlib.PreloadProc

func SkPaintSetStrokeWidth(cpaint unsafe.Pointer, width float32) {
	bindlib.CCall2(__imp_sk_paint_set_stroke_width.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(width))
}

var __imp_sk_paint_set_style bindlib.PreloadProc

func SkPaintSetStyle(cpaint unsafe.Pointer, style SkPaintStyleT) {
	bindlib.CCall2(__imp_sk_paint_set_style.Addr(), bindlib.MarshallSyscall(cpaint), bindlib.MarshallSyscall(style))
}

var __imp_sk_path_add_circle bindlib.PreloadProc

func SkPathAddCircle(cpath unsafe.Pointer, x float32, y float32, radius float32, dir SkPathDirectionT) {
	bindlib.CCall5(__imp_sk_path_add_circle.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(x), bindlib.MarshallSyscall(y), bindlib.MarshallSyscall(radius), bindlib.MarshallSyscall(dir))
}

var __imp_sk_path_add_oval bindlib.PreloadProc

func SkPathAddOval(cpath unsafe.Pointer, crect *SkRectT, cdir SkPathDirectionT) {
	bindlib.CCall3(__imp_sk_path_add_oval.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(crect), bindlib.MarshallSyscall(cdir))
}

var __imp_sk_path_add_path bindlib.PreloadProc

func SkPathAddPath(cpath unsafe.Pointer, other unsafe.Pointer, add_mode SkPathAddModeT) {
	bindlib.CCall3(__imp_sk_path_add_path.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(other), bindlib.MarshallSyscall(add_mode))
}

var __imp_sk_path_add_path_matrix bindlib.PreloadProc

func SkPathAddPathMatrix(cpath unsafe.Pointer, other unsafe.Pointer, matrix *SkMatrixT, add_mode SkPathAddModeT) {
	bindlib.CCall4(__imp_sk_path_add_path_matrix.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(other), bindlib.MarshallSyscall(matrix), bindlib.MarshallSyscall(add_mode))
}

var __imp_sk_path_add_path_offset bindlib.PreloadProc

func SkPathAddPathOffset(cpath unsafe.Pointer, other unsafe.Pointer, dx float32, dy float32, add_mode SkPathAddModeT) {
	bindlib.CCall5(__imp_sk_path_add_path_offset.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(other), bindlib.MarshallSyscall(dx), bindlib.MarshallSyscall(dy), bindlib.MarshallSyscall(add_mode))
}

var __imp_sk_path_add_path_reverse bindlib.PreloadProc

func SkPathAddPathReverse(cpath unsafe.Pointer, other unsafe.Pointer) {
	bindlib.CCall2(__imp_sk_path_add_path_reverse.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(other))
}

var __imp_sk_path_add_poly bindlib.PreloadProc

func SkPathAddPoly(cpath unsafe.Pointer, points *SkPointT, count int32, _close bool) {
	bindlib.CCall4(__imp_sk_path_add_poly.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(points), bindlib.MarshallSyscall(count), bindlib.MarshallSyscall(_close))
}

var __imp_sk_path_add_rect bindlib.PreloadProc

func SkPathAddRect(cpath unsafe.Pointer, crect *SkRectT, cdir SkPathDirectionT) {
	bindlib.CCall3(__imp_sk_path_add_rect.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(crect), bindlib.MarshallSyscall(cdir))
}

var __imp_sk_path_add_rounded_rect bindlib.PreloadProc

func SkPathAddRoundedRect(cpath unsafe.Pointer, crect *SkRectT, rx float32, ry float32, cdir SkPathDirectionT) {
	bindlib.CCall5(__imp_sk_path_add_rounded_rect.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(crect), bindlib.MarshallSyscall(rx), bindlib.MarshallSyscall(ry), bindlib.MarshallSyscall(cdir))
}

var __imp_sk_path_arc_to bindlib.PreloadProc

func SkPathArcTo(cpath unsafe.Pointer, rx float32, ry float32, xAxisRotate float32, largeArc SkPathArcSizeT, sweep SkPathDirectionT, x float32, y float32) {
	bindlib.CCall8(__imp_sk_path_arc_to.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(rx), bindlib.MarshallSyscall(ry), bindlib.MarshallSyscall(xAxisRotate), bindlib.MarshallSyscall(largeArc), bindlib.MarshallSyscall(sweep), bindlib.MarshallSyscall(x), bindlib.MarshallSyscall(y))
}

var __imp_sk_path_arc_to_with_oval bindlib.PreloadProc

func SkPathArcToWithOval(cpath unsafe.Pointer, oval *SkRectT, startAngle float32, sweepAngle float32, forceMoveTo bool) {
	bindlib.CCall5(__imp_sk_path_arc_to_with_oval.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(oval), bindlib.MarshallSyscall(startAngle), bindlib.MarshallSyscall(sweepAngle), bindlib.MarshallSyscall(forceMoveTo))
}

var __imp_sk_path_arc_to_with_points bindlib.PreloadProc

func SkPathArcToWithPoints(cpath unsafe.Pointer, x1 float32, y1 float32, x2 float32, y2 float32, radius float32) {
	bindlib.CCall6(__imp_sk_path_arc_to_with_points.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(x1), bindlib.MarshallSyscall(y1), bindlib.MarshallSyscall(x2), bindlib.MarshallSyscall(y2), bindlib.MarshallSyscall(radius))
}

var __imp_sk_path_clone bindlib.PreloadProc

func SkPathClone(cpath unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_path_clone.Addr(), bindlib.MarshallSyscall(cpath))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_path_close bindlib.PreloadProc

func SkPathClose(cpath unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_path_close.Addr(), bindlib.MarshallSyscall(cpath))
}

var __imp_sk_path_compute_tight_bounds bindlib.PreloadProc

func SkPathComputeTightBounds(cpath unsafe.Pointer, crect *SkRectT) {
	bindlib.CCall2(__imp_sk_path_compute_tight_bounds.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(crect))
}

var __imp_sk_path_conic_to bindlib.PreloadProc

func SkPathConicTo(cpath unsafe.Pointer, x0 float32, y0 float32, x1 float32, y1 float32, w float32) {
	bindlib.CCall6(__imp_sk_path_conic_to.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(x0), bindlib.MarshallSyscall(y0), bindlib.MarshallSyscall(x1), bindlib.MarshallSyscall(y1), bindlib.MarshallSyscall(w))
}

var __imp_sk_path_contains bindlib.PreloadProc

func SkPathContains(cpath unsafe.Pointer, x float32, y float32) bool {
	__res := bindlib.CCall3(__imp_sk_path_contains.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(x), bindlib.MarshallSyscall(y))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_path_count_points bindlib.PreloadProc

func SkPathCountPoints(cpath unsafe.Pointer) int32 {
	__res := bindlib.CCall1(__imp_sk_path_count_points.Addr(), bindlib.MarshallSyscall(cpath))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_path_cubic_to bindlib.PreloadProc

func SkPathCubicTo(arg0 unsafe.Pointer, x0 float32, y0 float32, x1 float32, y1 float32, x2 float32, y2 float32) {
	bindlib.CCall7(__imp_sk_path_cubic_to.Addr(), bindlib.MarshallSyscall(arg0), bindlib.MarshallSyscall(x0), bindlib.MarshallSyscall(y0), bindlib.MarshallSyscall(x1), bindlib.MarshallSyscall(y1), bindlib.MarshallSyscall(x2), bindlib.MarshallSyscall(y2))
}

var __imp_sk_path_delete bindlib.PreloadProc

func SkPathDelete(cpath unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_path_delete.Addr(), bindlib.MarshallSyscall(cpath))
}

var __imp_sk_path_get_bounds bindlib.PreloadProc

func SkPathGetBounds(cpath unsafe.Pointer, crect *SkRectT) {
	bindlib.CCall2(__imp_sk_path_get_bounds.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(crect))
}

var __imp_sk_path_get_points bindlib.PreloadProc

func SkPathGetPoints(cpath unsafe.Pointer, points *SkPointT, max int32) int32 {
	__res := bindlib.CCall3(__imp_sk_path_get_points.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(points), bindlib.MarshallSyscall(max))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_path_get_filltype bindlib.PreloadProc

func SkPathGetFilltype(cpath unsafe.Pointer) SkPathFillTypeT {
	__res := bindlib.CCall1(__imp_sk_path_get_filltype.Addr(), bindlib.MarshallSyscall(cpath))
	return bindlib.UnmarshallSyscall[SkPathFillTypeT](__res)
}

var __imp_sk_path_get_last_point bindlib.PreloadProc

func SkPathGetLastPoint(cpath unsafe.Pointer, point *SkPointT) bool {
	__res := bindlib.CCall2(__imp_sk_path_get_last_point.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(point))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_path_line_to bindlib.PreloadProc

func SkPathLineTo(cpath unsafe.Pointer, x float32, y float32) {
	bindlib.CCall3(__imp_sk_path_line_to.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(x), bindlib.MarshallSyscall(y))
}

var __imp_sk_path_move_to bindlib.PreloadProc

func SkPathMoveTo(cpath unsafe.Pointer, x float32, y float32) {
	bindlib.CCall3(__imp_sk_path_move_to.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(x), bindlib.MarshallSyscall(y))
}

var __imp_sk_path_new bindlib.PreloadProc

func SkPathNew() unsafe.Pointer {
	__res := bindlib.CCall0(__imp_sk_path_new.Addr())
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_path_parse_svg_string bindlib.PreloadProc

func SkPathParseSvgString(cpath unsafe.Pointer, str *byte) bool {
	__res := bindlib.CCall2(__imp_sk_path_parse_svg_string.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(str))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_path_quad_to bindlib.PreloadProc

func SkPathQuadTo(cpath unsafe.Pointer, x0 float32, y0 float32, x1 float32, y1 float32) {
	bindlib.CCall5(__imp_sk_path_quad_to.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(x0), bindlib.MarshallSyscall(y0), bindlib.MarshallSyscall(x1), bindlib.MarshallSyscall(y1))
}

var __imp_sk_path_rarc_to bindlib.PreloadProc

func SkPathRarcTo(cpath unsafe.Pointer, rx float32, ry float32, xAxisRotate float32, largeArc SkPathArcSizeT, sweep SkPathDirectionT, x float32, y float32) {
	bindlib.CCall8(__imp_sk_path_rarc_to.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(rx), bindlib.MarshallSyscall(ry), bindlib.MarshallSyscall(xAxisRotate), bindlib.MarshallSyscall(largeArc), bindlib.MarshallSyscall(sweep), bindlib.MarshallSyscall(x), bindlib.MarshallSyscall(y))
}

var __imp_sk_path_rconic_to bindlib.PreloadProc

func SkPathRconicTo(cpath unsafe.Pointer, dx0 float32, dy0 float32, dx1 float32, dy1 float32, w float32) {
	bindlib.CCall6(__imp_sk_path_rconic_to.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(dx0), bindlib.MarshallSyscall(dy0), bindlib.MarshallSyscall(dx1), bindlib.MarshallSyscall(dy1), bindlib.MarshallSyscall(w))
}

var __imp_sk_path_rcubic_to bindlib.PreloadProc

func SkPathRcubicTo(cpath unsafe.Pointer, dx0 float32, dy0 float32, dx1 float32, dy1 float32, dx2 float32, dy2 float32) {
	bindlib.CCall7(__imp_sk_path_rcubic_to.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(dx0), bindlib.MarshallSyscall(dy0), bindlib.MarshallSyscall(dx1), bindlib.MarshallSyscall(dy1), bindlib.MarshallSyscall(dx2), bindlib.MarshallSyscall(dy2))
}

var __imp_sk_path_reset bindlib.PreloadProc

func SkPathReset(cpath unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_path_reset.Addr(), bindlib.MarshallSyscall(cpath))
}

var __imp_sk_path_rewind bindlib.PreloadProc

func SkPathRewind(cpath unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_path_rewind.Addr(), bindlib.MarshallSyscall(cpath))
}

var __imp_sk_path_rline_to bindlib.PreloadProc

func SkPathRlineTo(cpath unsafe.Pointer, dx float32, yd float32) {
	bindlib.CCall3(__imp_sk_path_rline_to.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(dx), bindlib.MarshallSyscall(yd))
}

var __imp_sk_path_rmove_to bindlib.PreloadProc

func SkPathRmoveTo(cpath unsafe.Pointer, dx float32, dy float32) {
	bindlib.CCall3(__imp_sk_path_rmove_to.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(dx), bindlib.MarshallSyscall(dy))
}

var __imp_sk_path_set_filltype bindlib.PreloadProc

func SkPathSetFilltype(cpath unsafe.Pointer, cfilltype SkPathFillTypeT) {
	bindlib.CCall2(__imp_sk_path_set_filltype.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(cfilltype))
}

var __imp_sk_path_to_svg_string bindlib.PreloadProc

func SkPathToSvgString(cpath unsafe.Pointer, absolute bool) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_path_to_svg_string.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(absolute))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_path_transform bindlib.PreloadProc

func SkPathTransform(cpath unsafe.Pointer, cmatrix *SkMatrixT) {
	bindlib.CCall2(__imp_sk_path_transform.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(cmatrix))
}

var __imp_sk_path_transform_to_dest bindlib.PreloadProc

func SkPathTransformToDest(cpath unsafe.Pointer, cmatrix *SkMatrixT, destination unsafe.Pointer) {
	bindlib.CCall3(__imp_sk_path_transform_to_dest.Addr(), bindlib.MarshallSyscall(cpath), bindlib.MarshallSyscall(cmatrix), bindlib.MarshallSyscall(destination))
}

var __imp_sk_path_effect_create_1d_path bindlib.PreloadProc

func SkPathEffectCreate1dPath(path unsafe.Pointer, advance float32, phase float32, style SkPathEffect1dStyleT) unsafe.Pointer {
	__res := bindlib.CCall4(__imp_sk_path_effect_create_1d_path.Addr(), bindlib.MarshallSyscall(path), bindlib.MarshallSyscall(advance), bindlib.MarshallSyscall(phase), bindlib.MarshallSyscall(style))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_path_effect_create_2d_line bindlib.PreloadProc

func SkPathEffectCreate2dLine(width float32, matrix *SkMatrixT) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_path_effect_create_2d_line.Addr(), bindlib.MarshallSyscall(width), bindlib.MarshallSyscall(matrix))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_path_effect_create_2d_path bindlib.PreloadProc

func SkPathEffectCreate2dPath(matrix *SkMatrixT, path unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_path_effect_create_2d_path.Addr(), bindlib.MarshallSyscall(matrix), bindlib.MarshallSyscall(path))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_path_effect_create_compose bindlib.PreloadProc

func SkPathEffectCreateCompose(outer unsafe.Pointer, inner unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_path_effect_create_compose.Addr(), bindlib.MarshallSyscall(outer), bindlib.MarshallSyscall(inner))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_path_effect_create_corner bindlib.PreloadProc

func SkPathEffectCreateCorner(radius float32) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_path_effect_create_corner.Addr(), bindlib.MarshallSyscall(radius))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_path_effect_create_dash bindlib.PreloadProc

func SkPathEffectCreateDash(intervals *float32, count int32, phase float32) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_path_effect_create_dash.Addr(), bindlib.MarshallSyscall(intervals), bindlib.MarshallSyscall(count), bindlib.MarshallSyscall(phase))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_path_effect_create_discrete bindlib.PreloadProc

func SkPathEffectCreateDiscrete(segLength float32, deviation float32, seedAssist uint32) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_path_effect_create_discrete.Addr(), bindlib.MarshallSyscall(segLength), bindlib.MarshallSyscall(deviation), bindlib.MarshallSyscall(seedAssist))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_path_effect_create_sum bindlib.PreloadProc

func SkPathEffectCreateSum(first unsafe.Pointer, second unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_path_effect_create_sum.Addr(), bindlib.MarshallSyscall(first), bindlib.MarshallSyscall(second))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_path_effect_create_trim bindlib.PreloadProc

func SkPathEffectCreateTrim(start float32, stop float32, mode SkPathEffectTrimModeT) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_path_effect_create_trim.Addr(), bindlib.MarshallSyscall(start), bindlib.MarshallSyscall(stop), bindlib.MarshallSyscall(mode))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_path_effect_unref bindlib.PreloadProc

func SkPathEffectUnref(effect unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_path_effect_unref.Addr(), bindlib.MarshallSyscall(effect))
}

var __imp_sk_path_op bindlib.PreloadProc

func SkPathOp(path unsafe.Pointer, other unsafe.Pointer, op SkPathOpT, result unsafe.Pointer) bool {
	__res := bindlib.CCall4(__imp_sk_path_op.Addr(), bindlib.MarshallSyscall(path), bindlib.MarshallSyscall(other), bindlib.MarshallSyscall(op), bindlib.MarshallSyscall(result))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_path_simplify bindlib.PreloadProc

func SkPathSimplify(path unsafe.Pointer, result unsafe.Pointer) bool {
	__res := bindlib.CCall2(__imp_sk_path_simplify.Addr(), bindlib.MarshallSyscall(path), bindlib.MarshallSyscall(result))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_opbuilder_add bindlib.PreloadProc

func SkOpbuilderAdd(builder unsafe.Pointer, path unsafe.Pointer, op SkPathOpT) {
	bindlib.CCall3(__imp_sk_opbuilder_add.Addr(), bindlib.MarshallSyscall(builder), bindlib.MarshallSyscall(path), bindlib.MarshallSyscall(op))
}

var __imp_sk_opbuilder_destroy bindlib.PreloadProc

func SkOpbuilderDestroy(builder unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_opbuilder_destroy.Addr(), bindlib.MarshallSyscall(builder))
}

var __imp_sk_opbuilder_new bindlib.PreloadProc

func SkOpbuilderNew() unsafe.Pointer {
	__res := bindlib.CCall0(__imp_sk_opbuilder_new.Addr())
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_opbuilder_resolve bindlib.PreloadProc

func SkOpbuilderResolve(builder unsafe.Pointer, result unsafe.Pointer) bool {
	__res := bindlib.CCall2(__imp_sk_opbuilder_resolve.Addr(), bindlib.MarshallSyscall(builder), bindlib.MarshallSyscall(result))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_shader_new_blend bindlib.PreloadProc

func SkShaderNewBlend(mode SkBlendModeT, dst unsafe.Pointer, src unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_shader_new_blend.Addr(), bindlib.MarshallSyscall(mode), bindlib.MarshallSyscall(dst), bindlib.MarshallSyscall(src))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_shader_new_color bindlib.PreloadProc

func SkShaderNewColor(color SkColorT) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_shader_new_color.Addr(), bindlib.MarshallSyscall(color))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_shader_new_linear_gradient bindlib.PreloadProc

func SkShaderNewLinearGradient(points *SkPointT, colors *SkColorT, colorPos *float32, colorCount int32, tileMode SkTileModeT, localMatrix *SkMatrixT) unsafe.Pointer {
	__res := bindlib.CCall6(__imp_sk_shader_new_linear_gradient.Addr(), bindlib.MarshallSyscall(points), bindlib.MarshallSyscall(colors), bindlib.MarshallSyscall(colorPos), bindlib.MarshallSyscall(colorCount), bindlib.MarshallSyscall(tileMode), bindlib.MarshallSyscall(localMatrix))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_shader_new_perlin_noise_fractal_noise bindlib.PreloadProc

func SkShaderNewPerlinNoiseFractalNoise(baseFrequencyX float32, baseFrequencyY float32, numOctaves int32, seed float32, tileSize *SkIsizeT) unsafe.Pointer {
	__res := bindlib.CCall5(__imp_sk_shader_new_perlin_noise_fractal_noise.Addr(), bindlib.MarshallSyscall(baseFrequencyX), bindlib.MarshallSyscall(baseFrequencyY), bindlib.MarshallSyscall(numOctaves), bindlib.MarshallSyscall(seed), bindlib.MarshallSyscall(tileSize))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_shader_new_perlin_noise_turbulence bindlib.PreloadProc

func SkShaderNewPerlinNoiseTurbulence(baseFrequencyX float32, baseFrequencyY float32, numOctaves int32, seed float32, tileSize *SkIsizeT) unsafe.Pointer {
	__res := bindlib.CCall5(__imp_sk_shader_new_perlin_noise_turbulence.Addr(), bindlib.MarshallSyscall(baseFrequencyX), bindlib.MarshallSyscall(baseFrequencyY), bindlib.MarshallSyscall(numOctaves), bindlib.MarshallSyscall(seed), bindlib.MarshallSyscall(tileSize))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_shader_new_radial_gradient bindlib.PreloadProc

func SkShaderNewRadialGradient(center *SkPointT, radius float32, colors *SkColorT, colorPos *float32, colorCount int32, tileMode SkTileModeT, localMatrix *SkMatrixT) unsafe.Pointer {
	__res := bindlib.CCall7(__imp_sk_shader_new_radial_gradient.Addr(), bindlib.MarshallSyscall(center), bindlib.MarshallSyscall(radius), bindlib.MarshallSyscall(colors), bindlib.MarshallSyscall(colorPos), bindlib.MarshallSyscall(colorCount), bindlib.MarshallSyscall(tileMode), bindlib.MarshallSyscall(localMatrix))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_shader_new_sweep_gradient bindlib.PreloadProc

func SkShaderNewSweepGradient(center *SkPointT, colors *SkColorT, colorPos *float32, colorCount int32, tileMode SkTileModeT, startAngle float32, endAngle float32, localMatrix *SkMatrixT) unsafe.Pointer {
	__res := bindlib.CCall8(__imp_sk_shader_new_sweep_gradient.Addr(), bindlib.MarshallSyscall(center), bindlib.MarshallSyscall(colors), bindlib.MarshallSyscall(colorPos), bindlib.MarshallSyscall(colorCount), bindlib.MarshallSyscall(tileMode), bindlib.MarshallSyscall(startAngle), bindlib.MarshallSyscall(endAngle), bindlib.MarshallSyscall(localMatrix))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_shader_new_two_point_conical_gradient bindlib.PreloadProc

func SkShaderNewTwoPointConicalGradient(start *SkPointT, startRadius float32, end *SkPointT, endRadius float32, colors *SkColorT, colorPos *float32, colorCount int32, tileMode SkTileModeT, localMatrix *SkMatrixT) unsafe.Pointer {
	__res := bindlib.CCall9(__imp_sk_shader_new_two_point_conical_gradient.Addr(), bindlib.MarshallSyscall(start), bindlib.MarshallSyscall(startRadius), bindlib.MarshallSyscall(end), bindlib.MarshallSyscall(endRadius), bindlib.MarshallSyscall(colors), bindlib.MarshallSyscall(colorPos), bindlib.MarshallSyscall(colorCount), bindlib.MarshallSyscall(tileMode), bindlib.MarshallSyscall(localMatrix))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_shader_unref bindlib.PreloadProc

func SkShaderUnref(shader unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_shader_unref.Addr(), bindlib.MarshallSyscall(shader))
}

var __imp_sk_shader_with_color_filter bindlib.PreloadProc

func SkShaderWithColorFilter(shader unsafe.Pointer, filter unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_shader_with_color_filter.Addr(), bindlib.MarshallSyscall(shader), bindlib.MarshallSyscall(filter))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_shader_with_local_matrix bindlib.PreloadProc

func SkShaderWithLocalMatrix(shader unsafe.Pointer, localMatrix *SkMatrixT) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_shader_with_local_matrix.Addr(), bindlib.MarshallSyscall(shader), bindlib.MarshallSyscall(localMatrix))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_string_new bindlib.PreloadProc

func SkStringNew(text *byte, _len uint) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_string_new.Addr(), bindlib.MarshallSyscall(text), bindlib.MarshallSyscall(_len))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_string_new_empty bindlib.PreloadProc

func SkStringNewEmpty() unsafe.Pointer {
	__res := bindlib.CCall0(__imp_sk_string_new_empty.Addr())
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_string_delete bindlib.PreloadProc

func SkStringDelete(str unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_string_delete.Addr(), bindlib.MarshallSyscall(str))
}

var __imp_sk_string_get_c_str bindlib.PreloadProc

func SkStringGetCStr(str unsafe.Pointer) *byte {
	__res := bindlib.CCall1(__imp_sk_string_get_c_str.Addr(), bindlib.MarshallSyscall(str))
	return bindlib.UnmarshallSyscall[*byte](__res)
}

var __imp_sk_string_get_size bindlib.PreloadProc

func SkStringGetSize(str unsafe.Pointer) uint {
	__res := bindlib.CCall1(__imp_sk_string_get_size.Addr(), bindlib.MarshallSyscall(str))
	return bindlib.UnmarshallSyscall[uint](__res)
}

var __imp_sk_surface_make_raster_direct bindlib.PreloadProc

func SkSurfaceMakeRasterDirect(imageInfo *SkImageInfoT, pixels unsafe.Pointer, rowBytes uint, surfaceProps unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall4(__imp_sk_surface_make_raster_direct.Addr(), bindlib.MarshallSyscall(imageInfo), bindlib.MarshallSyscall(pixels), bindlib.MarshallSyscall(rowBytes), bindlib.MarshallSyscall(surfaceProps))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_surface_make_raster_n32_premul bindlib.PreloadProc

func SkSurfaceMakeRasterN32Premul(imageInfo *SkImageInfoT, surfaceProps unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_surface_make_raster_n32_premul.Addr(), bindlib.MarshallSyscall(imageInfo), bindlib.MarshallSyscall(surfaceProps))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_surface_make_surface bindlib.PreloadProc

func SkSurfaceMakeSurface(surface unsafe.Pointer, width int32, height int32) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_surface_make_surface.Addr(), bindlib.MarshallSyscall(surface), bindlib.MarshallSyscall(width), bindlib.MarshallSyscall(height))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_surface_make_image_snapshot bindlib.PreloadProc

func SkSurfaceMakeImageSnapshot(surface unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_surface_make_image_snapshot.Addr(), bindlib.MarshallSyscall(surface))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_surface_get_canvas bindlib.PreloadProc

func SkSurfaceGetCanvas(surface unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_surface_get_canvas.Addr(), bindlib.MarshallSyscall(surface))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_surface_new_backend_render_target bindlib.PreloadProc

func SkSurfaceNewBackendRenderTarget(context unsafe.Pointer, target unsafe.Pointer, origin GrSurfaceOriginT, colorType SkColorTypeT, colorspace unsafe.Pointer, props unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall6(__imp_sk_surface_new_backend_render_target.Addr(), bindlib.MarshallSyscall(context), bindlib.MarshallSyscall(target), bindlib.MarshallSyscall(origin), bindlib.MarshallSyscall(colorType), bindlib.MarshallSyscall(colorspace), bindlib.MarshallSyscall(props))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_surface_unref bindlib.PreloadProc

func SkSurfaceUnref(surface unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_surface_unref.Addr(), bindlib.MarshallSyscall(surface))
}

var __imp_sk_surfaceprops_new bindlib.PreloadProc

func SkSurfacepropsNew(flags uint32, geometry SkPixelGeometryT) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_surfaceprops_new.Addr(), bindlib.MarshallSyscall(flags), bindlib.MarshallSyscall(geometry))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_surfaceprops_delete bindlib.PreloadProc

func SkSurfacepropsDelete(surface_props unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_surfaceprops_delete.Addr(), bindlib.MarshallSyscall(surface_props))
}

var __imp_sk_textblob_builder_alloc_run bindlib.PreloadProc

func SkTextblobBuilderAllocRun(builder unsafe.Pointer, font unsafe.Pointer, count int32, x float32, y float32, bounds *SkRectT) *SkTextBlobBuilderRunBufferT {
	__res := bindlib.CCall6(__imp_sk_textblob_builder_alloc_run.Addr(), bindlib.MarshallSyscall(builder), bindlib.MarshallSyscall(font), bindlib.MarshallSyscall(count), bindlib.MarshallSyscall(x), bindlib.MarshallSyscall(y), bindlib.MarshallSyscall(bounds))
	return bindlib.UnmarshallSyscall[*SkTextBlobBuilderRunBufferT](__res)
}

var __imp_sk_textblob_builder_alloc_run_pos bindlib.PreloadProc

func SkTextblobBuilderAllocRunPos(builder unsafe.Pointer, font unsafe.Pointer, count int32, bounds *SkRectT) *SkTextBlobBuilderRunBufferT {
	__res := bindlib.CCall4(__imp_sk_textblob_builder_alloc_run_pos.Addr(), bindlib.MarshallSyscall(builder), bindlib.MarshallSyscall(font), bindlib.MarshallSyscall(count), bindlib.MarshallSyscall(bounds))
	return bindlib.UnmarshallSyscall[*SkTextBlobBuilderRunBufferT](__res)
}

var __imp_sk_textblob_builder_alloc_run_pos_h bindlib.PreloadProc

func SkTextblobBuilderAllocRunPosH(builder unsafe.Pointer, font unsafe.Pointer, count int32, y float32, bounds *SkRectT) *SkTextBlobBuilderRunBufferT {
	__res := bindlib.CCall5(__imp_sk_textblob_builder_alloc_run_pos_h.Addr(), bindlib.MarshallSyscall(builder), bindlib.MarshallSyscall(font), bindlib.MarshallSyscall(count), bindlib.MarshallSyscall(y), bindlib.MarshallSyscall(bounds))
	return bindlib.UnmarshallSyscall[*SkTextBlobBuilderRunBufferT](__res)
}

var __imp_sk_textblob_builder_delete bindlib.PreloadProc

func SkTextblobBuilderDelete(builder unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_textblob_builder_delete.Addr(), bindlib.MarshallSyscall(builder))
}

var __imp_sk_textblob_builder_make bindlib.PreloadProc

func SkTextblobBuilderMake(builder unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_textblob_builder_make.Addr(), bindlib.MarshallSyscall(builder))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_textblob_builder_new bindlib.PreloadProc

func SkTextblobBuilderNew() unsafe.Pointer {
	__res := bindlib.CCall0(__imp_sk_textblob_builder_new.Addr())
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_textblob_get_bounds bindlib.PreloadProc

func SkTextblobGetBounds(blob unsafe.Pointer, bounds *SkRectT) {
	bindlib.CCall2(__imp_sk_textblob_get_bounds.Addr(), bindlib.MarshallSyscall(blob), bindlib.MarshallSyscall(bounds))
}

var __imp_sk_textblob_get_intercepts bindlib.PreloadProc

func SkTextblobGetIntercepts(blob unsafe.Pointer, bounds *float32, intervals *float32, paint unsafe.Pointer) int32 {
	__res := bindlib.CCall4(__imp_sk_textblob_get_intercepts.Addr(), bindlib.MarshallSyscall(blob), bindlib.MarshallSyscall(bounds), bindlib.MarshallSyscall(intervals), bindlib.MarshallSyscall(paint))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_textblob_make_from_text bindlib.PreloadProc

func SkTextblobMakeFromText(text unsafe.Pointer, byteLength uint, font unsafe.Pointer, encoding SkTextEncodingT) unsafe.Pointer {
	__res := bindlib.CCall4(__imp_sk_textblob_make_from_text.Addr(), bindlib.MarshallSyscall(text), bindlib.MarshallSyscall(byteLength), bindlib.MarshallSyscall(font), bindlib.MarshallSyscall(encoding))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_textblob_unref bindlib.PreloadProc

func SkTextblobUnref(blob unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_textblob_unref.Addr(), bindlib.MarshallSyscall(blob))
}

var __imp_sk_typeface_get_family_name bindlib.PreloadProc

func SkTypefaceGetFamilyName(typeface unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_typeface_get_family_name.Addr(), bindlib.MarshallSyscall(typeface))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_typeface_get_fontstyle bindlib.PreloadProc

func SkTypefaceGetFontstyle(typeface unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_typeface_get_fontstyle.Addr(), bindlib.MarshallSyscall(typeface))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_typeface_get_units_per_em bindlib.PreloadProc

func SkTypefaceGetUnitsPerEm(typeface unsafe.Pointer) int32 {
	__res := bindlib.CCall1(__imp_sk_typeface_get_units_per_em.Addr(), bindlib.MarshallSyscall(typeface))
	return bindlib.UnmarshallSyscall[int32](__res)
}

var __imp_sk_typeface_is_fixed_pitch bindlib.PreloadProc

func SkTypefaceIsFixedPitch(typeface unsafe.Pointer) bool {
	__res := bindlib.CCall1(__imp_sk_typeface_is_fixed_pitch.Addr(), bindlib.MarshallSyscall(typeface))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_typeface_unref bindlib.PreloadProc

func SkTypefaceUnref(typeface unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_typeface_unref.Addr(), bindlib.MarshallSyscall(typeface))
}

var __imp_sk_dynamic_memory_wstream_new bindlib.PreloadProc

func SkDynamicMemoryWstreamNew() unsafe.Pointer {
	__res := bindlib.CCall0(__imp_sk_dynamic_memory_wstream_new.Addr())
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_dynamic_memory_wstream_as_wstream bindlib.PreloadProc

func SkDynamicMemoryWstreamAsWstream(stream unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_dynamic_memory_wstream_as_wstream.Addr(), bindlib.MarshallSyscall(stream))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_dynamic_memory_wstream_write bindlib.PreloadProc

func SkDynamicMemoryWstreamWrite(stream unsafe.Pointer, buffer unsafe.Pointer, size uint) bool {
	__res := bindlib.CCall3(__imp_sk_dynamic_memory_wstream_write.Addr(), bindlib.MarshallSyscall(stream), bindlib.MarshallSyscall(buffer), bindlib.MarshallSyscall(size))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_dynamic_memory_wstream_bytes_written bindlib.PreloadProc

func SkDynamicMemoryWstreamBytesWritten(stream unsafe.Pointer) uint {
	__res := bindlib.CCall1(__imp_sk_dynamic_memory_wstream_bytes_written.Addr(), bindlib.MarshallSyscall(stream))
	return bindlib.UnmarshallSyscall[uint](__res)
}

var __imp_sk_dynamic_memory_wstream_read bindlib.PreloadProc

func SkDynamicMemoryWstreamRead(stream unsafe.Pointer, buffer unsafe.Pointer, offset uint, size uint) uint {
	__res := bindlib.CCall4(__imp_sk_dynamic_memory_wstream_read.Addr(), bindlib.MarshallSyscall(stream), bindlib.MarshallSyscall(buffer), bindlib.MarshallSyscall(offset), bindlib.MarshallSyscall(size))
	return bindlib.UnmarshallSyscall[uint](__res)
}

var __imp_sk_dynamic_memory_wstream_delete bindlib.PreloadProc

func SkDynamicMemoryWstreamDelete(stream unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_dynamic_memory_wstream_delete.Addr(), bindlib.MarshallSyscall(stream))
}

var __imp_sk_file_wstream_new bindlib.PreloadProc

func SkFileWstreamNew(path *byte) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_file_wstream_new.Addr(), bindlib.MarshallSyscall(path))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_file_wstream_as_wstream bindlib.PreloadProc

func SkFileWstreamAsWstream(stream unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_sk_file_wstream_as_wstream.Addr(), bindlib.MarshallSyscall(stream))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_file_wstream_write bindlib.PreloadProc

func SkFileWstreamWrite(stream unsafe.Pointer, buffer unsafe.Pointer, size uint) bool {
	__res := bindlib.CCall3(__imp_sk_file_wstream_write.Addr(), bindlib.MarshallSyscall(stream), bindlib.MarshallSyscall(buffer), bindlib.MarshallSyscall(size))
	return bindlib.UnmarshallSyscall[bool](__res)
}

var __imp_sk_file_wstream_bytes_written bindlib.PreloadProc

func SkFileWstreamBytesWritten(stream unsafe.Pointer) uint {
	__res := bindlib.CCall1(__imp_sk_file_wstream_bytes_written.Addr(), bindlib.MarshallSyscall(stream))
	return bindlib.UnmarshallSyscall[uint](__res)
}

var __imp_sk_file_wstream_flush bindlib.PreloadProc

func SkFileWstreamFlush(stream unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_file_wstream_flush.Addr(), bindlib.MarshallSyscall(stream))
}

var __imp_sk_file_wstream_delete bindlib.PreloadProc

func SkFileWstreamDelete(stream unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_file_wstream_delete.Addr(), bindlib.MarshallSyscall(stream))
}

var __imp_sk_document_begin_page bindlib.PreloadProc

func SkDocumentBeginPage(doc unsafe.Pointer, width float32, height float32) unsafe.Pointer {
	__res := bindlib.CCall3(__imp_sk_document_begin_page.Addr(), bindlib.MarshallSyscall(doc), bindlib.MarshallSyscall(width), bindlib.MarshallSyscall(height))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_sk_document_end_page bindlib.PreloadProc

func SkDocumentEndPage(doc unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_document_end_page.Addr(), bindlib.MarshallSyscall(doc))
}

var __imp_sk_document_close bindlib.PreloadProc

func SkDocumentClose(doc unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_document_close.Addr(), bindlib.MarshallSyscall(doc))
}

var __imp_sk_document_abort bindlib.PreloadProc

func SkDocumentAbort(doc unsafe.Pointer) {
	bindlib.CCall1(__imp_sk_document_abort.Addr(), bindlib.MarshallSyscall(doc))
}

var __imp_sk_document_make_pdf bindlib.PreloadProc

func SkDocumentMakePdf(stream unsafe.Pointer, metadata *SkMetadataT) unsafe.Pointer {
	__res := bindlib.CCall2(__imp_sk_document_make_pdf.Addr(), bindlib.MarshallSyscall(stream), bindlib.MarshallSyscall(metadata))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_register_image_codecs bindlib.PreloadProc

func RegisterImageCodecs() { bindlib.CCall0(__imp_register_image_codecs.Addr()) }

package main

import (
	"strings"

	"github.com/ddkwork/golibrary/stream"
)

// Code generated by GeneratedFile types - DO NOT EDIT.

type TradeType uint8

const (
	SmokeType TradeType = iota
	WineType
	MeatType
	DiskType
	SheepType
	GiftType
	CashType
	FirecrackersType
	OtherType
)

func (t TradeType) Valid() bool {
	return t >= SmokeType && t <= OtherType
}

func TradeTypeBy[T stream.Integer](v T) TradeType {
	return TradeType(v)
}

func (t TradeType) AssertBy(name string) TradeType {
	name = strings.TrimSuffix(name, "Type")
	for _, n := range t.EnumTypes() {
		if strings.ToLower(name) == strings.ToLower(n.String()) {
			return n
		}
	}
	panic("InvalidType")
}

func (t TradeType) String() string {
	switch t {
	case SmokeType:
		return "Smoke"
	case WineType:
		return "Wine"
	case MeatType:
		return "Meat"
	case DiskType:
		return "Disk"
	case SheepType:
		return "Sheep"
	case GiftType:
		return "Gift"
	case CashType:
		return "Cash"
	case FirecrackersType:
		return "Firecrackers"
	case OtherType:
		return "Other"
	default:
		panic("InvalidType")
	}
}

func (t TradeType) Tooltip() string {
	switch t {
	case SmokeType:
		return "烟"
	case WineType:
		return "酒"
	case MeatType:
		return "肉"
	case DiskType:
		return "菜"
	case SheepType:
		return "羊"
	case GiftType:
		return "礼金"
	case CashType:
		return "取钱"
	case FirecrackersType:
		return "鞭炮"
	case OtherType:
		return "其它"
	default:
		panic("InvalidType")
	}
}

func (t TradeType) Names() []string {
	return []string{
		"Smoke",
		"Wine",
		"Meat",
		"Disk",
		"Sheep",
		"Gift",
		"Cash",
		"Firecrackers",
		"Other",
	}
}

func (t TradeType) EnumTypes() []TradeType {
	return []TradeType{
		SmokeType,
		WineType,
		MeatType,
		DiskType,
		SheepType,
		GiftType,
		CashType,
		FirecrackersType,
		OtherType,
	}
}

func (t TradeType) SvgFileName() string {
	return t.String() + ".svg"
}
